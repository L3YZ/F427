; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\pwm.o --asm_dir=.\Lst\ --list_dir=.\Lst\ --depend=.\obj\pwm.d --cpu=Cortex-M4.fp --apcs=interwork -O0 -I..\..\..\CMSIS\4.5.0\CMSIS\Include -I..\APP -I..\APP\ST -I..\APP\uCOS -I..\..\BSP\KeilMDK -I..\..\BSP\Board\inc -I..\..\BSP\STM32F4xx\inc -I..\..\BSP\Xlong\inc -I..\..\..\uCOS\uC-CPU -I..\..\..\uCOS\uC-CPU\Ports\ARM-Cortex-M4 -I..\..\..\uCOS\uC-LIB -I..\..\..\uCOS\uC-LIB\Ports\ARM-Cortex-M4 -I..\..\..\uCOS\uCOS-III\Source -I..\..\..\uCOS\uCOS-III\Ports\ARM-Cortex-M4 -IC:\Users\V200\Desktop\XLong\XLong\OS\KeilMDKPrj\RTE -Id:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\1.0.8\Device\Include -Id:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -DSTM32F427_437xx -DSTM32F427_437xx -DUSE_STDPERIPH_DRIVER --omf_browse=.\obj\pwm.crf ..\..\BSP\XLong\src\PWM.c]
                          THUMB

                          AREA ||i.BSP_XLong_PWMInit||, CODE, READONLY, ALIGN=2

                  BSP_XLong_PWMInit PROC
;;;225    
;;;226    void   BSP_XLong_PWMInit(void)
000000  b500              PUSH     {lr}
;;;227    {
000002  b089              SUB      sp,sp,#0x24
;;;228    	CPU_INT16U i,j;
;;;229    	
;;;230    	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
;;;231    	TIM_OCInitTypeDef        TIM_OCInitStructure;
;;;232    	  
;;;233    	// Group TIM3   默认50Hz
;;;234    	TIM_TimeBaseStructure.TIM_Prescaler     = BSP_XLongPWM_GroupPara[0]; //Timer时钟的预分频值，分频后的值为计数时钟频率 
000004  48f0              LDR      r0,|L1.968|
000006  8800              LDRH     r0,[r0,#0]  ; BSP_XLongPWM_GroupPara
000008  f8ad0018          STRH     r0,[sp,#0x18]
;;;235    	TIM_TimeBaseStructure.TIM_CounterMode   = TIM_CounterMode_Up;        //向上计数
00000c  2000              MOVS     r0,#0
00000e  f8ad001a          STRH     r0,[sp,#0x1a]
;;;236    	TIM_TimeBaseStructure.TIM_Period        = BSP_XLongPWM_GroupPara[1]; //0-65535                                    
000012  48ed              LDR      r0,|L1.968|
000014  8840              LDRH     r0,[r0,#2]  ; BSP_XLongPWM_GroupPara
000016  9007              STR      r0,[sp,#0x1c]
;;;237    	TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;              //经过 TIM_Prescaler 分频后的时钟，再次分频值，通常设为1，不再分频                                                                  
000018  2000              MOVS     r0,#0
00001a  f8ad0020          STRH     r0,[sp,#0x20]
;;;238    	TIM_TimeBaseInit(TIM3,&TIM_TimeBaseStructure);	
00001e  a906              ADD      r1,sp,#0x18
000020  48ea              LDR      r0,|L1.972|
000022  f7fffffe          BL       TIM_TimeBaseInit
;;;239    	
;;;240    	// Group TIM9   默认50Hz
;;;241    	TIM_TimeBaseStructure.TIM_Prescaler     = BSP_XLongPWM_GroupPara[3]; //Timer时钟的预分频值，分频后的值为计数时钟频率 
000026  48e8              LDR      r0,|L1.968|
000028  88c0              LDRH     r0,[r0,#6]  ; BSP_XLongPWM_GroupPara
00002a  f8ad0018          STRH     r0,[sp,#0x18]
;;;242    	TIM_TimeBaseStructure.TIM_CounterMode   = TIM_CounterMode_Up;        //向上计数
00002e  2000              MOVS     r0,#0
000030  f8ad001a          STRH     r0,[sp,#0x1a]
;;;243    	TIM_TimeBaseStructure.TIM_Period        = BSP_XLongPWM_GroupPara[4]; //0-65535                                    
000034  48e4              LDR      r0,|L1.968|
000036  8900              LDRH     r0,[r0,#8]  ; BSP_XLongPWM_GroupPara
000038  9007              STR      r0,[sp,#0x1c]
;;;244    	TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;              //经过 TIM_Prescaler 分频后的时钟，再次分频值，通常设为1，不再分频                                                                 
00003a  2000              MOVS     r0,#0
00003c  f8ad0020          STRH     r0,[sp,#0x20]
;;;245        TIM_TimeBaseInit(TIM9,&TIM_TimeBaseStructure);
000040  a906              ADD      r1,sp,#0x18
000042  48e3              LDR      r0,|L1.976|
000044  f7fffffe          BL       TIM_TimeBaseInit
;;;246    	
;;;247    	// Group TIM12  默认50Hz
;;;248    	TIM_TimeBaseStructure.TIM_Prescaler     = BSP_XLongPWM_GroupPara[6]; //Timer时钟的预分频值，分频后的值为计数时钟频率 
000048  48df              LDR      r0,|L1.968|
00004a  8980              LDRH     r0,[r0,#0xc]  ; BSP_XLongPWM_GroupPara
00004c  f8ad0018          STRH     r0,[sp,#0x18]
;;;249    	TIM_TimeBaseStructure.TIM_CounterMode   = TIM_CounterMode_Up;        //向上计数
000050  2000              MOVS     r0,#0
000052  f8ad001a          STRH     r0,[sp,#0x1a]
;;;250    	TIM_TimeBaseStructure.TIM_Period        = BSP_XLongPWM_GroupPara[7]; //0-65535                                    
000056  48dc              LDR      r0,|L1.968|
000058  89c0              LDRH     r0,[r0,#0xe]  ; BSP_XLongPWM_GroupPara
00005a  9007              STR      r0,[sp,#0x1c]
;;;251    	TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;              //经过 TIM_Prescaler 分频后的时钟，再次分频值，通常设为1，不再分频                                                                 
00005c  2000              MOVS     r0,#0
00005e  f8ad0020          STRH     r0,[sp,#0x20]
;;;252        TIM_TimeBaseInit(TIM12,&TIM_TimeBaseStructure);	
000062  a906              ADD      r1,sp,#0x18
000064  48db              LDR      r0,|L1.980|
000066  f7fffffe          BL       TIM_TimeBaseInit
;;;253    	
;;;254    	// Group TIM1	默认400Hz
;;;255    	TIM_TimeBaseStructure.TIM_Prescaler     = BSP_XLongPWM_GroupPara[9]; //Timer时钟的预分频值，分频后的值为计数时钟频率 
00006a  48d7              LDR      r0,|L1.968|
00006c  8a40              LDRH     r0,[r0,#0x12]  ; BSP_XLongPWM_GroupPara
00006e  f8ad0018          STRH     r0,[sp,#0x18]
;;;256    	TIM_TimeBaseStructure.TIM_CounterMode   = TIM_CounterMode_Up;        //向上计数
000072  2000              MOVS     r0,#0
000074  f8ad001a          STRH     r0,[sp,#0x1a]
;;;257    	TIM_TimeBaseStructure.TIM_Period        = BSP_XLongPWM_GroupPara[10];//0-65535                                    
000078  48d3              LDR      r0,|L1.968|
00007a  8a80              LDRH     r0,[r0,#0x14]  ; BSP_XLongPWM_GroupPara
00007c  9007              STR      r0,[sp,#0x1c]
;;;258    	TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;              //经过 TIM_Prescaler 分频后的时钟，再次分频值，通常设为1，不再分频                                                                  
00007e  2000              MOVS     r0,#0
000080  f8ad0020          STRH     r0,[sp,#0x20]
;;;259    	TIM_TimeBaseStructure.TIM_RepetitionCounter = 0x0;
000084  f88d0022          STRB     r0,[sp,#0x22]
;;;260    	TIM_TimeBaseInit(TIM1,&TIM_TimeBaseStructure);	
000088  a906              ADD      r1,sp,#0x18
00008a  48d3              LDR      r0,|L1.984|
00008c  f7fffffe          BL       TIM_TimeBaseInit
;;;261    	
;;;262    	// Group TIM4	默认400Hz
;;;263    	TIM_TimeBaseStructure.TIM_Prescaler     = BSP_XLongPWM_GroupPara[12];//Timer时钟的预分频值，分频后的值为计数时钟频率 
000090  48cd              LDR      r0,|L1.968|
000092  8b00              LDRH     r0,[r0,#0x18]  ; BSP_XLongPWM_GroupPara
000094  f8ad0018          STRH     r0,[sp,#0x18]
;;;264    	TIM_TimeBaseStructure.TIM_CounterMode   = TIM_CounterMode_Up;        //向上计数
000098  2000              MOVS     r0,#0
00009a  f8ad001a          STRH     r0,[sp,#0x1a]
;;;265    	TIM_TimeBaseStructure.TIM_Period        = BSP_XLongPWM_GroupPara[13];//0-65535                                    
00009e  48ca              LDR      r0,|L1.968|
0000a0  8b40              LDRH     r0,[r0,#0x1a]  ; BSP_XLongPWM_GroupPara
0000a2  9007              STR      r0,[sp,#0x1c]
;;;266    	TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;              //经过 TIM_Prescaler 分频后的时钟，再次分频值，通常设为1，不再分频                                                                
0000a4  2000              MOVS     r0,#0
0000a6  f8ad0020          STRH     r0,[sp,#0x20]
;;;267    	TIM_TimeBaseInit(TIM4,&TIM_TimeBaseStructure);
0000aa  a906              ADD      r1,sp,#0x18
0000ac  48cb              LDR      r0,|L1.988|
0000ae  f7fffffe          BL       TIM_TimeBaseInit
;;;268    	
;;;269    	// Group TIM13 LED       默认20Hz	
;;;270    	TIM_TimeBaseStructure.TIM_Prescaler     = BSP_XLongPWM_GroupPara[15];//Timer时钟的预分频值，分频后的值为计数时钟频率 
0000b2  48c5              LDR      r0,|L1.968|
0000b4  8bc0              LDRH     r0,[r0,#0x1e]  ; BSP_XLongPWM_GroupPara
0000b6  f8ad0018          STRH     r0,[sp,#0x18]
;;;271    	TIM_TimeBaseStructure.TIM_CounterMode   = TIM_CounterMode_Up;        //向上计数
0000ba  2000              MOVS     r0,#0
0000bc  f8ad001a          STRH     r0,[sp,#0x1a]
;;;272    	TIM_TimeBaseStructure.TIM_Period        = BSP_XLongPWM_GroupPara[16];//0-65535                                    
0000c0  48c1              LDR      r0,|L1.968|
0000c2  8c00              LDRH     r0,[r0,#0x20]  ; BSP_XLongPWM_GroupPara
0000c4  9007              STR      r0,[sp,#0x1c]
;;;273    	TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;              //经过 TIM_Prescaler 分频后的时钟，再次分频值，通常设为1，不再分频                                                             
0000c6  2000              MOVS     r0,#0
0000c8  f8ad0020          STRH     r0,[sp,#0x20]
;;;274    	TIM_TimeBaseInit(TIM13,&TIM_TimeBaseStructure);		
0000cc  a906              ADD      r1,sp,#0x18
0000ce  48c4              LDR      r0,|L1.992|
0000d0  f7fffffe          BL       TIM_TimeBaseInit
;;;275    
;;;276    	// Group TIM14 蜂鸣器    默认20Hz	
;;;277    	TIM_TimeBaseStructure.TIM_Prescaler     = BSP_XLongPWM_GroupPara[18];//Timer时钟的预分频值，分频后的值为计数时钟频率 
0000d4  48bc              LDR      r0,|L1.968|
0000d6  8c80              LDRH     r0,[r0,#0x24]  ; BSP_XLongPWM_GroupPara
0000d8  f8ad0018          STRH     r0,[sp,#0x18]
;;;278    	TIM_TimeBaseStructure.TIM_CounterMode   = TIM_CounterMode_Up;        //向上计数
0000dc  2000              MOVS     r0,#0
0000de  f8ad001a          STRH     r0,[sp,#0x1a]
;;;279    	TIM_TimeBaseStructure.TIM_Period        = BSP_XLongPWM_GroupPara[19];//0-65535                                    
0000e2  48b9              LDR      r0,|L1.968|
0000e4  8cc0              LDRH     r0,[r0,#0x26]  ; BSP_XLongPWM_GroupPara
0000e6  9007              STR      r0,[sp,#0x1c]
;;;280    	TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;              //经过 TIM_Prescaler 分频后的时钟，再次分频值，通常设为1，不再分频                                                                  
0000e8  2000              MOVS     r0,#0
0000ea  f8ad0020          STRH     r0,[sp,#0x20]
;;;281    	TIM_TimeBaseInit(TIM14,&TIM_TimeBaseStructure);	
0000ee  a906              ADD      r1,sp,#0x18
0000f0  48bc              LDR      r0,|L1.996|
0000f2  f7fffffe          BL       TIM_TimeBaseInit
;;;282    
;;;283    	// Group TIM10 FET_1A    默认100Hz	
;;;284    	TIM_TimeBaseStructure.TIM_Prescaler     = BSP_XLongPWM_GroupPara[21];//Timer时钟的预分频值，分频后的值为计数时钟频率 
0000f6  48b4              LDR      r0,|L1.968|
0000f8  8d40              LDRH     r0,[r0,#0x2a]  ; BSP_XLongPWM_GroupPara
0000fa  f8ad0018          STRH     r0,[sp,#0x18]
;;;285    	TIM_TimeBaseStructure.TIM_CounterMode   = TIM_CounterMode_Up;        //向上计数
0000fe  2000              MOVS     r0,#0
000100  f8ad001a          STRH     r0,[sp,#0x1a]
;;;286    	TIM_TimeBaseStructure.TIM_Period        = BSP_XLongPWM_GroupPara[22];//0-65535                                    
000104  48b0              LDR      r0,|L1.968|
000106  8d80              LDRH     r0,[r0,#0x2c]  ; BSP_XLongPWM_GroupPara
000108  9007              STR      r0,[sp,#0x1c]
;;;287    	TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;              //经过 TIM_Prescaler 分频后的时钟，再次分频值，通常设为1，不再分频            
00010a  2000              MOVS     r0,#0
00010c  f8ad0020          STRH     r0,[sp,#0x20]
;;;288    	TIM_TimeBaseInit(TIM10,&TIM_TimeBaseStructure);	
000110  a906              ADD      r1,sp,#0x18
000112  48b5              LDR      r0,|L1.1000|
000114  f7fffffe          BL       TIM_TimeBaseInit
;;;289    
;;;290    	// Group TIM11 FET_2A    默认100Hz	
;;;291    	TIM_TimeBaseStructure.TIM_Prescaler     = BSP_XLongPWM_GroupPara[24];//Timer时钟的预分频值，分频后的值为计数时钟频率 
000118  48ab              LDR      r0,|L1.968|
00011a  8e00              LDRH     r0,[r0,#0x30]  ; BSP_XLongPWM_GroupPara
00011c  f8ad0018          STRH     r0,[sp,#0x18]
;;;292    	TIM_TimeBaseStructure.TIM_CounterMode   = TIM_CounterMode_Up;        //向上计数
000120  2000              MOVS     r0,#0
000122  f8ad001a          STRH     r0,[sp,#0x1a]
;;;293    	TIM_TimeBaseStructure.TIM_Period        = BSP_XLongPWM_GroupPara[25];//0-65535                                    
000126  48a8              LDR      r0,|L1.968|
000128  8e40              LDRH     r0,[r0,#0x32]  ; BSP_XLongPWM_GroupPara
00012a  9007              STR      r0,[sp,#0x1c]
;;;294    	TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;              //经过 TIM_Prescaler 分频后的时钟，再次分频值，通常设为1，不再分频    
00012c  2000              MOVS     r0,#0
00012e  f8ad0020          STRH     r0,[sp,#0x20]
;;;295    	TIM_TimeBaseInit(TIM11,&TIM_TimeBaseStructure);	
000132  a906              ADD      r1,sp,#0x18
000134  48ad              LDR      r0,|L1.1004|
000136  f7fffffe          BL       TIM_TimeBaseInit
;;;296    
;;;297        // PWM属性设置 TIM3 & TIM9 & TIM12 & TIM1 & TIM4  
;;;298    	TIM_OCInitStructure.TIM_OCMode          = TIM_OCMode_PWM2;         //选择定时器模式:TIM脉冲宽度调制模式2
00013a  2070              MOVS     r0,#0x70
00013c  f8ad0004          STRH     r0,[sp,#4]
;;;299     	TIM_OCInitStructure.TIM_OutputState     = TIM_OutputState_Enable;  //正向通道输出使能
000140  2001              MOVS     r0,#1
000142  f8ad0006          STRH     r0,[sp,#6]
;;;300    	TIM_OCInitStructure.TIM_OutputNState    = TIM_OutputState_Disable; //反向通道输出使能 
000146  2000              MOVS     r0,#0
000148  f8ad0008          STRH     r0,[sp,#8]
;;;301    	TIM_OCInitStructure.TIM_OCPolarity      = TIM_OCPolarity_Low;      //输出极性:TIM输出比较极性低   默认高电平	
00014c  2002              MOVS     r0,#2
00014e  f8ad0010          STRH     r0,[sp,#0x10]
;;;302    	TIM_OCInitStructure.TIM_OCNPolarity     = TIM_OCNPolarity_Low;      
000152  2008              MOVS     r0,#8
000154  f8ad0012          STRH     r0,[sp,#0x12]
;;;303    	TIM_OCInitStructure.TIM_OCIdleState     = TIM_OCIdleState_Reset;
000158  2000              MOVS     r0,#0
00015a  f8ad0014          STRH     r0,[sp,#0x14]
;;;304    	TIM_OCInitStructure.TIM_OCNIdleState    = TIM_OCNIdleState_Reset;
00015e  f8ad0016          STRH     r0,[sp,#0x16]
;;;305    	
;;;306    	TIM_OC1Init(TIM3,  &TIM_OCInitStructure);                          //PWM CH11
000162  a901              ADD      r1,sp,#4
000164  4899              LDR      r0,|L1.972|
000166  f7fffffe          BL       TIM_OC1Init
;;;307    	TIM_OC2Init(TIM3,  &TIM_OCInitStructure);                          //PWM CH12
00016a  a901              ADD      r1,sp,#4
00016c  4897              LDR      r0,|L1.972|
00016e  f7fffffe          BL       TIM_OC2Init
;;;308    	TIM_OC3Init(TIM3,  &TIM_OCInitStructure);                          //PWM CH01
000172  a901              ADD      r1,sp,#4
000174  4895              LDR      r0,|L1.972|
000176  f7fffffe          BL       TIM_OC3Init
;;;309    	TIM_OC4Init(TIM3,  &TIM_OCInitStructure);                          //PWM CH02
00017a  a901              ADD      r1,sp,#4
00017c  4893              LDR      r0,|L1.972|
00017e  f7fffffe          BL       TIM_OC4Init
;;;310    	TIM_OC1Init(TIM9,  &TIM_OCInitStructure);                          //PWM CH13
000182  a901              ADD      r1,sp,#4
000184  4892              LDR      r0,|L1.976|
000186  f7fffffe          BL       TIM_OC1Init
;;;311    	TIM_OC2Init(TIM9,  &TIM_OCInitStructure);                          //PWM CH14
00018a  a901              ADD      r1,sp,#4
00018c  4890              LDR      r0,|L1.976|
00018e  f7fffffe          BL       TIM_OC2Init
;;;312    	TIM_OC1Init(TIM12, &TIM_OCInitStructure);                          //PWM CH15
000192  a901              ADD      r1,sp,#4
000194  488f              LDR      r0,|L1.980|
000196  f7fffffe          BL       TIM_OC1Init
;;;313    	TIM_OC2Init(TIM12, &TIM_OCInitStructure);                          //PWM CH16
00019a  a901              ADD      r1,sp,#4
00019c  488d              LDR      r0,|L1.980|
00019e  f7fffffe          BL       TIM_OC2Init
;;;314    	TIM_OC1Init(TIM1,  &TIM_OCInitStructure);                          //PWM CH03
0001a2  a901              ADD      r1,sp,#4
0001a4  488c              LDR      r0,|L1.984|
0001a6  f7fffffe          BL       TIM_OC1Init
;;;315    	TIM_OC2Init(TIM1,  &TIM_OCInitStructure);                          //PWM CH04
0001aa  a901              ADD      r1,sp,#4
0001ac  488a              LDR      r0,|L1.984|
0001ae  f7fffffe          BL       TIM_OC2Init
;;;316    	TIM_OC3Init(TIM1,  &TIM_OCInitStructure);                          //PWM CH05
0001b2  a901              ADD      r1,sp,#4
0001b4  4888              LDR      r0,|L1.984|
0001b6  f7fffffe          BL       TIM_OC3Init
;;;317    	TIM_OC4Init(TIM1,  &TIM_OCInitStructure);                          //PWM CH06
0001ba  a901              ADD      r1,sp,#4
0001bc  4886              LDR      r0,|L1.984|
0001be  f7fffffe          BL       TIM_OC4Init
;;;318    	TIM_OC1Init(TIM4,  &TIM_OCInitStructure);                          //PWM CH07
0001c2  a901              ADD      r1,sp,#4
0001c4  4885              LDR      r0,|L1.988|
0001c6  f7fffffe          BL       TIM_OC1Init
;;;319    	TIM_OC2Init(TIM4,  &TIM_OCInitStructure);                          //PWM CH08
0001ca  a901              ADD      r1,sp,#4
0001cc  4883              LDR      r0,|L1.988|
0001ce  f7fffffe          BL       TIM_OC2Init
;;;320    	TIM_OC3Init(TIM4,  &TIM_OCInitStructure);                          //PWM CH09
0001d2  a901              ADD      r1,sp,#4
0001d4  4881              LDR      r0,|L1.988|
0001d6  f7fffffe          BL       TIM_OC3Init
;;;321    	TIM_OC4Init(TIM4,  &TIM_OCInitStructure);                          //PWM CH10
0001da  a901              ADD      r1,sp,#4
0001dc  487f              LDR      r0,|L1.988|
0001de  f7fffffe          BL       TIM_OC4Init
;;;322    	
;;;323        // PWM属性设置 TIM13 & TIM14 & TIM10 & TIM11 	
;;;324    	TIM_OCInitStructure.TIM_OCMode          = TIM_OCMode_PWM2;         //选择定时器模式:TIM脉冲宽度调制模式2
0001e2  2070              MOVS     r0,#0x70
0001e4  f8ad0004          STRH     r0,[sp,#4]
;;;325     	TIM_OCInitStructure.TIM_OutputState     = TIM_OutputState_Enable;  //比较输出使能
0001e8  2001              MOVS     r0,#1
0001ea  f8ad0006          STRH     r0,[sp,#6]
;;;326    	TIM_OCInitStructure.TIM_OCPolarity      = TIM_OCPolarity_High;     //输出极性:TIM输出比较极性低   默认低电平
0001ee  2000              MOVS     r0,#0
0001f0  f8ad0010          STRH     r0,[sp,#0x10]
;;;327    	
;;;328    	TIM_OC1Init(TIM13, &TIM_OCInitStructure);                          //LED
0001f4  a901              ADD      r1,sp,#4
0001f6  487a              LDR      r0,|L1.992|
0001f8  f7fffffe          BL       TIM_OC1Init
;;;329    	TIM_OC1Init(TIM14, &TIM_OCInitStructure);                          //Buzzer	
0001fc  a901              ADD      r1,sp,#4
0001fe  4879              LDR      r0,|L1.996|
000200  f7fffffe          BL       TIM_OC1Init
;;;330    	TIM_OC1Init(TIM10, &TIM_OCInitStructure);                          //FET_1A
000204  a901              ADD      r1,sp,#4
000206  4878              LDR      r0,|L1.1000|
000208  f7fffffe          BL       TIM_OC1Init
;;;331    	TIM_OC1Init(TIM11, &TIM_OCInitStructure);                          //FET_2A
00020c  a901              ADD      r1,sp,#4
00020e  4877              LDR      r0,|L1.1004|
000210  f7fffffe          BL       TIM_OC1Init
;;;332    	
;;;333        // 使能各个PWM通道	
;;;334    	TIM_OC1PreloadConfig(TIM3, TIM_OCPreload_Enable);                  //使能在CCR1上的预装载寄存器
000214  2108              MOVS     r1,#8
000216  486d              LDR      r0,|L1.972|
000218  f7fffffe          BL       TIM_OC1PreloadConfig
;;;335        TIM_ARRPreloadConfig(TIM3, ENABLE);                                //ARPE使能，自动重载预装载使能 (Auto-reload preload enable) 
00021c  2101              MOVS     r1,#1
00021e  486b              LDR      r0,|L1.972|
000220  f7fffffe          BL       TIM_ARRPreloadConfig
;;;336    	TIM_OC1PreloadConfig(TIM9, TIM_OCPreload_Enable);                  //使能在CCR1上的预装载寄存器
000224  2108              MOVS     r1,#8
000226  486a              LDR      r0,|L1.976|
000228  f7fffffe          BL       TIM_OC1PreloadConfig
;;;337        TIM_ARRPreloadConfig(TIM9, ENABLE);                                //ARPE使能，自动重载预装载使能 (Auto-reload preload enable) 	
00022c  2101              MOVS     r1,#1
00022e  4868              LDR      r0,|L1.976|
000230  f7fffffe          BL       TIM_ARRPreloadConfig
;;;338    	TIM_OC1PreloadConfig(TIM12, TIM_OCPreload_Enable);                 //使能在CCR1上的预装载寄存器
000234  2108              MOVS     r1,#8
000236  4867              LDR      r0,|L1.980|
000238  f7fffffe          BL       TIM_OC1PreloadConfig
;;;339        TIM_ARRPreloadConfig(TIM12, ENABLE);                               //ARPE使能，自动重载预装载使能 (Auto-reload preload enable) 	
00023c  2101              MOVS     r1,#1
00023e  4865              LDR      r0,|L1.980|
000240  f7fffffe          BL       TIM_ARRPreloadConfig
;;;340    	TIM_OC1PreloadConfig(TIM1, TIM_OCPreload_Enable);                  //使能在CCR1上的预装载寄存器
000244  2108              MOVS     r1,#8
000246  4864              LDR      r0,|L1.984|
000248  f7fffffe          BL       TIM_OC1PreloadConfig
;;;341        TIM_ARRPreloadConfig(TIM1, ENABLE);                                //ARPE使能，自动重载预装载使能 (Auto-reload preload enable) 
00024c  2101              MOVS     r1,#1
00024e  4862              LDR      r0,|L1.984|
000250  f7fffffe          BL       TIM_ARRPreloadConfig
;;;342    	TIM_OC1PreloadConfig(TIM4, TIM_OCPreload_Enable);                  //使能在CCR1上的预装载寄存器
000254  2108              MOVS     r1,#8
000256  4861              LDR      r0,|L1.988|
000258  f7fffffe          BL       TIM_OC1PreloadConfig
;;;343        TIM_ARRPreloadConfig(TIM4, ENABLE);                                //ARPE使能，自动重载预装载使能 (Auto-reload preload enable)     
00025c  2101              MOVS     r1,#1
00025e  485f              LDR      r0,|L1.988|
000260  f7fffffe          BL       TIM_ARRPreloadConfig
;;;344    	TIM_OC1PreloadConfig(TIM13, TIM_OCPreload_Enable);                 //使能在CCR1上的预装载寄存器
000264  2108              MOVS     r1,#8
000266  485e              LDR      r0,|L1.992|
000268  f7fffffe          BL       TIM_OC1PreloadConfig
;;;345        TIM_ARRPreloadConfig(TIM13, ENABLE);                               //ARPE使能，自动重载预装载使能 (Auto-reload preload enable) 	
00026c  2101              MOVS     r1,#1
00026e  485c              LDR      r0,|L1.992|
000270  f7fffffe          BL       TIM_ARRPreloadConfig
;;;346    	TIM_OC1PreloadConfig(TIM14, TIM_OCPreload_Enable);                 //使能在CCR1上的预装载寄存器
000274  2108              MOVS     r1,#8
000276  485b              LDR      r0,|L1.996|
000278  f7fffffe          BL       TIM_OC1PreloadConfig
;;;347        TIM_ARRPreloadConfig(TIM14, ENABLE);                               //ARPE使能，自动重载预装载使能 (Auto-reload preload enable) 	
00027c  2101              MOVS     r1,#1
00027e  4859              LDR      r0,|L1.996|
000280  f7fffffe          BL       TIM_ARRPreloadConfig
;;;348    	TIM_OC1PreloadConfig(TIM10, TIM_OCPreload_Enable);                 //使能在CCR1上的预装载寄存器
000284  2108              MOVS     r1,#8
000286  4858              LDR      r0,|L1.1000|
000288  f7fffffe          BL       TIM_OC1PreloadConfig
;;;349        TIM_ARRPreloadConfig(TIM10, ENABLE);                               //ARPE使能，自动重载预装载使能 (Auto-reload preload enable) 
00028c  2101              MOVS     r1,#1
00028e  4856              LDR      r0,|L1.1000|
000290  f7fffffe          BL       TIM_ARRPreloadConfig
;;;350    	TIM_OC1PreloadConfig(TIM11, TIM_OCPreload_Enable);                 //使能在CCR1上的预装载寄存器
000294  2108              MOVS     r1,#8
000296  4855              LDR      r0,|L1.1004|
000298  f7fffffe          BL       TIM_OC1PreloadConfig
;;;351        TIM_ARRPreloadConfig(TIM11, ENABLE);                               //ARPE使能，自动重载预装载使能 (Auto-reload preload enable) 
00029c  2101              MOVS     r1,#1
00029e  4853              LDR      r0,|L1.1004|
0002a0  f7fffffe          BL       TIM_ARRPreloadConfig
;;;352    
;;;353    	TIM_Cmd(TIM3, ENABLE);                                             //开始计数
0002a4  2101              MOVS     r1,#1
0002a6  4849              LDR      r0,|L1.972|
0002a8  f7fffffe          BL       TIM_Cmd
;;;354        TIM_Cmd(TIM9, ENABLE);                                             //开始计数
0002ac  2101              MOVS     r1,#1
0002ae  4848              LDR      r0,|L1.976|
0002b0  f7fffffe          BL       TIM_Cmd
;;;355        TIM_Cmd(TIM12, ENABLE);                                            //开始计数
0002b4  2101              MOVS     r1,#1
0002b6  4847              LDR      r0,|L1.980|
0002b8  f7fffffe          BL       TIM_Cmd
;;;356        TIM_Cmd(TIM1, ENABLE);                                             //开始计数
0002bc  2101              MOVS     r1,#1
0002be  4846              LDR      r0,|L1.984|
0002c0  f7fffffe          BL       TIM_Cmd
;;;357    	TIM_CtrlPWMOutputs(TIM1,ENABLE);                                   //允许PWM输出
0002c4  2101              MOVS     r1,#1
0002c6  4844              LDR      r0,|L1.984|
0002c8  f7fffffe          BL       TIM_CtrlPWMOutputs
;;;358        TIM_Cmd(TIM4, ENABLE);                                             //开始计数	
0002cc  2101              MOVS     r1,#1
0002ce  4843              LDR      r0,|L1.988|
0002d0  f7fffffe          BL       TIM_Cmd
;;;359        TIM_Cmd(TIM13, ENABLE);                                            //开始计数
0002d4  2101              MOVS     r1,#1
0002d6  4842              LDR      r0,|L1.992|
0002d8  f7fffffe          BL       TIM_Cmd
;;;360        TIM_Cmd(TIM14, ENABLE);                                            //开始计数   
0002dc  2101              MOVS     r1,#1
0002de  4841              LDR      r0,|L1.996|
0002e0  f7fffffe          BL       TIM_Cmd
;;;361        TIM_Cmd(TIM10, ENABLE);                                            //开始计数
0002e4  2101              MOVS     r1,#1
0002e6  4840              LDR      r0,|L1.1000|
0002e8  f7fffffe          BL       TIM_Cmd
;;;362        TIM_Cmd(TIM11, ENABLE);                                            //开始计数
0002ec  2101              MOVS     r1,#1
0002ee  483f              LDR      r0,|L1.1004|
0002f0  f7fffffe          BL       TIM_Cmd
;;;363    
;;;364    	
;;;365    	// 刷新所有PWM输出
;;;366    	BSP_XLong_PWMRefresh(0xFFFF);
0002f4  f64f70ff          MOV      r0,#0xffff
0002f8  f7fffffe          BL       BSP_XLong_PWMRefresh
;;;367    	
;;;368    	
;;;369    		
;;;370    	// PWM 输出测试值
;;;371    	TIM_SetCompare3(TIM3,  15000);	   //PWM CH01   舵机
0002fc  f6432198          MOV      r1,#0x3a98
000300  4832              LDR      r0,|L1.972|
000302  f7fffffe          BL       TIM_SetCompare3
;;;372    	TIM_SetCompare4(TIM3,  15000);	   //PWM CH02   舵机
000306  f6432198          MOV      r1,#0x3a98
00030a  4830              LDR      r0,|L1.972|
00030c  f7fffffe          BL       TIM_SetCompare4
;;;373    	TIM_SetCompare1(TIM3,  15000);     //PWM CH11   舵机
000310  f6432198          MOV      r1,#0x3a98
000314  482d              LDR      r0,|L1.972|
000316  f7fffffe          BL       TIM_SetCompare1
;;;374    	TIM_SetCompare2(TIM3,  15000);     //PWM CH12   舵机
00031a  f6432198          MOV      r1,#0x3a98
00031e  482b              LDR      r0,|L1.972|
000320  f7fffffe          BL       TIM_SetCompare2
;;;375    	
;;;376    	TIM_SetCompare1(TIM9,  15000);     //PWM CH13   舵机
000324  f6432198          MOV      r1,#0x3a98
000328  4829              LDR      r0,|L1.976|
00032a  f7fffffe          BL       TIM_SetCompare1
;;;377    	TIM_SetCompare2(TIM9,  15000);     //PWM CH14   舵机
00032e  f6432198          MOV      r1,#0x3a98
000332  4827              LDR      r0,|L1.976|
000334  f7fffffe          BL       TIM_SetCompare2
;;;378    	
;;;379    	TIM_SetCompare1(TIM12, 15000);     //PWM CH15   舵机
000338  f6432198          MOV      r1,#0x3a98
00033c  4825              LDR      r0,|L1.980|
00033e  f7fffffe          BL       TIM_SetCompare1
;;;380    	TIM_SetCompare2(TIM12, 15000);     //PWM CH16   舵机
000342  f6432198          MOV      r1,#0x3a98
000346  4823              LDR      r0,|L1.980|
000348  f7fffffe          BL       TIM_SetCompare2
;;;381    	
;;;382    	TIM_SetCompare1(TIM1,  24000);     //PWM CH03   电调
00034c  f64551c0          MOV      r1,#0x5dc0
000350  4821              LDR      r0,|L1.984|
000352  f7fffffe          BL       TIM_SetCompare1
;;;383    	TIM_SetCompare2(TIM1,  24000);     //PWM CH04   电调
000356  f64551c0          MOV      r1,#0x5dc0
00035a  481f              LDR      r0,|L1.984|
00035c  f7fffffe          BL       TIM_SetCompare2
;;;384    	TIM_SetCompare3(TIM1,  24000);	   //PWM CH05   电调
000360  f64551c0          MOV      r1,#0x5dc0
000364  481c              LDR      r0,|L1.984|
000366  f7fffffe          BL       TIM_SetCompare3
;;;385    	TIM_SetCompare4(TIM1,  24000);	   //PWM CH06   电调
00036a  f64551c0          MOV      r1,#0x5dc0
00036e  481a              LDR      r0,|L1.984|
000370  f7fffffe          BL       TIM_SetCompare4
;;;386    	
;;;387    	TIM_SetCompare1(TIM4,  24000);     //PWM CH07   电调
000374  f64551c0          MOV      r1,#0x5dc0
000378  4818              LDR      r0,|L1.988|
00037a  f7fffffe          BL       TIM_SetCompare1
;;;388    	TIM_SetCompare2(TIM4,  24000);     //PWM CH08   电调
00037e  f64551c0          MOV      r1,#0x5dc0
000382  4816              LDR      r0,|L1.988|
000384  f7fffffe          BL       TIM_SetCompare2
;;;389    	TIM_SetCompare3(TIM4,  24000);	   //PWM CH09   电调
000388  f64551c0          MOV      r1,#0x5dc0
00038c  4813              LDR      r0,|L1.988|
00038e  f7fffffe          BL       TIM_SetCompare3
;;;390    	TIM_SetCompare4(TIM4,  24000);	   //PWM CH10   电调
000392  f64551c0          MOV      r1,#0x5dc0
000396  4811              LDR      r0,|L1.988|
000398  f7fffffe          BL       TIM_SetCompare4
;;;391    	
;;;392    	// Buzzer输出测试值
;;;393    	TIM_SetCompare1(TIM14, 54000);	   //Buzzer
00039c  f24d21f0          MOV      r1,#0xd2f0
0003a0  4810              LDR      r0,|L1.996|
0003a2  f7fffffe          BL       TIM_SetCompare1
;;;394    	
;;;395    	// LED输出测试值
;;;396    	TIM_SetCompare1(TIM13, 54000);	   //LED	
0003a6  f24d21f0          MOV      r1,#0xd2f0
0003aa  480d              LDR      r0,|L1.992|
0003ac  f7fffffe          BL       TIM_SetCompare1
;;;397    
;;;398    	// FET_1A输出测试值
;;;399    	TIM_SetCompare1(TIM10, 12000);	   //FET_1A	
0003b0  f64261e0          MOV      r1,#0x2ee0
0003b4  480c              LDR      r0,|L1.1000|
0003b6  f7fffffe          BL       TIM_SetCompare1
;;;400    
;;;401    	// FET_2A输出测试值
;;;402    	TIM_SetCompare1(TIM11, 12000);	   //FET_2A	
0003ba  f64261e0          MOV      r1,#0x2ee0
0003be  480b              LDR      r0,|L1.1004|
0003c0  f7fffffe          BL       TIM_SetCompare1
;;;403    } 
0003c4  b009              ADD      sp,sp,#0x24
0003c6  bd00              POP      {pc}
;;;404    
                          ENDP

                  |L1.968|
                          DCD      BSP_XLongPWM_GroupPara
                  |L1.972|
                          DCD      0x40000400
                  |L1.976|
                          DCD      0x40014000
                  |L1.980|
                          DCD      0x40001800
                  |L1.984|
                          DCD      0x40010000
                  |L1.988|
                          DCD      0x40000800
                  |L1.992|
                          DCD      0x40001c00
                  |L1.996|
                          DCD      0x40002000
                  |L1.1000|
                          DCD      0x40014400
                  |L1.1004|
                          DCD      0x40014800

                          AREA ||i.BSP_XLong_PWMRefresh||, CODE, READONLY, ALIGN=2

                  BSP_XLong_PWMRefresh PROC
;;;91     
;;;92     void   BSP_XLong_PWMRefresh(CPU_INT16U channel)
000000  b510              PUSH     {r4,lr}
;;;93     {
000002  4601              MOV      r1,r0
;;;94     
;;;95     	CPU_FP32    fTemp;
;;;96     	CPU_INT32S  sTemp;
;;;97     	
;;;98     	// PWM CH1  TIM3 CH3
;;;99     	if(channel & DEF_BIT_00) 
000004  f0010201          AND      r2,r1,#1
000008  2a00              CMP      r2,#0
00000a  d020              BEQ      |L2.78|
;;;100    	{
;;;101    		if(BSP_XLongPWM_MultiPara[5] == BSP_PWM_PosDir)   	// 正向
00000c  4a98              LDR      r2,|L2.624|
00000e  7952              LDRB     r2,[r2,#5]  ; BSP_XLongPWM_MultiPara
000010  2a00              CMP      r2,#0
000012  d17d              BNE      |L2.272|
;;;102    		{	
;;;103               if(BSP_XLongPWM_MultiPara[4] == BSP_PWM_BiDir) 	// 双极性
000014  4a96              LDR      r2,|L2.624|
000016  7912              LDRB     r2,[r2,#4]  ; BSP_XLongPWM_MultiPara
000018  bbf2              CBNZ     r2,|L2.152|
;;;104    		   {
;;;105    		       if((BSP_XLongPWM_ChValue[0]<-1)||(BSP_XLongPWM_ChValue[0]>1))
00001a  4a96              LDR      r2,|L2.628|
00001c  edd20a00          VLDR     s1,[r2,#0]
000020  eebf1a00          VMOV.F32 s2,#-1.00000000
000024  eef40ac1          VCMPE.F32 s1,s2
000028  eef1fa10          VMRS     APSR_nzcv,FPSCR
00002c  d308              BCC      |L2.64|
00002e  edd20a00          VLDR     s1,[r2,#0]
000032  eeb71a00          VMOV.F32 s2,#1.00000000
000036  eef40ac1          VCMPE.F32 s1,s2
00003a  eef1fa10          VMRS     APSR_nzcv,FPSCR
00003e  dd07              BLE      |L2.80|
                  |L2.64|
;;;106    				   TIM3->CCR3 = BSP_XLongPWM_MultiPara[3]*BSP_XLongPWM_GroupPara[2];  // 输出安全值
000040  4a8b              LDR      r2,|L2.624|
000042  78d2              LDRB     r2,[r2,#3]  ; BSP_XLongPWM_MultiPara
000044  4b8c              LDR      r3,|L2.632|
000046  889b              LDRH     r3,[r3,#4]  ; BSP_XLongPWM_GroupPara
000048  435a              MULS     r2,r3,r2
00004a  4b8c              LDR      r3,|L2.636|
00004c  601a              STR      r2,[r3,#0]
                  |L2.78|
00004e  e10e              B        |L2.622|
                  |L2.80|
;;;107    			   else
;;;108    			   {
;;;109    				   sTemp = (BSP_XLongPWM_MultiPara[2] - BSP_XLongPWM_MultiPara[0]) / 2; // 计算操作范围
000050  4b87              LDR      r3,|L2.624|
000052  789b              LDRB     r3,[r3,#2]  ; BSP_XLongPWM_MultiPara
000054  4c86              LDR      r4,|L2.624|
000056  7824              LDRB     r4,[r4,#0]  ; BSP_XLongPWM_MultiPara
000058  1b1a              SUBS     r2,r3,r4
00005a  eb0273d2          ADD      r3,r2,r2,LSR #31
00005e  1058              ASRS     r0,r3,#1
;;;110    				   fTemp = (CPU_FP32)sTemp;
000060  ee000a90          VMOV     s1,r0
000064  eef80ae0          VCVT.F32.S32 s1,s1
000068  eeb00a60          VMOV.F32 s0,s1
;;;111    				   fTemp = fTemp* BSP_XLongPWM_ChValue[0];                 // 计算输出量
00006c  4a81              LDR      r2,|L2.628|
00006e  edd20a00          VLDR     s1,[r2,#0]
000072  ee600a80          VMUL.F32 s1,s1,s0
000076  eeb00a60          VMOV.F32 s0,s1
;;;112    				   
;;;113    				   fTemp = fTemp + (CPU_FP32)BSP_XLongPWM_MultiPara[1];    // 以中间值为基准       
00007a  4a7d              LDR      r2,|L2.624|
00007c  7852              LDRB     r2,[r2,#1]  ; BSP_XLongPWM_MultiPara
00007e  ee002a90          VMOV     s1,r2
000082  eef80a60          VCVT.F32.U32 s1,s1
000086  ee700a80          VADD.F32 s1,s1,s0
00008a  eeb00a60          VMOV.F32 s0,s1
;;;114    				   fTemp = fTemp* BSP_XLongPWM_GroupPara[2];               // 乘以倍率    
00008e  4a7a              LDR      r2,|L2.632|
000090  8892              LDRH     r2,[r2,#4]  ; BSP_XLongPWM_GroupPara
000092  ee002a90          VMOV     s1,r2
000096  e000              B        |L2.154|
                  |L2.152|
000098  e00c              B        |L2.180|
                  |L2.154|
00009a  eef80a60          VCVT.F32.U32 s1,s1
00009e  ee600a80          VMUL.F32 s1,s1,s0
0000a2  eeb00a60          VMOV.F32 s0,s1
;;;115    				   
;;;116    				   TIM3->CCR3 = (CPU_INT32U)fTemp;                         // 输出
0000a6  eefc0ac0          VCVT.U32.F32 s1,s0
0000aa  ee102a90          VMOV     r2,s1
0000ae  4b73              LDR      r3,|L2.636|
0000b0  601a              STR      r2,[r3,#0]
0000b2  e0dc              B        |L2.622|
                  |L2.180|
;;;117    			   }
;;;118    		    }
;;;119               else                                             // 单极性
;;;120               { 
;;;121    			   if((BSP_XLongPWM_ChValue[0]<0)||(BSP_XLongPWM_ChValue[0]>1))	  
0000b4  4a6f              LDR      r2,|L2.628|
0000b6  edd20a00          VLDR     s1,[r2,#0]
0000ba  eef50ac0          VCMPE.F32 s1,#0.0
0000be  eef1fa10          VMRS     APSR_nzcv,FPSCR
0000c2  d308              BCC      |L2.214|
0000c4  edd20a00          VLDR     s1,[r2,#0]
0000c8  eeb71a00          VMOV.F32 s2,#1.00000000
0000cc  eef40ac1          VCMPE.F32 s1,s2
0000d0  eef1fa10          VMRS     APSR_nzcv,FPSCR
0000d4  dd07              BLE      |L2.230|
                  |L2.214|
;;;122    				   TIM3->CCR3 = BSP_XLongPWM_MultiPara[3]*BSP_XLongPWM_GroupPara[2];  // 输出安全值
0000d6  4a66              LDR      r2,|L2.624|
0000d8  78d2              LDRB     r2,[r2,#3]  ; BSP_XLongPWM_MultiPara
0000da  4b67              LDR      r3,|L2.632|
0000dc  889b              LDRH     r3,[r3,#4]  ; BSP_XLongPWM_GroupPara
0000de  435a              MULS     r2,r3,r2
0000e0  4b66              LDR      r3,|L2.636|
0000e2  601a              STR      r2,[r3,#0]
0000e4  e0c3              B        |L2.622|
                  |L2.230|
;;;123                   else	
;;;124    			   {				   
;;;125    				   sTemp =  BSP_XLongPWM_MultiPara[2] - BSP_XLongPWM_MultiPara[0];  // 计算操作范围
0000e6  4a62              LDR      r2,|L2.624|
0000e8  7892              LDRB     r2,[r2,#2]  ; BSP_XLongPWM_MultiPara
0000ea  4b61              LDR      r3,|L2.624|
0000ec  781b              LDRB     r3,[r3,#0]  ; BSP_XLongPWM_MultiPara
0000ee  1ad0              SUBS     r0,r2,r3
;;;126    				   fTemp = (CPU_FP32)sTemp;
0000f0  ee000a90          VMOV     s1,r0
0000f4  eef80ae0          VCVT.F32.S32 s1,s1
0000f8  eeb00a60          VMOV.F32 s0,s1
;;;127    				   fTemp = fTemp* BSP_XLongPWM_ChValue[0];                 // 计算输出量
0000fc  4a5d              LDR      r2,|L2.628|
0000fe  edd20a00          VLDR     s1,[r2,#0]
000102  ee600a80          VMUL.F32 s1,s1,s0
000106  eeb00a60          VMOV.F32 s0,s1
;;;128    				   
;;;129    				   fTemp = fTemp + (CPU_FP32)BSP_XLongPWM_MultiPara[0];    // 以最小值为基准 
00010a  4a59              LDR      r2,|L2.624|
00010c  7812              LDRB     r2,[r2,#0]  ; BSP_XLongPWM_MultiPara
00010e  e000              B        |L2.274|
                  |L2.272|
000110  e018              B        |L2.324|
                  |L2.274|
000112  ee002a90          VMOV     s1,r2
000116  eef80a60          VCVT.F32.U32 s1,s1
00011a  ee700a80          VADD.F32 s1,s1,s0
00011e  eeb00a60          VMOV.F32 s0,s1
;;;130    				   fTemp = fTemp* BSP_XLongPWM_GroupPara[2];               // 乘以倍率
000122  4a55              LDR      r2,|L2.632|
000124  8892              LDRH     r2,[r2,#4]  ; BSP_XLongPWM_GroupPara
000126  ee002a90          VMOV     s1,r2
00012a  eef80a60          VCVT.F32.U32 s1,s1
00012e  ee600a80          VMUL.F32 s1,s1,s0
000132  eeb00a60          VMOV.F32 s0,s1
;;;131    				   
;;;132    				   TIM3->CCR3 = (CPU_INT32U)fTemp;			               // 输出
000136  eefc0ac0          VCVT.U32.F32 s1,s0
00013a  ee102a90          VMOV     r2,s1
00013e  4b4f              LDR      r3,|L2.636|
000140  601a              STR      r2,[r3,#0]
000142  e094              B        |L2.622|
                  |L2.324|
;;;133    			   }
;;;134                }	
;;;135    		}
;;;136    		else                                                // 负向
;;;137    		{
;;;138               if(BSP_XLongPWM_MultiPara[4] == BSP_PWM_BiDir) 	// 双极性
000144  4a4a              LDR      r2,|L2.624|
000146  7912              LDRB     r2,[r2,#4]  ; BSP_XLongPWM_MultiPara
000148  bbf2              CBNZ     r2,|L2.456|
;;;139    		   {
;;;140    		       if((BSP_XLongPWM_ChValue[0]<-1)||(BSP_XLongPWM_ChValue[0]>1))
00014a  4a4a              LDR      r2,|L2.628|
00014c  edd20a00          VLDR     s1,[r2,#0]
000150  eebf1a00          VMOV.F32 s2,#-1.00000000
000154  eef40ac1          VCMPE.F32 s1,s2
000158  eef1fa10          VMRS     APSR_nzcv,FPSCR
00015c  d308              BCC      |L2.368|
00015e  edd20a00          VLDR     s1,[r2,#0]
000162  eeb71a00          VMOV.F32 s2,#1.00000000
000166  eef40ac1          VCMPE.F32 s1,s2
00016a  eef1fa10          VMRS     APSR_nzcv,FPSCR
00016e  dd07              BLE      |L2.384|
                  |L2.368|
;;;141    				   TIM3->CCR3 = BSP_XLongPWM_MultiPara[3]*BSP_XLongPWM_GroupPara[2];  // 输出安全值
000170  4a3f              LDR      r2,|L2.624|
000172  78d2              LDRB     r2,[r2,#3]  ; BSP_XLongPWM_MultiPara
000174  4b40              LDR      r3,|L2.632|
000176  889b              LDRH     r3,[r3,#4]  ; BSP_XLongPWM_GroupPara
000178  435a              MULS     r2,r3,r2
00017a  4b40              LDR      r3,|L2.636|
00017c  601a              STR      r2,[r3,#0]
00017e  e076              B        |L2.622|
                  |L2.384|
;;;142    			   else
;;;143    			   {
;;;144    				   sTemp = (BSP_XLongPWM_MultiPara[0] - BSP_XLongPWM_MultiPara[2]) / 2; // 计算操作范围
000180  4b3b              LDR      r3,|L2.624|
000182  781b              LDRB     r3,[r3,#0]  ; BSP_XLongPWM_MultiPara
000184  4c3a              LDR      r4,|L2.624|
000186  78a4              LDRB     r4,[r4,#2]  ; BSP_XLongPWM_MultiPara
000188  1b1a              SUBS     r2,r3,r4
00018a  eb0273d2          ADD      r3,r2,r2,LSR #31
00018e  1058              ASRS     r0,r3,#1
;;;145    				   fTemp = (CPU_FP32)sTemp;
000190  ee000a90          VMOV     s1,r0
000194  eef80ae0          VCVT.F32.S32 s1,s1
000198  eeb00a60          VMOV.F32 s0,s1
;;;146    				   fTemp = fTemp* BSP_XLongPWM_ChValue[0];                 // 计算输出量
00019c  4a35              LDR      r2,|L2.628|
00019e  edd20a00          VLDR     s1,[r2,#0]
0001a2  ee600a80          VMUL.F32 s1,s1,s0
0001a6  eeb00a60          VMOV.F32 s0,s1
;;;147    				   
;;;148    				   fTemp = fTemp + (CPU_FP32)BSP_XLongPWM_MultiPara[1];    // 以中间值为基准       
0001aa  4a31              LDR      r2,|L2.624|
0001ac  7852              LDRB     r2,[r2,#1]  ; BSP_XLongPWM_MultiPara
0001ae  ee002a90          VMOV     s1,r2
0001b2  eef80a60          VCVT.F32.U32 s1,s1
0001b6  ee700a80          VADD.F32 s1,s1,s0
0001ba  eeb00a60          VMOV.F32 s0,s1
;;;149    				   fTemp = fTemp* BSP_XLongPWM_GroupPara[2];               // 乘以倍率    
0001be  4a2e              LDR      r2,|L2.632|
0001c0  8892              LDRH     r2,[r2,#4]  ; BSP_XLongPWM_GroupPara
0001c2  ee002a90          VMOV     s1,r2
0001c6  e000              B        |L2.458|
                  |L2.456|
0001c8  e00c              B        |L2.484|
                  |L2.458|
0001ca  eef80a60          VCVT.F32.U32 s1,s1
0001ce  ee600a80          VMUL.F32 s1,s1,s0
0001d2  eeb00a60          VMOV.F32 s0,s1
;;;150    				   
;;;151    				   TIM3->CCR3 = (CPU_INT32U)fTemp;                         // 输出
0001d6  eefc0ac0          VCVT.U32.F32 s1,s0
0001da  ee102a90          VMOV     r2,s1
0001de  4b27              LDR      r3,|L2.636|
0001e0  601a              STR      r2,[r3,#0]
0001e2  e044              B        |L2.622|
                  |L2.484|
;;;152    			   }
;;;153    		    }
;;;154               else                                             // 单极性
;;;155               { 
;;;156    			   if((BSP_XLongPWM_ChValue[0]<0)||(BSP_XLongPWM_ChValue[0]>1))	  
0001e4  4a23              LDR      r2,|L2.628|
0001e6  edd20a00          VLDR     s1,[r2,#0]
0001ea  eef50ac0          VCMPE.F32 s1,#0.0
0001ee  eef1fa10          VMRS     APSR_nzcv,FPSCR
0001f2  d308              BCC      |L2.518|
0001f4  edd20a00          VLDR     s1,[r2,#0]
0001f8  eeb71a00          VMOV.F32 s2,#1.00000000
0001fc  eef40ac1          VCMPE.F32 s1,s2
000200  eef1fa10          VMRS     APSR_nzcv,FPSCR
000204  dd07              BLE      |L2.534|
                  |L2.518|
;;;157    				   TIM3->CCR3 = BSP_XLongPWM_MultiPara[3]*BSP_XLongPWM_GroupPara[2];  // 输出安全值
000206  4a1a              LDR      r2,|L2.624|
000208  78d2              LDRB     r2,[r2,#3]  ; BSP_XLongPWM_MultiPara
00020a  4b1b              LDR      r3,|L2.632|
00020c  889b              LDRH     r3,[r3,#4]  ; BSP_XLongPWM_GroupPara
00020e  435a              MULS     r2,r3,r2
000210  4b1a              LDR      r3,|L2.636|
000212  601a              STR      r2,[r3,#0]
000214  e02b              B        |L2.622|
                  |L2.534|
;;;158                   else	
;;;159    			   {				   
;;;160    				   sTemp =  BSP_XLongPWM_MultiPara[0] - BSP_XLongPWM_MultiPara[2];  // 计算操作范围
000216  4a16              LDR      r2,|L2.624|
000218  7812              LDRB     r2,[r2,#0]  ; BSP_XLongPWM_MultiPara
00021a  4b15              LDR      r3,|L2.624|
00021c  789b              LDRB     r3,[r3,#2]  ; BSP_XLongPWM_MultiPara
00021e  1ad0              SUBS     r0,r2,r3
;;;161    				   fTemp = (CPU_FP32)sTemp;
000220  ee000a90          VMOV     s1,r0
000224  eef80ae0          VCVT.F32.S32 s1,s1
000228  eeb00a60          VMOV.F32 s0,s1
;;;162    				   fTemp = fTemp* BSP_XLongPWM_ChValue[0];                 // 计算输出量
00022c  4a11              LDR      r2,|L2.628|
00022e  edd20a00          VLDR     s1,[r2,#0]
000232  ee600a80          VMUL.F32 s1,s1,s0
000236  eeb00a60          VMOV.F32 s0,s1
;;;163    				   
;;;164    				   fTemp = fTemp + (CPU_FP32)BSP_XLongPWM_MultiPara[2];    // 以最小值为基准 
00023a  4a0d              LDR      r2,|L2.624|
00023c  7892              LDRB     r2,[r2,#2]  ; BSP_XLongPWM_MultiPara
00023e  ee002a90          VMOV     s1,r2
000242  eef80a60          VCVT.F32.U32 s1,s1
000246  ee700a80          VADD.F32 s1,s1,s0
00024a  eeb00a60          VMOV.F32 s0,s1
;;;165    				   fTemp = fTemp* BSP_XLongPWM_GroupPara[2];               // 乘以倍率
00024e  4a0a              LDR      r2,|L2.632|
000250  8892              LDRH     r2,[r2,#4]  ; BSP_XLongPWM_GroupPara
000252  ee002a90          VMOV     s1,r2
000256  eef80a60          VCVT.F32.U32 s1,s1
00025a  ee600a80          VMUL.F32 s1,s1,s0
00025e  eeb00a60          VMOV.F32 s0,s1
;;;166    				   
;;;167    				   TIM3->CCR3 = (CPU_INT32U)fTemp;			               // 输出
000262  eefc0ac0          VCVT.U32.F32 s1,s0
000266  ee102a90          VMOV     r2,s1
00026a  4b04              LDR      r3,|L2.636|
00026c  601a              STR      r2,[r3,#0]
                  |L2.622|
;;;168    			   }
;;;169                }
;;;170    	     }
;;;171          }
;;;172    }
00026e  bd10              POP      {r4,pc}
;;;173    
                          ENDP

                  |L2.624|
                          DCD      BSP_XLongPWM_MultiPara
                  |L2.628|
                          DCD      BSP_XLongPWM_ChValue
                  |L2.632|
                          DCD      BSP_XLongPWM_GroupPara
                  |L2.636|
                          DCD      0x4000043c

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  BSP_XLongPWM_ChValue
                          %        64

                          AREA ||.data||, DATA, ALIGN=1

                  BSP_XLongPWM_GroupPara
000000  0037ea60          DCW      0x0037,0xea60
000004  012c0037          DCW      0x012c,0x0037
000008  ea60012c          DCW      0xea60,0x012c
00000c  0037ea60          DCW      0x0037,0xea60
000010  012c0006          DCW      0x012c,0x0006
000014  ea600960          DCW      0xea60,0x0960
000018  0006ea60          DCW      0x0006,0xea60
00001c  0960008b          DCW      0x0960,0x008b
000020  ea600078          DCW      0xea60,0x0078
000024  008bea60          DCW      0x008b,0xea60
000028  0078001b          DCW      0x0078,0x001b
00002c  ea600258          DCW      0xea60,0x0258
000030  001bea60          DCW      0x001b,0xea60
000034  0258              DCW      0x0258
                  BSP_XLongPWM_MultiPara
000036  050f              DCB      0x05,0x0f
000038  190f0000          DCB      0x19,0x0f,0x00,0x00
00003c  050f190f          DCB      0x05,0x0f,0x19,0x0f
000040  00000a0f          DCB      0x00,0x00,0x0a,0x0f
000044  14090100          DCB      0x14,0x09,0x01,0x00
000048  0a0f1409          DCB      0x0a,0x0f,0x14,0x09
00004c  01000a0f          DCB      0x01,0x00,0x0a,0x0f
000050  14090100          DCB      0x14,0x09,0x01,0x00
000054  0a0f1409          DCB      0x0a,0x0f,0x14,0x09
000058  01000a0f          DCB      0x01,0x00,0x0a,0x0f
00005c  14090100          DCB      0x14,0x09,0x01,0x00
000060  0a0f1409          DCB      0x0a,0x0f,0x14,0x09
000064  01000a0f          DCB      0x01,0x00,0x0a,0x0f
000068  14090100          DCB      0x14,0x09,0x01,0x00
00006c  0a0f1409          DCB      0x0a,0x0f,0x14,0x09
000070  0100050f          DCB      0x01,0x00,0x05,0x0f
000074  190f0000          DCB      0x19,0x0f,0x00,0x00
000078  050f190f          DCB      0x05,0x0f,0x19,0x0f
00007c  0000050f          DCB      0x00,0x00,0x05,0x0f
000080  190f0000          DCB      0x19,0x0f,0x00,0x00
000084  050f190f          DCB      0x05,0x0f,0x19,0x0f
000088  0000050f          DCB      0x00,0x00,0x05,0x0f
00008c  190f0000          DCB      0x19,0x0f,0x00,0x00
000090  050f190f          DCB      0x05,0x0f,0x19,0x0f
000094  0000              DCB      0x00,0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\BSP\\XLong\\src\\PWM.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_PWM_c_c05b80d7____REV16|
#line 388 "..\\..\\..\\CMSIS\\4.5.0\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___5_PWM_c_c05b80d7____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_PWM_c_c05b80d7____REVSH|
#line 402
|__asm___5_PWM_c_c05b80d7____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___5_PWM_c_c05b80d7____RRX|
#line 587
|__asm___5_PWM_c_c05b80d7____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
