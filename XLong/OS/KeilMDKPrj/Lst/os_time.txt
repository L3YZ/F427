; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\os_time.o --asm_dir=.\Lst\ --list_dir=.\Lst\ --depend=.\obj\os_time.d --cpu=Cortex-M4.fp --apcs=interwork -O0 -I..\..\..\CMSIS\4.5.0\CMSIS\Include -I..\APP -I..\APP\ST -I..\APP\uCOS -I..\..\BSP\KeilMDK -I..\..\BSP\Board\inc -I..\..\BSP\STM32F4xx\inc -I..\..\BSP\Xlong\inc -I..\..\..\uCOS\uC-CPU -I..\..\..\uCOS\uC-CPU\Ports\ARM-Cortex-M4 -I..\..\..\uCOS\uC-LIB -I..\..\..\uCOS\uC-LIB\Ports\ARM-Cortex-M4 -I..\..\..\uCOS\uCOS-III\Source -I..\..\..\uCOS\uCOS-III\Ports\ARM-Cortex-M4 -IC:\Users\V200\Desktop\XLong\XLong\OS\KeilMDKPrj\RTE -Id:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\1.0.8\Device\Include -Id:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -DSTM32F427_437xx -DSTM32F427_437xx -DUSE_STDPERIPH_DRIVER --omf_browse=.\obj\os_time.crf ..\..\..\uCOS\uCOS-III\Source\os_time.c]
                          THUMB

                          AREA ||i.OSTimeDly||, CODE, READONLY, ALIGN=2

                  OSTimeDly PROC
;;;81     
;;;82     void  OSTimeDly (OS_TICK   dly,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;83                      OS_OPT    opt,
;;;84                      OS_ERR   *p_err)
;;;85     {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;86         CPU_SR_ALLOC();
00000a  2700              MOVS     r7,#0
;;;87     
;;;88     
;;;89     
;;;90     #ifdef OS_SAFETY_CRITICAL
;;;91         if (p_err == (OS_ERR *)0) {
;;;92             OS_SAFETY_CRITICAL_EXCEPTION();
;;;93             return;
;;;94         }
;;;95     #endif
;;;96     
;;;97     #if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
;;;98         if (OSIntNestingCtr > (OS_NESTING_CTR)0u) {             /* Not allowed to call from an ISR                        */
;;;99            *p_err = OS_ERR_TIME_DLY_ISR;
;;;100            return;
;;;101        }
;;;102    #endif
;;;103    
;;;104        if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0u) {       /* Can't delay when the scheduler is locked               */
00000c  4823              LDR      r0,|L1.156|
00000e  7800              LDRB     r0,[r0,#0]  ; OSSchedLockNestingCtr
000010  2800              CMP      r0,#0
000012  dd04              BLE      |L1.30|
;;;105           *p_err = OS_ERR_SCHED_LOCKED;
000014  f6465063          MOV      r0,#0x6d63
000018  8020              STRH     r0,[r4,#0]
                  |L1.26|
;;;106            return;
;;;107        }
;;;108    
;;;109        switch (opt) {
;;;110            case OS_OPT_TIME_DLY:
;;;111            case OS_OPT_TIME_TIMEOUT:
;;;112            case OS_OPT_TIME_PERIODIC:
;;;113                 if (dly == (OS_TICK)0u) {                      /* 0 means no delay!                                      */
;;;114                    *p_err = OS_ERR_TIME_ZERO_DLY;
;;;115                     return;
;;;116                 }
;;;117                 break;
;;;118    
;;;119            case OS_OPT_TIME_MATCH:
;;;120                 break;
;;;121    
;;;122            default:
;;;123                *p_err = OS_ERR_OPT_INVALID;
;;;124                 return;
;;;125        }
;;;126    
;;;127        OS_CRITICAL_ENTER();
;;;128        OS_TickListInsertDly(OSTCBCurPtr,
;;;129                             dly,
;;;130                             opt,
;;;131                             p_err);
;;;132        if (*p_err != OS_ERR_NONE) {
;;;133             OS_CRITICAL_EXIT_NO_SCHED();
;;;134             return;
;;;135        }
;;;136    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
;;;137        TRACE_OS_TASK_DLY(dly);                                 /* Record the event.                                      */
;;;138    #endif
;;;139        OS_RdyListRemove(OSTCBCurPtr);                          /* Remove current task from ready list                    */
;;;140        OS_CRITICAL_EXIT_NO_SCHED();
;;;141        OSSched();                                              /* Find next task to run!                                 */
;;;142       *p_err = OS_ERR_NONE;
;;;143    }
00001a  e8bd81f0          POP      {r4-r8,pc}
                  |L1.30|
00001e  b136              CBZ      r6,|L1.46|
000020  2e02              CMP      r6,#2                 ;109
000022  d005              BEQ      |L1.48|
000024  2e04              CMP      r6,#4                 ;109
000026  d00a              BEQ      |L1.62|
000028  2e08              CMP      r6,#8                 ;109
00002a  d109              BNE      |L1.64|
00002c  e001              B        |L1.50|
                  |L1.46|
00002e  bf00              NOP                            ;111
                  |L1.48|
000030  bf00              NOP                            ;112
                  |L1.50|
000032  b91d              CBNZ     r5,|L1.60|
000034  f247207e          MOV      r0,#0x727e            ;114
000038  8020              STRH     r0,[r4,#0]            ;114
00003a  e7ee              B        |L1.26|
                  |L1.60|
00003c  e004              B        |L1.72|
                  |L1.62|
00003e  e003              B        |L1.72|
                  |L1.64|
000040  f6456025          MOV      r0,#0x5e25            ;123
000044  8020              STRH     r0,[r4,#0]            ;123
000046  e7e8              B        |L1.26|
                  |L1.72|
000048  bf00              NOP                            ;117
00004a  bf00              NOP                            ;127
00004c  bf00              NOP                            ;127
00004e  f7fffffe          BL       CPU_SR_Save
000052  4607              MOV      r7,r0                 ;127
000054  bf00              NOP                            ;127
000056  bf00              NOP                            ;127
000058  4623              MOV      r3,r4                 ;128
00005a  4632              MOV      r2,r6                 ;128
00005c  4629              MOV      r1,r5                 ;128
00005e  4810              LDR      r0,|L1.160|
000060  6800              LDR      r0,[r0,#0]            ;128  ; OSTCBCurPtr
000062  f7fffffe          BL       OS_TickListInsertDly
000066  8820              LDRH     r0,[r4,#0]            ;132
000068  b138              CBZ      r0,|L1.122|
00006a  bf00              NOP                            ;133
00006c  bf00              NOP                            ;133
00006e  4638              MOV      r0,r7                 ;133
000070  f7fffffe          BL       CPU_SR_Restore
000074  bf00              NOP                            ;133
000076  bf00              NOP                            ;133
000078  e7cf              B        |L1.26|
                  |L1.122|
00007a  4809              LDR      r0,|L1.160|
00007c  6800              LDR      r0,[r0,#0]            ;139  ; OSTCBCurPtr
00007e  f7fffffe          BL       OS_RdyListRemove
000082  bf00              NOP                            ;140
000084  bf00              NOP                            ;140
000086  4638              MOV      r0,r7                 ;140
000088  f7fffffe          BL       CPU_SR_Restore
00008c  bf00              NOP                            ;140
00008e  bf00              NOP                            ;140
000090  f7fffffe          BL       OSSched
000094  2000              MOVS     r0,#0                 ;142
000096  8020              STRH     r0,[r4,#0]            ;142
000098  bf00              NOP      
00009a  e7be              B        |L1.26|
;;;144    
                          ENDP

                  |L1.156|
                          DCD      OSSchedLockNestingCtr
                  |L1.160|
                          DCD      OSTCBCurPtr

                          AREA ||i.OSTimeDlyHMSM||, CODE, READONLY, ALIGN=2

                  OSTimeDlyHMSM PROC
;;;203    #if OS_CFG_TIME_DLY_HMSM_EN > 0u
;;;204    void  OSTimeDlyHMSM (CPU_INT16U   hours,
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;205                         CPU_INT16U   minutes,
;;;206                         CPU_INT16U   seconds,
;;;207                         CPU_INT32U   milli,
;;;208                         OS_OPT       opt,
;;;209                         OS_ERR      *p_err)
;;;210    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
00000a  4698              MOV      r8,r3
00000c  e9dda40e          LDRD     r10,r4,[sp,#0x38]
;;;211    #if OS_CFG_ARG_CHK_EN > 0u
;;;212        CPU_BOOLEAN  opt_invalid;
;;;213        CPU_BOOLEAN  opt_non_strict;
;;;214    #endif
;;;215        OS_OPT       opt_time;
;;;216        OS_RATE_HZ   tick_rate;
;;;217        OS_TICK      ticks;
;;;218        CPU_SR_ALLOC();
000010  2000              MOVS     r0,#0
000012  9000              STR      r0,[sp,#0]
;;;219    
;;;220    
;;;221    
;;;222    #ifdef OS_SAFETY_CRITICAL
;;;223        if (p_err == (OS_ERR *)0) {
;;;224            OS_SAFETY_CRITICAL_EXCEPTION();
;;;225            return;
;;;226        }
;;;227    #endif
;;;228    
;;;229    #if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
;;;230        if (OSIntNestingCtr > (OS_NESTING_CTR)0u) {             /* Not allowed to call from an ISR                        */
;;;231           *p_err = OS_ERR_TIME_DLY_ISR;
;;;232            return;
;;;233        }
;;;234    #endif
;;;235    
;;;236        if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0u) {       /* Can't delay when the scheduler is locked               */
000014  485a              LDR      r0,|L2.384|
000016  7800              LDRB     r0,[r0,#0]  ; OSSchedLockNestingCtr
000018  2800              CMP      r0,#0
00001a  dd04              BLE      |L2.38|
;;;237           *p_err = OS_ERR_SCHED_LOCKED;
00001c  f6465063          MOV      r0,#0x6d63
000020  8020              STRH     r0,[r4,#0]
                  |L2.34|
;;;238            return;
;;;239        }
;;;240    
;;;241        opt_time = opt & OS_OPT_TIME_MASK;                      /* Retrieve time options only.                            */
;;;242        switch (opt_time) {
;;;243            case OS_OPT_TIME_DLY:
;;;244            case OS_OPT_TIME_TIMEOUT:
;;;245            case OS_OPT_TIME_PERIODIC:
;;;246                 if (milli == (CPU_INT32U)0u) {                 /* Make sure we didn't specify a 0 delay                  */
;;;247                     if (seconds == (CPU_INT16U)0u) {
;;;248                         if (minutes == (CPU_INT16U)0u) {
;;;249                             if (hours == (CPU_INT16U)0u) {
;;;250                                *p_err = OS_ERR_TIME_ZERO_DLY;
;;;251                                 return;
;;;252                             }
;;;253                         }
;;;254                     }
;;;255                 }
;;;256                 break;
;;;257    
;;;258            case OS_OPT_TIME_MATCH:
;;;259                 break;
;;;260    
;;;261            default:
;;;262                *p_err = OS_ERR_OPT_INVALID;
;;;263                 return;
;;;264        }
;;;265    
;;;266    #if OS_CFG_ARG_CHK_EN > 0u                                  /* Validate arguments to be within range                  */
;;;267        opt_invalid = DEF_BIT_IS_SET_ANY(opt, ~OS_OPT_TIME_OPTS_MASK);
;;;268        if (opt_invalid == DEF_YES) {
;;;269           *p_err = OS_ERR_OPT_INVALID;
;;;270            return;
;;;271        }
;;;272    
;;;273        opt_non_strict = DEF_BIT_IS_SET(opt, OS_OPT_TIME_HMSM_NON_STRICT);
;;;274        if (opt_non_strict != DEF_YES) {
;;;275             if (milli   > (CPU_INT32U)999u) {
;;;276                *p_err = OS_ERR_TIME_INVALID_MILLISECONDS;
;;;277                 return;
;;;278             }
;;;279             if (seconds > (CPU_INT16U)59u) {
;;;280                *p_err = OS_ERR_TIME_INVALID_SECONDS;
;;;281                 return;
;;;282             }
;;;283             if (minutes > (CPU_INT16U)59u) {
;;;284                *p_err = OS_ERR_TIME_INVALID_MINUTES;
;;;285                 return;
;;;286             }
;;;287             if (hours   > (CPU_INT16U)99u) {
;;;288                *p_err = OS_ERR_TIME_INVALID_HOURS;
;;;289                 return;
;;;290             }
;;;291        } else {
;;;292             if (minutes > (CPU_INT16U)9999u) {
;;;293                *p_err = OS_ERR_TIME_INVALID_MINUTES;
;;;294                 return;
;;;295             }
;;;296             if (hours   > (CPU_INT16U)999u) {
;;;297                *p_err = OS_ERR_TIME_INVALID_HOURS;
;;;298                 return;
;;;299             }
;;;300        }
;;;301    #endif
;;;302    
;;;303                                                                /* Compute the total number of clock ticks required..     */
;;;304                                                                /* .. (rounded to the nearest tick)                       */
;;;305        tick_rate = OSCfg_TickRate_Hz;
;;;306        ticks     = ((OS_TICK)hours * (OS_TICK)3600u + (OS_TICK)minutes * (OS_TICK)60u + (OS_TICK)seconds) * tick_rate
;;;307                  + (tick_rate * ((OS_TICK)milli + (OS_TICK)500u / tick_rate)) / (OS_TICK)1000u;
;;;308    
;;;309        if (ticks > (OS_TICK)0u) {
;;;310            OS_CRITICAL_ENTER();
;;;311            OS_TickListInsertDly(OSTCBCurPtr,
;;;312                                 ticks,
;;;313                                 opt_time,
;;;314                                 p_err);
;;;315            if (*p_err != OS_ERR_NONE) {
;;;316                 OS_CRITICAL_EXIT_NO_SCHED();
;;;317                 return;
;;;318            }
;;;319    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
;;;320            TRACE_OS_TASK_DLY(ticks);                           /* Record the event.                                      */
;;;321    #endif
;;;322            OS_RdyListRemove(OSTCBCurPtr);                      /* Remove current task from ready list                    */
;;;323            OS_CRITICAL_EXIT_NO_SCHED();
;;;324            OSSched();                                          /* Find next task to run!                                 */
;;;325           *p_err = OS_ERR_NONE;
;;;326        } else {
;;;327           *p_err = OS_ERR_TIME_ZERO_DLY;
;;;328        }
;;;329    }
000022  e8bd9fff          POP      {r0-r12,pc}
                  |L2.38|
000026  f00a0b0e          AND      r11,r10,#0xe          ;241
00002a  f1bb0f00          CMP      r11,#0                ;242
00002e  d009              BEQ      |L2.68|
000030  f1bb0f02          CMP      r11,#2                ;242
000034  d007              BEQ      |L2.70|
000036  f1bb0f04          CMP      r11,#4                ;242
00003a  d010              BEQ      |L2.94|
00003c  f1bb0f08          CMP      r11,#8                ;242
000040  d10e              BNE      |L2.96|
000042  e001              B        |L2.72|
                  |L2.68|
000044  bf00              NOP                            ;244
                  |L2.70|
000046  bf00              NOP                            ;245
                  |L2.72|
000048  f1b80f00          CMP      r8,#0                 ;246
00004c  d106              BNE      |L2.92|
00004e  b92f              CBNZ     r7,|L2.92|
000050  b926              CBNZ     r6,|L2.92|
000052  b91d              CBNZ     r5,|L2.92|
000054  f247207e          MOV      r0,#0x727e            ;250
000058  8020              STRH     r0,[r4,#0]            ;250
00005a  e7e2              B        |L2.34|
                  |L2.92|
00005c  e004              B        |L2.104|
                  |L2.94|
00005e  e003              B        |L2.104|
                  |L2.96|
000060  f6456025          MOV      r0,#0x5e25            ;262
000064  8020              STRH     r0,[r4,#0]            ;262
000066  e7dc              B        |L2.34|
                  |L2.104|
000068  bf00              NOP                            ;256
00006a  f02a001e          BIC      r0,r10,#0x1e          ;267
00006e  b108              CBZ      r0,|L2.116|
000070  2001              MOVS     r0,#1                 ;267
000072  e000              B        |L2.118|
                  |L2.116|
000074  2000              MOVS     r0,#0                 ;267
                  |L2.118|
000076  9003              STR      r0,[sp,#0xc]          ;267
000078  9803              LDR      r0,[sp,#0xc]          ;268
00007a  2801              CMP      r0,#1                 ;268
00007c  d103              BNE      |L2.134|
00007e  f6456025          MOV      r0,#0x5e25            ;269
000082  8020              STRH     r0,[r4,#0]            ;269
000084  e7cd              B        |L2.34|
                  |L2.134|
000086  f00a0010          AND      r0,r10,#0x10          ;273
00008a  2810              CMP      r0,#0x10              ;273
00008c  d102              BNE      |L2.148|
00008e  bf00              NOP                            ;273
000090  2001              MOVS     r0,#1                 ;273
000092  e000              B        |L2.150|
                  |L2.148|
000094  2000              MOVS     r0,#0                 ;273
                  |L2.150|
000096  9002              STR      r0,[sp,#8]            ;273
000098  9802              LDR      r0,[sp,#8]            ;274
00009a  2801              CMP      r0,#1                 ;274
00009c  d018              BEQ      |L2.208|
00009e  f5b87f7a          CMP      r8,#0x3e8             ;275
0000a2  d303              BCC      |L2.172|
0000a4  f247207b          MOV      r0,#0x727b            ;276
0000a8  8020              STRH     r0,[r4,#0]            ;276
0000aa  e7ba              B        |L2.34|
                  |L2.172|
0000ac  2f3b              CMP      r7,#0x3b              ;279
0000ae  dd03              BLE      |L2.184|
0000b0  f247207a          MOV      r0,#0x727a            ;280
0000b4  8020              STRH     r0,[r4,#0]            ;280
0000b6  e7b4              B        |L2.34|
                  |L2.184|
0000b8  2e3b              CMP      r6,#0x3b              ;283
0000ba  dd03              BLE      |L2.196|
0000bc  f2472079          MOV      r0,#0x7279            ;284
0000c0  8020              STRH     r0,[r4,#0]            ;284
0000c2  e7ae              B        |L2.34|
                  |L2.196|
0000c4  2d63              CMP      r5,#0x63              ;287
0000c6  dd12              BLE      |L2.238|
0000c8  f2472078          MOV      r0,#0x7278            ;288
0000cc  8020              STRH     r0,[r4,#0]            ;288
0000ce  e7a8              B        |L2.34|
                  |L2.208|
0000d0  f242700f          MOV      r0,#0x270f            ;292
0000d4  4286              CMP      r6,r0                 ;292
0000d6  dd03              BLE      |L2.224|
0000d8  f2472079          MOV      r0,#0x7279            ;293
0000dc  8020              STRH     r0,[r4,#0]            ;293
0000de  e7a0              B        |L2.34|
                  |L2.224|
0000e0  f5b57f7a          CMP      r5,#0x3e8             ;296
0000e4  db03              BLT      |L2.238|
0000e6  f2472078          MOV      r0,#0x7278            ;297
0000ea  8020              STRH     r0,[r4,#0]            ;297
0000ec  e799              B        |L2.34|
                  |L2.238|
0000ee  4825              LDR      r0,|L2.388|
0000f0  f8d09000          LDR      r9,[r0,#0]            ;305  ; OSCfg_TickRate_Hz
0000f4  f44f70fa          MOV      r0,#0x1f4             ;306
0000f8  fbb0f0f9          UDIV     r0,r0,r9              ;306
0000fc  4440              ADD      r0,r0,r8              ;306
0000fe  fb00f009          MUL      r0,r0,r9              ;306
000102  f44f717a          MOV      r1,#0x3e8             ;306
000106  fbb0f1f1          UDIV     r1,r0,r1              ;306
00010a  f44f6061          MOV      r0,#0xe10             ;306
00010e  4368              MULS     r0,r5,r0              ;306
000110  ebc61206          RSB      r2,r6,r6,LSL #4       ;306
000114  eb000082          ADD      r0,r0,r2,LSL #2       ;306
000118  4438              ADD      r0,r0,r7              ;306
00011a  fb001009          MLA      r0,r0,r9,r1           ;306
00011e  9001              STR      r0,[sp,#4]            ;306
000120  9801              LDR      r0,[sp,#4]            ;309
000122  b338              CBZ      r0,|L2.372|
000124  bf00              NOP                            ;310
000126  bf00              NOP                            ;310
000128  f7fffffe          BL       CPU_SR_Save
00012c  9000              STR      r0,[sp,#0]            ;310
00012e  bf00              NOP                            ;310
000130  bf00              NOP                            ;310
000132  4623              MOV      r3,r4                 ;311
000134  465a              MOV      r2,r11                ;311
000136  4814              LDR      r0,|L2.392|
000138  9901              LDR      r1,[sp,#4]            ;311
00013a  6800              LDR      r0,[r0,#0]            ;311  ; OSTCBCurPtr
00013c  f7fffffe          BL       OS_TickListInsertDly
000140  8820              LDRH     r0,[r4,#0]            ;315
000142  b138              CBZ      r0,|L2.340|
000144  bf00              NOP                            ;316
000146  bf00              NOP                            ;316
000148  9800              LDR      r0,[sp,#0]            ;316
00014a  f7fffffe          BL       CPU_SR_Restore
00014e  bf00              NOP                            ;316
000150  bf00              NOP                            ;316
000152  e766              B        |L2.34|
                  |L2.340|
000154  480c              LDR      r0,|L2.392|
000156  6800              LDR      r0,[r0,#0]            ;322  ; OSTCBCurPtr
000158  f7fffffe          BL       OS_RdyListRemove
00015c  bf00              NOP                            ;323
00015e  bf00              NOP                            ;323
000160  9800              LDR      r0,[sp,#0]            ;323
000162  f7fffffe          BL       CPU_SR_Restore
000166  bf00              NOP                            ;323
000168  bf00              NOP                            ;323
00016a  f7fffffe          BL       OSSched
00016e  2000              MOVS     r0,#0                 ;325
000170  8020              STRH     r0,[r4,#0]            ;325
000172  e002              B        |L2.378|
                  |L2.372|
000174  f247207e          MOV      r0,#0x727e            ;327
000178  8020              STRH     r0,[r4,#0]            ;327
                  |L2.378|
00017a  bf00              NOP      
00017c  e751              B        |L2.34|
;;;330    #endif
                          ENDP

00017e  0000              DCW      0x0000
                  |L2.384|
                          DCD      OSSchedLockNestingCtr
                  |L2.388|
                          DCD      OSCfg_TickRate_Hz
                  |L2.392|
                          DCD      OSTCBCurPtr

                          AREA ||i.OSTimeDlyResume||, CODE, READONLY, ALIGN=2

                  OSTimeDlyResume PROC
;;;354    #if OS_CFG_TIME_DLY_RESUME_EN > 0u
;;;355    void  OSTimeDlyResume (OS_TCB  *p_tcb,
000000  b570              PUSH     {r4-r6,lr}
;;;356                           OS_ERR  *p_err)
;;;357    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;358        CPU_SR_ALLOC();
000006  2600              MOVS     r6,#0
;;;359    
;;;360    
;;;361    
;;;362    #ifdef OS_SAFETY_CRITICAL
;;;363        if (p_err == (OS_ERR *)0) {
;;;364            OS_SAFETY_CRITICAL_EXCEPTION();
;;;365            return;
;;;366        }
;;;367    #endif
;;;368    
;;;369    #if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
;;;370        if (OSIntNestingCtr > (OS_NESTING_CTR)0u) {             /* Not allowed to call from an ISR                        */
;;;371           *p_err = OS_ERR_TIME_DLY_RESUME_ISR;
;;;372            return;
;;;373        }
;;;374    #endif
;;;375    
;;;376    #if OS_CFG_ARG_CHK_EN > 0u
;;;377        if (p_tcb == (OS_TCB *)0) {                             /* Not possible for the running task to be delayed!       */
000008  b91d              CBNZ     r5,|L3.18|
;;;378           *p_err = OS_ERR_TASK_NOT_DLY;
00000a  f2471051          MOV      r0,#0x7151
00000e  8020              STRH     r0,[r4,#0]
                  |L3.16|
;;;379            return;
;;;380        }
;;;381    #endif
;;;382    
;;;383        CPU_CRITICAL_ENTER();
;;;384        if (p_tcb == OSTCBCurPtr) {                             /* Not possible for the running task to be delayed!       */
;;;385           *p_err = OS_ERR_TASK_NOT_DLY;
;;;386            CPU_CRITICAL_EXIT();
;;;387            return;
;;;388        }
;;;389    
;;;390        switch (p_tcb->TaskState) {
;;;391            case OS_TASK_STATE_RDY:                             /* Cannot Abort delay if task is ready                    */
;;;392                 CPU_CRITICAL_EXIT();
;;;393                *p_err = OS_ERR_TASK_NOT_DLY;
;;;394                 break;
;;;395    
;;;396            case OS_TASK_STATE_DLY:
;;;397                 OS_CRITICAL_ENTER_CPU_EXIT();
;;;398                 p_tcb->TaskState = OS_TASK_STATE_RDY;
;;;399                 OS_TickListRemove(p_tcb);                      /* Remove task from tick list                             */
;;;400                 OS_RdyListInsert(p_tcb);                       /* Add to ready list                                      */
;;;401                 OS_CRITICAL_EXIT_NO_SCHED();
;;;402                *p_err = OS_ERR_NONE;
;;;403                 break;
;;;404    
;;;405            case OS_TASK_STATE_PEND:
;;;406                 CPU_CRITICAL_EXIT();
;;;407                *p_err = OS_ERR_TASK_NOT_DLY;
;;;408                 break;
;;;409    
;;;410            case OS_TASK_STATE_PEND_TIMEOUT:
;;;411                 CPU_CRITICAL_EXIT();
;;;412                *p_err = OS_ERR_TASK_NOT_DLY;
;;;413                 break;
;;;414    
;;;415            case OS_TASK_STATE_SUSPENDED:
;;;416                 CPU_CRITICAL_EXIT();
;;;417                *p_err = OS_ERR_TASK_NOT_DLY;
;;;418                 break;
;;;419    
;;;420            case OS_TASK_STATE_DLY_SUSPENDED:
;;;421                 OS_CRITICAL_ENTER_CPU_EXIT();
;;;422                 p_tcb->TaskState = OS_TASK_STATE_SUSPENDED;
;;;423                 OS_TickListRemove(p_tcb);                      /* Remove task from tick list                             */
;;;424                 OS_CRITICAL_EXIT_NO_SCHED();
;;;425                *p_err            = OS_ERR_TASK_SUSPENDED;
;;;426                 break;
;;;427    
;;;428            case OS_TASK_STATE_PEND_SUSPENDED:
;;;429                 CPU_CRITICAL_EXIT();
;;;430                *p_err = OS_ERR_TASK_NOT_DLY;
;;;431                 break;
;;;432    
;;;433            case OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED:
;;;434                 CPU_CRITICAL_EXIT();
;;;435                *p_err = OS_ERR_TASK_NOT_DLY;
;;;436                 break;
;;;437    
;;;438            default:
;;;439                 CPU_CRITICAL_EXIT();
;;;440                *p_err = OS_ERR_STATE_INVALID;
;;;441                 break;
;;;442        }
;;;443    
;;;444        OSSched();
;;;445    }
000010  bd70              POP      {r4-r6,pc}
                  |L3.18|
000012  bf00              NOP                            ;383
000014  bf00              NOP                            ;383
000016  f7fffffe          BL       CPU_SR_Save
00001a  4606              MOV      r6,r0                 ;383
00001c  bf00              NOP                            ;383
00001e  bf00              NOP                            ;383
000020  4847              LDR      r0,|L3.320|
000022  6800              LDR      r0,[r0,#0]            ;384  ; OSTCBCurPtr
000024  4285              CMP      r5,r0                 ;384
000026  d10a              BNE      |L3.62|
000028  f2471051          MOV      r0,#0x7151            ;385
00002c  8020              STRH     r0,[r4,#0]            ;385
00002e  bf00              NOP                            ;386
000030  bf00              NOP                            ;386
000032  4630              MOV      r0,r6                 ;386
000034  f7fffffe          BL       CPU_SR_Restore
000038  bf00              NOP                            ;386
00003a  bf00              NOP                            ;386
00003c  e7e8              B        |L3.16|
                  |L3.62|
00003e  f8950036          LDRB     r0,[r5,#0x36]         ;390
000042  2808              CMP      r0,#8                 ;390
000044  d26b              BCS      |L3.286|
000046  e8dff000          TBB      [pc,r0]               ;390
00004a  040f              DCB      0x04,0x0f
00004c  222d3843          DCB      0x22,0x2d,0x38,0x43
000050  545f              DCB      0x54,0x5f
000052  bf00              NOP                            ;392
000054  bf00              NOP                            ;392
000056  4630              MOV      r0,r6                 ;392
000058  f7fffffe          BL       CPU_SR_Restore
00005c  bf00              NOP                            ;392
00005e  bf00              NOP                            ;392
000060  f2471051          MOV      r0,#0x7151            ;393
000064  8020              STRH     r0,[r4,#0]            ;393
000066  e065              B        |L3.308|
000068  2000              MOVS     r0,#0                 ;398
00006a  f8850036          STRB     r0,[r5,#0x36]         ;398
00006e  4628              MOV      r0,r5                 ;399
000070  f7fffffe          BL       OS_TickListRemove
000074  4628              MOV      r0,r5                 ;400
000076  f7fffffe          BL       OS_RdyListInsert
00007a  bf00              NOP                            ;401
00007c  bf00              NOP                            ;401
00007e  4630              MOV      r0,r6                 ;401
000080  f7fffffe          BL       CPU_SR_Restore
000084  bf00              NOP                            ;401
000086  bf00              NOP                            ;401
000088  2000              MOVS     r0,#0                 ;402
00008a  8020              STRH     r0,[r4,#0]            ;402
00008c  e052              B        |L3.308|
00008e  bf00              NOP                            ;406
000090  bf00              NOP                            ;406
000092  4630              MOV      r0,r6                 ;406
000094  f7fffffe          BL       CPU_SR_Restore
000098  bf00              NOP                            ;406
00009a  bf00              NOP                            ;406
00009c  f2471051          MOV      r0,#0x7151            ;407
0000a0  8020              STRH     r0,[r4,#0]            ;407
0000a2  e047              B        |L3.308|
0000a4  bf00              NOP                            ;411
0000a6  bf00              NOP                            ;411
0000a8  4630              MOV      r0,r6                 ;411
0000aa  f7fffffe          BL       CPU_SR_Restore
0000ae  bf00              NOP                            ;411
0000b0  bf00              NOP                            ;411
0000b2  f2471051          MOV      r0,#0x7151            ;412
0000b6  8020              STRH     r0,[r4,#0]            ;412
0000b8  e03c              B        |L3.308|
0000ba  bf00              NOP                            ;416
0000bc  bf00              NOP                            ;416
0000be  4630              MOV      r0,r6                 ;416
0000c0  f7fffffe          BL       CPU_SR_Restore
0000c4  bf00              NOP                            ;416
0000c6  bf00              NOP                            ;416
0000c8  f2471051          MOV      r0,#0x7151            ;417
0000cc  8020              STRH     r0,[r4,#0]            ;417
0000ce  e031              B        |L3.308|
0000d0  2004              MOVS     r0,#4                 ;422
0000d2  f8850036          STRB     r0,[r5,#0x36]         ;422
0000d6  4628              MOV      r0,r5                 ;423
0000d8  f7fffffe          BL       OS_TickListRemove
0000dc  bf00              NOP                            ;424
0000de  bf00              NOP                            ;424
0000e0  4630              MOV      r0,r6                 ;424
0000e2  f7fffffe          BL       CPU_SR_Restore
0000e6  bf00              NOP                            ;424
0000e8  bf00              NOP                            ;424
0000ea  f247105a          MOV      r0,#0x715a            ;425
0000ee  8020              STRH     r0,[r4,#0]            ;425
0000f0  e020              B        |L3.308|
0000f2  bf00              NOP                            ;429
0000f4  bf00              NOP                            ;429
0000f6  4630              MOV      r0,r6                 ;429
0000f8  f7fffffe          BL       CPU_SR_Restore
0000fc  bf00              NOP                            ;429
0000fe  bf00              NOP                            ;429
000100  f2471051          MOV      r0,#0x7151            ;430
000104  8020              STRH     r0,[r4,#0]            ;430
000106  e015              B        |L3.308|
000108  bf00              NOP                            ;434
00010a  bf00              NOP                            ;434
00010c  4630              MOV      r0,r6                 ;434
00010e  f7fffffe          BL       CPU_SR_Restore
000112  bf00              NOP                            ;434
000114  bf00              NOP                            ;434
000116  f2471051          MOV      r0,#0x7151            ;435
00011a  8020              STRH     r0,[r4,#0]            ;435
00011c  e00a              B        |L3.308|
                  |L3.286|
00011e  bf00              NOP                            ;439
000120  bf00              NOP                            ;439
000122  4630              MOV      r0,r6                 ;439
000124  f7fffffe          BL       CPU_SR_Restore
000128  bf00              NOP                            ;439
00012a  bf00              NOP                            ;439
00012c  f646602d          MOV      r0,#0x6e2d            ;440
000130  8020              STRH     r0,[r4,#0]            ;440
000132  bf00              NOP                            ;441
                  |L3.308|
000134  bf00              NOP                            ;394
000136  f7fffffe          BL       OSSched
00013a  bf00              NOP      
00013c  e768              B        |L3.16|
;;;446    #endif
                          ENDP

00013e  0000              DCW      0x0000
                  |L3.320|
                          DCD      OSTCBCurPtr

                          AREA ||i.OSTimeGet||, CODE, READONLY, ALIGN=2

                  OSTimeGet PROC
;;;462    
;;;463    OS_TICK  OSTimeGet (OS_ERR  *p_err)
000000  b570              PUSH     {r4-r6,lr}
;;;464    {
000002  4604              MOV      r4,r0
;;;465        OS_TICK  ticks;
;;;466        CPU_SR_ALLOC();
000004  2600              MOVS     r6,#0
;;;467    
;;;468    
;;;469    
;;;470    #ifdef OS_SAFETY_CRITICAL
;;;471        if (p_err == (OS_ERR *)0) {
;;;472            OS_SAFETY_CRITICAL_EXCEPTION();
;;;473            return ((OS_TICK)0);
;;;474        }
;;;475    #endif
;;;476    
;;;477        CPU_CRITICAL_ENTER();
000006  bf00              NOP      
000008  bf00              NOP      
00000a  f7fffffe          BL       CPU_SR_Save
00000e  4606              MOV      r6,r0
000010  bf00              NOP      
000012  bf00              NOP      
;;;478        ticks = OSTickCtr;
000014  4806              LDR      r0,|L4.48|
000016  6805              LDR      r5,[r0,#0]  ; OSTickCtr
;;;479        CPU_CRITICAL_EXIT();
000018  bf00              NOP      
00001a  bf00              NOP      
00001c  4630              MOV      r0,r6
00001e  f7fffffe          BL       CPU_SR_Restore
000022  bf00              NOP      
000024  bf00              NOP      
;;;480       *p_err = OS_ERR_NONE;
000026  2000              MOVS     r0,#0
000028  8020              STRH     r0,[r4,#0]
;;;481        return (ticks);
00002a  4628              MOV      r0,r5
;;;482    }
00002c  bd70              POP      {r4-r6,pc}
;;;483    
                          ENDP

00002e  0000              DCW      0x0000
                  |L4.48|
                          DCD      OSTickCtr

                          AREA ||i.OSTimeSet||, CODE, READONLY, ALIGN=2

                  OSTimeSet PROC
;;;499    
;;;500    void  OSTimeSet (OS_TICK   ticks,
000000  b570              PUSH     {r4-r6,lr}
;;;501                     OS_ERR   *p_err)
;;;502    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;503        CPU_SR_ALLOC();
000006  2600              MOVS     r6,#0
;;;504    
;;;505    
;;;506    
;;;507    #ifdef OS_SAFETY_CRITICAL
;;;508        if (p_err == (OS_ERR *)0) {
;;;509            OS_SAFETY_CRITICAL_EXCEPTION();
;;;510            return;
;;;511        }
;;;512    #endif
;;;513    
;;;514        CPU_CRITICAL_ENTER();
000008  bf00              NOP      
00000a  bf00              NOP      
00000c  f7fffffe          BL       CPU_SR_Save
000010  4606              MOV      r6,r0
000012  bf00              NOP      
000014  bf00              NOP      
;;;515        OSTickCtr = ticks;
000016  4806              LDR      r0,|L5.48|
000018  6004              STR      r4,[r0,#0]  ; OSTickCtr
;;;516        CPU_CRITICAL_EXIT();
00001a  bf00              NOP      
00001c  bf00              NOP      
00001e  4630              MOV      r0,r6
000020  f7fffffe          BL       CPU_SR_Restore
000024  bf00              NOP      
000026  bf00              NOP      
;;;517       *p_err     = OS_ERR_NONE;
000028  2000              MOVS     r0,#0
00002a  8028              STRH     r0,[r5,#0]
;;;518    }
00002c  bd70              POP      {r4-r6,pc}
;;;519    
                          ENDP

00002e  0000              DCW      0x0000
                  |L5.48|
                          DCD      OSTickCtr

                          AREA ||i.OSTimeTick||, CODE, READONLY, ALIGN=2

                  OSTimeTick PROC
;;;533    
;;;534    void  OSTimeTick (void)
000000  b508              PUSH     {r3,lr}
;;;535    {
;;;536        OS_ERR  err;
;;;537    #if OS_CFG_ISR_POST_DEFERRED_EN > 0u
;;;538        CPU_TS  ts;
;;;539    #endif
;;;540    
;;;541    
;;;542        OSTimeTickHook();                                       /* Call user definable hook                               */
000002  f7fffffe          BL       OSTimeTickHook
;;;543    
;;;544    #if OS_CFG_ISR_POST_DEFERRED_EN > 0u
;;;545    
;;;546        ts = OS_TS_GET();                                       /* Get timestamp                                          */
;;;547        OS_IntQPost((OS_OBJ_TYPE) OS_OBJ_TYPE_TICK,             /* Post to ISR queue                                      */
;;;548                    (void      *)&OSRdyList[OSPrioCur],
;;;549                    (void      *) 0,
;;;550                    (OS_MSG_SIZE) 0u,
;;;551                    (OS_FLAGS   ) 0u,
;;;552                    (OS_OPT     ) 0u,
;;;553                    (CPU_TS     ) ts,
;;;554                    (OS_ERR    *)&err);
;;;555    
;;;556    #else
;;;557    
;;;558       (void)OSTaskSemPost((OS_TCB *)&OSTickTaskTCB,            /* Signal tick task                                       */
000006  466a              MOV      r2,sp
000008  2100              MOVS     r1,#0
00000a  480a              LDR      r0,|L6.52|
00000c  f7fffffe          BL       OSTaskSemPost
;;;559                           (OS_OPT  ) OS_OPT_POST_NONE,
;;;560                           (OS_ERR *)&err);
;;;561    
;;;562    
;;;563    #if OS_CFG_SCHED_ROUND_ROBIN_EN > 0u
;;;564        OS_SchedRoundRobin(&OSRdyList[OSPrioCur]);
;;;565    #endif
;;;566    
;;;567    #if OS_CFG_TMR_EN > 0u
;;;568        OSTmrUpdateCtr--;
000010  4809              LDR      r0,|L6.56|
000012  6800              LDR      r0,[r0,#0]  ; OSTmrUpdateCtr
000014  1e40              SUBS     r0,r0,#1
000016  4908              LDR      r1,|L6.56|
000018  6008              STR      r0,[r1,#0]  ; OSTmrUpdateCtr
;;;569        if (OSTmrUpdateCtr == (OS_CTR)0u) {
00001a  4608              MOV      r0,r1
00001c  6800              LDR      r0,[r0,#0]  ; OSTmrUpdateCtr
00001e  b938              CBNZ     r0,|L6.48|
;;;570            OSTmrUpdateCtr = OSTmrUpdateCnt;
000020  4806              LDR      r0,|L6.60|
000022  6800              LDR      r0,[r0,#0]  ; OSTmrUpdateCnt
000024  6008              STR      r0,[r1,#0]  ; OSTmrUpdateCtr
;;;571            OSTaskSemPost((OS_TCB *)&OSTmrTaskTCB,              /* Signal timer task                                      */
000026  466a              MOV      r2,sp
000028  2100              MOVS     r1,#0
00002a  4805              LDR      r0,|L6.64|
00002c  f7fffffe          BL       OSTaskSemPost
                  |L6.48|
;;;572                          (OS_OPT  ) OS_OPT_POST_NONE,
;;;573                          (OS_ERR *)&err);
;;;574        }
;;;575    #endif
;;;576    
;;;577    #endif
;;;578    }
000030  bd08              POP      {r3,pc}
                          ENDP

000032  0000              DCW      0x0000
                  |L6.52|
                          DCD      OSTickTaskTCB
                  |L6.56|
                          DCD      OSTmrUpdateCtr
                  |L6.60|
                          DCD      OSTmrUpdateCnt
                  |L6.64|
                          DCD      OSTmrTaskTCB
