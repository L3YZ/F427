; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\os_mem.o --asm_dir=.\Lst\ --list_dir=.\Lst\ --depend=.\obj\os_mem.d --cpu=Cortex-M4.fp --apcs=interwork -O0 -I..\..\..\CMSIS\4.5.0\CMSIS\Include -I..\APP -I..\APP\ST -I..\APP\uCOS -I..\..\BSP\KeilMDK -I..\..\BSP\Board\inc -I..\..\BSP\STM32F4xx\inc -I..\..\BSP\Xlong\inc -I..\..\..\uCOS\uC-CPU -I..\..\..\uCOS\uC-CPU\Ports\ARM-Cortex-M4 -I..\..\..\uCOS\uC-LIB -I..\..\..\uCOS\uC-LIB\Ports\ARM-Cortex-M4 -I..\..\..\uCOS\uCOS-III\Source -I..\..\..\uCOS\uCOS-III\Ports\ARM-Cortex-M4 -IC:\Users\V200\Desktop\XLong\XLong\OS\KeilMDKPrj\RTE -Id:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\1.0.8\Device\Include -Id:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -DSTM32F427_437xx -DSTM32F427_437xx -DUSE_STDPERIPH_DRIVER --omf_browse=.\obj\os_mem.crf ..\..\..\uCOS\uCOS-III\Source\os_mem.c]
                          THUMB

                          AREA ||i.OSMemCreate||, CODE, READONLY, ALIGN=2

                  OSMemCreate PROC
;;;76     
;;;77     void  OSMemCreate (OS_MEM       *p_mem,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;78                        CPU_CHAR     *p_name,
;;;79                        void         *p_addr,
;;;80                        OS_MEM_QTY    n_blks,
;;;81                        OS_MEM_SIZE   blk_size,
;;;82                        OS_ERR       *p_err)
;;;83     {
000004  b083              SUB      sp,sp,#0xc
000006  4604              MOV      r4,r0
000008  4615              MOV      r5,r2
00000a  461f              MOV      r7,r3
00000c  e9dd9610          LDRD     r9,r6,[sp,#0x40]
;;;84     #if OS_CFG_ARG_CHK_EN > 0u
;;;85         CPU_DATA       align_msk;
;;;86     #endif
;;;87         OS_MEM_QTY     i;
;;;88         OS_MEM_QTY     loops;
;;;89         CPU_INT08U    *p_blk;
;;;90         void         **p_link;
;;;91         CPU_SR_ALLOC();
000010  2000              MOVS     r0,#0
000012  9000              STR      r0,[sp,#0]
;;;92     
;;;93     
;;;94     
;;;95     #ifdef OS_SAFETY_CRITICAL
;;;96         if (p_err == (OS_ERR *)0) {
;;;97             OS_SAFETY_CRITICAL_EXCEPTION();
;;;98             return;
;;;99         }
;;;100    #endif
;;;101    
;;;102    #ifdef OS_SAFETY_CRITICAL_IEC61508
;;;103        if (OSSafetyCriticalStartFlag == DEF_TRUE) {
;;;104           *p_err = OS_ERR_ILLEGAL_CREATE_RUN_TIME;
;;;105            return;
;;;106        }
;;;107    #endif
;;;108    
;;;109    #if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
;;;110        if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Not allowed to call from an ISR                        */
;;;111           *p_err = OS_ERR_MEM_CREATE_ISR;
;;;112            return;
;;;113        }
;;;114    #endif
;;;115    
;;;116    #if OS_CFG_ARG_CHK_EN > 0u
;;;117        if (p_addr == (void *)0) {                              /* Must pass a valid address for the memory part.         */
000014  b92d              CBNZ     r5,|L1.34|
;;;118           *p_err   = OS_ERR_MEM_INVALID_P_ADDR;
000016  f24560bb          MOV      r0,#0x56bb
00001a  8030              STRH     r0,[r6,#0]
                  |L1.28|
;;;119            return;
;;;120        }
;;;121        if (n_blks < (OS_MEM_QTY)2) {                           /* Must have at least 2 blocks per partition              */
;;;122           *p_err = OS_ERR_MEM_INVALID_BLKS;
;;;123            return;
;;;124        }
;;;125        if (blk_size < sizeof(void *)) {                        /* Must contain space for at least a pointer              */
;;;126           *p_err = OS_ERR_MEM_INVALID_SIZE;
;;;127            return;
;;;128        }
;;;129        align_msk = sizeof(void *) - 1u;
;;;130        if (align_msk > 0u) {
;;;131            if (((CPU_ADDR)p_addr & align_msk) != 0u){          /* Must be pointer size aligned                           */
;;;132               *p_err = OS_ERR_MEM_INVALID_P_ADDR;
;;;133                return;
;;;134            }
;;;135            if ((blk_size & align_msk) != 0u) {                 /* Block size must be a multiple address size             */
;;;136               *p_err = OS_ERR_MEM_INVALID_SIZE;
;;;137                return;
;;;138            }
;;;139        }
;;;140    #endif
;;;141    
;;;142        p_link = (void **)p_addr;                               /* Create linked list of free memory blocks               */
;;;143        p_blk  = (CPU_INT08U *)p_addr;
;;;144        loops  = n_blks - 1u;
;;;145        for (i = 0u; i < loops; i++) {
;;;146            p_blk +=  blk_size;
;;;147           *p_link = (void  *)p_blk;                            /* Save pointer to NEXT block in CURRENT block            */
;;;148            p_link = (void **)(void *)p_blk;                    /* Position     to NEXT block                             */
;;;149        }
;;;150       *p_link             = (void *)0;                         /* Last memory block points to NULL                       */
;;;151    
;;;152        OS_CRITICAL_ENTER();
;;;153    #if OS_OBJ_TYPE_REQ > 0u
;;;154        p_mem->Type        = OS_OBJ_TYPE_MEM;                   /* Set the type of object                                 */
;;;155    #endif
;;;156    #if OS_CFG_DBG_EN > 0u
;;;157        p_mem->NamePtr     = p_name;                            /* Save name of memory partition                          */
;;;158    #else
;;;159        (void)&p_name;
;;;160    #endif
;;;161        p_mem->AddrPtr     = p_addr;                            /* Store start address of memory partition                */
;;;162        p_mem->FreeListPtr = p_addr;                            /* Initialize pointer to pool of free blocks              */
;;;163        p_mem->NbrFree     = n_blks;                            /* Store number of free blocks in MCB                     */
;;;164        p_mem->NbrMax      = n_blks;
;;;165        p_mem->BlkSize     = blk_size;                          /* Store block size of each memory blocks                 */
;;;166    
;;;167    #if OS_CFG_DBG_EN > 0u
;;;168        OS_MemDbgListAdd(p_mem);
;;;169    #endif
;;;170    
;;;171        OSMemQty++;
;;;172    
;;;173    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
;;;174        TRACE_OS_MEM_CREATE(p_mem, p_name);                     /* Record the event.                                      */
;;;175    #endif
;;;176    
;;;177        OS_CRITICAL_EXIT_NO_SCHED();
;;;178       *p_err = OS_ERR_NONE;
;;;179    }
00001c  b007              ADD      sp,sp,#0x1c
00001e  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.34|
000022  2f02              CMP      r7,#2                 ;121
000024  da03              BGE      |L1.46|
000026  f24560bc          MOV      r0,#0x56bc            ;122
00002a  8030              STRH     r0,[r6,#0]            ;122
00002c  e7f6              B        |L1.28|
                  |L1.46|
00002e  f1b90f04          CMP      r9,#4                 ;125
000032  d203              BCS      |L1.60|
000034  f24560c1          MOV      r0,#0x56c1            ;126
000038  8030              STRH     r0,[r6,#0]            ;126
00003a  e7ef              B        |L1.28|
                  |L1.60|
00003c  f04f0a03          MOV      r10,#3                ;129
000040  f1ba0f00          CMP      r10,#0                ;130
000044  d00d              BEQ      |L1.98|
000046  ea05000a          AND      r0,r5,r10             ;131
00004a  b118              CBZ      r0,|L1.84|
00004c  f24560bb          MOV      r0,#0x56bb            ;132
000050  8030              STRH     r0,[r6,#0]            ;132
000052  e7e3              B        |L1.28|
                  |L1.84|
000054  ea09000a          AND      r0,r9,r10             ;135
000058  b118              CBZ      r0,|L1.98|
00005a  f24560c1          MOV      r0,#0x56c1            ;136
00005e  8030              STRH     r0,[r6,#0]            ;136
000060  e7dc              B        |L1.28|
                  |L1.98|
000062  46ab              MOV      r11,r5                ;142
000064  46a8              MOV      r8,r5                 ;143
000066  1e78              SUBS     r0,r7,#1              ;144
000068  b280              UXTH     r0,r0                 ;144
00006a  9001              STR      r0,[sp,#4]            ;144
00006c  2000              MOVS     r0,#0                 ;145
00006e  9002              STR      r0,[sp,#8]            ;145
000070  e007              B        |L1.130|
                  |L1.114|
000072  44c8              ADD      r8,r8,r9              ;146
000074  f8cb8000          STR      r8,[r11,#0]           ;147
000078  46c3              MOV      r11,r8                ;148
00007a  9802              LDR      r0,[sp,#8]            ;145
00007c  1c40              ADDS     r0,r0,#1              ;145
00007e  b280              UXTH     r0,r0                 ;145
000080  9002              STR      r0,[sp,#8]            ;145
                  |L1.130|
000082  e9dd1001          LDRD     r1,r0,[sp,#4]         ;145
000086  4288              CMP      r0,r1                 ;145
000088  dbf3              BLT      |L1.114|
00008a  2000              MOVS     r0,#0                 ;150
00008c  f8cb0000          STR      r0,[r11,#0]           ;150
000090  bf00              NOP                            ;152
000092  bf00              NOP                            ;152
000094  f7fffffe          BL       CPU_SR_Save
000098  9000              STR      r0,[sp,#0]            ;152
00009a  bf00              NOP                            ;152
00009c  bf00              NOP                            ;152
00009e  480e              LDR      r0,|L1.216|
0000a0  6020              STR      r0,[r4,#0]            ;154
0000a2  9804              LDR      r0,[sp,#0x10]         ;157
0000a4  60a0              STR      r0,[r4,#8]            ;157
0000a6  6065              STR      r5,[r4,#4]            ;161
0000a8  60e5              STR      r5,[r4,#0xc]          ;162
0000aa  82a7              STRH     r7,[r4,#0x14]         ;163
0000ac  8267              STRH     r7,[r4,#0x12]         ;164
0000ae  f8a49010          STRH     r9,[r4,#0x10]         ;165
0000b2  4620              MOV      r0,r4                 ;168
0000b4  f7fffffe          BL       OS_MemDbgListAdd
0000b8  4808              LDR      r0,|L1.220|
0000ba  8800              LDRH     r0,[r0,#0]            ;171  ; OSMemQty
0000bc  1c40              ADDS     r0,r0,#1              ;171
0000be  4907              LDR      r1,|L1.220|
0000c0  8008              STRH     r0,[r1,#0]            ;171
0000c2  bf00              NOP                            ;177
0000c4  bf00              NOP                            ;177
0000c6  9800              LDR      r0,[sp,#0]            ;177
0000c8  f7fffffe          BL       CPU_SR_Restore
0000cc  bf00              NOP                            ;177
0000ce  bf00              NOP                            ;177
0000d0  2000              MOVS     r0,#0                 ;178
0000d2  8030              STRH     r0,[r6,#0]            ;178
0000d4  bf00              NOP      
0000d6  e7a1              B        |L1.28|
;;;180    
                          ENDP

                  |L1.216|
                          DCD      0x204d454d
                  |L1.220|
                          DCD      OSMemQty

                          AREA ||i.OSMemGet||, CODE, READONLY, ALIGN=1

                  OSMemGet PROC
;;;201    
;;;202    void  *OSMemGet (OS_MEM  *p_mem,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;203                     OS_ERR  *p_err)
;;;204    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;205        void    *p_blk;
;;;206        CPU_SR_ALLOC();
000008  2700              MOVS     r7,#0
;;;207    
;;;208    
;;;209    
;;;210    #ifdef OS_SAFETY_CRITICAL
;;;211        if (p_err == (OS_ERR *)0) {
;;;212    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
;;;213            TRACE_OS_MEM_GET_FAILED(p_mem);                     /* Record the event.                                      */
;;;214    #endif
;;;215            OS_SAFETY_CRITICAL_EXCEPTION();
;;;216            return ((void *)0);
;;;217        }
;;;218    #endif
;;;219    
;;;220    #if OS_CFG_ARG_CHK_EN > 0u
;;;221        if (p_mem == (OS_MEM *)0) {                             /* Must point to a valid memory partition                 */
00000a  b92c              CBNZ     r4,|L2.24|
;;;222    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
;;;223            TRACE_OS_MEM_GET_FAILED(p_mem);                     /* Record the event.                                      */
;;;224    #endif
;;;225           *p_err  = OS_ERR_MEM_INVALID_P_MEM;
00000c  f24560bf          MOV      r0,#0x56bf
000010  8028              STRH     r0,[r5,#0]
;;;226            return ((void *)0);
000012  2000              MOVS     r0,#0
                  |L2.20|
;;;227        }
;;;228    #endif
;;;229    
;;;230        CPU_CRITICAL_ENTER();
;;;231        if (p_mem->NbrFree == (OS_MEM_QTY)0) {                  /* See if there are any free memory blocks                */
;;;232            CPU_CRITICAL_EXIT();
;;;233    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
;;;234            TRACE_OS_MEM_GET_FAILED(p_mem);                     /* Record the event.                                      */
;;;235    #endif
;;;236           *p_err = OS_ERR_MEM_NO_FREE_BLKS;                    /* No,  Notify caller of empty memory partition           */
;;;237            return ((void *)0);                                 /*      Return NULL pointer to caller                     */
;;;238        }
;;;239        p_blk              = p_mem->FreeListPtr;                /* Yes, point to next free memory block                   */
;;;240        p_mem->FreeListPtr = *(void **)p_blk;                   /*      Adjust pointer to new free list                   */
;;;241        p_mem->NbrFree--;                                       /*      One less memory block in this partition           */
;;;242        CPU_CRITICAL_EXIT();
;;;243    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
;;;244        TRACE_OS_MEM_GET(p_mem);                                /* Record the event.                                      */
;;;245    #endif
;;;246       *p_err = OS_ERR_NONE;                                    /*      No error                                          */
;;;247        return (p_blk);                                         /*      Return memory block to caller                     */
;;;248    }
000014  e8bd81f0          POP      {r4-r8,pc}
                  |L2.24|
000018  bf00              NOP                            ;230
00001a  bf00              NOP                            ;230
00001c  f7fffffe          BL       CPU_SR_Save
000020  4607              MOV      r7,r0                 ;230
000022  bf00              NOP                            ;230
000024  bf00              NOP                            ;230
000026  8aa0              LDRH     r0,[r4,#0x14]         ;231
000028  b958              CBNZ     r0,|L2.66|
00002a  bf00              NOP                            ;232
00002c  bf00              NOP                            ;232
00002e  4638              MOV      r0,r7                 ;232
000030  f7fffffe          BL       CPU_SR_Restore
000034  bf00              NOP                            ;232
000036  bf00              NOP                            ;232
000038  f24560c2          MOV      r0,#0x56c2            ;236
00003c  8028              STRH     r0,[r5,#0]            ;236
00003e  2000              MOVS     r0,#0                 ;237
000040  e7e8              B        |L2.20|
                  |L2.66|
000042  68e6              LDR      r6,[r4,#0xc]          ;239
000044  6830              LDR      r0,[r6,#0]            ;240
000046  60e0              STR      r0,[r4,#0xc]          ;240
000048  8aa0              LDRH     r0,[r4,#0x14]         ;241
00004a  1e40              SUBS     r0,r0,#1              ;241
00004c  82a0              STRH     r0,[r4,#0x14]         ;241
00004e  bf00              NOP                            ;242
000050  bf00              NOP                            ;242
000052  4638              MOV      r0,r7                 ;242
000054  f7fffffe          BL       CPU_SR_Restore
000058  bf00              NOP                            ;242
00005a  bf00              NOP                            ;242
00005c  2000              MOVS     r0,#0                 ;246
00005e  8028              STRH     r0,[r5,#0]            ;246
000060  4630              MOV      r0,r6                 ;247
000062  e7d7              B        |L2.20|
;;;249    
                          ENDP


                          AREA ||i.OSMemPut||, CODE, READONLY, ALIGN=1

                  OSMemPut PROC
;;;270    
;;;271    void  OSMemPut (OS_MEM  *p_mem,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;272                    void    *p_blk,
;;;273                    OS_ERR  *p_err)
;;;274    {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4615              MOV      r5,r2
;;;275        CPU_SR_ALLOC();
00000a  2700              MOVS     r7,#0
;;;276    
;;;277    
;;;278    
;;;279    #ifdef OS_SAFETY_CRITICAL
;;;280        if (p_err == (OS_ERR *)0) {
;;;281    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
;;;282            TRACE_OS_MEM_PUT_FAILED(p_mem);                     /* Record the event.                                      */
;;;283    #endif
;;;284            OS_SAFETY_CRITICAL_EXCEPTION();
;;;285            return;
;;;286        }
;;;287    #endif
;;;288    
;;;289    #if OS_CFG_ARG_CHK_EN > 0u
;;;290        if (p_mem == (OS_MEM *)0) {                             /* Must point to a valid memory partition                 */
00000c  b924              CBNZ     r4,|L3.24|
;;;291    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
;;;292            TRACE_OS_MEM_PUT_FAILED(p_mem);                     /* Record the event.                                      */
;;;293    #endif
;;;294           *p_err  = OS_ERR_MEM_INVALID_P_MEM;
00000e  f24560bf          MOV      r0,#0x56bf
000012  8028              STRH     r0,[r5,#0]
                  |L3.20|
;;;295            return;
;;;296        }
;;;297        if (p_blk == (void *)0) {                               /* Must release a valid block                             */
;;;298    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
;;;299            TRACE_OS_MEM_PUT_FAILED(p_mem);                     /* Record the event.                                      */
;;;300    #endif
;;;301           *p_err  = OS_ERR_MEM_INVALID_P_BLK;
;;;302            return;
;;;303        }
;;;304    #endif
;;;305    
;;;306        CPU_CRITICAL_ENTER();
;;;307        if (p_mem->NbrFree >= p_mem->NbrMax) {                  /* Make sure all blocks not already returned              */
;;;308            CPU_CRITICAL_EXIT();
;;;309    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
;;;310            TRACE_OS_MEM_PUT_FAILED(p_mem);                     /* Record the event.                                      */
;;;311    #endif
;;;312           *p_err = OS_ERR_MEM_FULL;
;;;313            return;
;;;314        }
;;;315        *(void **)p_blk    = p_mem->FreeListPtr;                /* Insert released block into free block list             */
;;;316        p_mem->FreeListPtr = p_blk;
;;;317        p_mem->NbrFree++;                                       /* One more memory block in this partition                */
;;;318        CPU_CRITICAL_EXIT();
;;;319    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
;;;320        TRACE_OS_MEM_PUT(p_mem);                                /* Record the event.                                      */
;;;321    #endif
;;;322       *p_err              = OS_ERR_NONE;                       /* Notify caller that memory block was released           */
;;;323    }
000014  e8bd81f0          POP      {r4-r8,pc}
                  |L3.24|
000018  b91e              CBNZ     r6,|L3.34|
00001a  f24560be          MOV      r0,#0x56be            ;301
00001e  8028              STRH     r0,[r5,#0]            ;301
000020  e7f8              B        |L3.20|
                  |L3.34|
000022  bf00              NOP                            ;306
000024  bf00              NOP                            ;306
000026  f7fffffe          BL       CPU_SR_Save
00002a  4607              MOV      r7,r0                 ;306
00002c  bf00              NOP                            ;306
00002e  bf00              NOP                            ;306
000030  8aa0              LDRH     r0,[r4,#0x14]         ;307
000032  8a61              LDRH     r1,[r4,#0x12]         ;307
000034  4288              CMP      r0,r1                 ;307
000036  db0a              BLT      |L3.78|
000038  bf00              NOP                            ;308
00003a  bf00              NOP                            ;308
00003c  4638              MOV      r0,r7                 ;308
00003e  f7fffffe          BL       CPU_SR_Restore
000042  bf00              NOP                            ;308
000044  bf00              NOP                            ;308
000046  f24560ba          MOV      r0,#0x56ba            ;312
00004a  8028              STRH     r0,[r5,#0]            ;312
00004c  e7e2              B        |L3.20|
                  |L3.78|
00004e  68e0              LDR      r0,[r4,#0xc]          ;315
000050  6030              STR      r0,[r6,#0]            ;315
000052  60e6              STR      r6,[r4,#0xc]          ;316
000054  8aa0              LDRH     r0,[r4,#0x14]         ;317
000056  1c40              ADDS     r0,r0,#1              ;317
000058  82a0              STRH     r0,[r4,#0x14]         ;317
00005a  bf00              NOP                            ;318
00005c  bf00              NOP                            ;318
00005e  4638              MOV      r0,r7                 ;318
000060  f7fffffe          BL       CPU_SR_Restore
000064  bf00              NOP                            ;318
000066  bf00              NOP                            ;318
000068  2000              MOVS     r0,#0                 ;322
00006a  8028              STRH     r0,[r5,#0]            ;322
00006c  bf00              NOP      
00006e  e7d1              B        |L3.20|
;;;324    
                          ENDP


                          AREA ||i.OS_MemDbgListAdd||, CODE, READONLY, ALIGN=2

                  OS_MemDbgListAdd PROC
;;;340    #if OS_CFG_DBG_EN > 0u
;;;341    void  OS_MemDbgListAdd (OS_MEM  *p_mem)
000000  2100              MOVS     r1,#0
;;;342    {
;;;343        p_mem->DbgPrevPtr               = (OS_MEM *)0;
000002  6181              STR      r1,[r0,#0x18]
;;;344        if (OSMemDbgListPtr == (OS_MEM *)0) {
000004  4907              LDR      r1,|L4.36|
000006  6809              LDR      r1,[r1,#0]  ; OSMemDbgListPtr
000008  b911              CBNZ     r1,|L4.16|
;;;345            p_mem->DbgNextPtr           = (OS_MEM *)0;
00000a  2100              MOVS     r1,#0
00000c  61c1              STR      r1,[r0,#0x1c]
00000e  e005              B        |L4.28|
                  |L4.16|
;;;346        } else {
;;;347            p_mem->DbgNextPtr           =  OSMemDbgListPtr;
000010  4904              LDR      r1,|L4.36|
000012  6809              LDR      r1,[r1,#0]  ; OSMemDbgListPtr
000014  61c1              STR      r1,[r0,#0x1c]
;;;348            OSMemDbgListPtr->DbgPrevPtr =  p_mem;
000016  4903              LDR      r1,|L4.36|
000018  6809              LDR      r1,[r1,#0]  ; OSMemDbgListPtr
00001a  6188              STR      r0,[r1,#0x18]
                  |L4.28|
;;;349        }
;;;350        OSMemDbgListPtr                 =  p_mem;
00001c  4901              LDR      r1,|L4.36|
00001e  6008              STR      r0,[r1,#0]  ; OSMemDbgListPtr
;;;351    }
000020  4770              BX       lr
;;;352    #endif
                          ENDP

000022  0000              DCW      0x0000
                  |L4.36|
                          DCD      OSMemDbgListPtr

                          AREA ||i.OS_MemInit||, CODE, READONLY, ALIGN=2

                  OS_MemInit PROC
;;;369    
;;;370    void  OS_MemInit (OS_ERR  *p_err)
000000  2100              MOVS     r1,#0
;;;371    {
;;;372    #ifdef OS_SAFETY_CRITICAL
;;;373        if (p_err == (OS_ERR *)0) {
;;;374            OS_SAFETY_CRITICAL_EXCEPTION();
;;;375            return;
;;;376        }
;;;377    #endif
;;;378    
;;;379    #if OS_CFG_DBG_EN > 0u
;;;380        OSMemDbgListPtr = (OS_MEM   *)0;
000002  4a03              LDR      r2,|L5.16|
000004  6011              STR      r1,[r2,#0]  ; OSMemDbgListPtr
;;;381    #endif
;;;382    
;;;383        OSMemQty        = (OS_OBJ_QTY)0;
000006  4a03              LDR      r2,|L5.20|
000008  8011              STRH     r1,[r2,#0]
;;;384       *p_err           = OS_ERR_NONE;
00000a  8001              STRH     r1,[r0,#0]
;;;385    }
00000c  4770              BX       lr
;;;386    #endif
                          ENDP

00000e  0000              DCW      0x0000
                  |L5.16|
                          DCD      OSMemDbgListPtr
                  |L5.20|
                          DCD      OSMemQty
