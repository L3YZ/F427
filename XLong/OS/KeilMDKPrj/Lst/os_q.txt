; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\os_q.o --asm_dir=.\Lst\ --list_dir=.\Lst\ --depend=.\obj\os_q.d --cpu=Cortex-M4.fp --apcs=interwork -O0 -I..\..\..\CMSIS\4.5.0\CMSIS\Include -I..\APP -I..\APP\ST -I..\APP\uCOS -I..\..\BSP\KeilMDK -I..\..\BSP\Board\inc -I..\..\BSP\STM32F4xx\inc -I..\..\BSP\Xlong\inc -I..\..\..\uCOS\uC-CPU -I..\..\..\uCOS\uC-CPU\Ports\ARM-Cortex-M4 -I..\..\..\uCOS\uC-LIB -I..\..\..\uCOS\uC-LIB\Ports\ARM-Cortex-M4 -I..\..\..\uCOS\uCOS-III\Source -I..\..\..\uCOS\uCOS-III\Ports\ARM-Cortex-M4 -IC:\Users\V200\Desktop\XLong\XLong\OS\KeilMDKPrj\RTE -Id:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\1.0.8\Device\Include -Id:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -DSTM32F427_437xx -DSTM32F427_437xx -DUSE_STDPERIPH_DRIVER --omf_browse=.\obj\os_q.crf ..\..\..\uCOS\uCOS-III\Source\os_q.c]
                          THUMB

                          AREA ||i.OSQCreate||, CODE, READONLY, ALIGN=2

                  OSQCreate PROC
;;;72     
;;;73     void  OSQCreate (OS_Q        *p_q,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;74                      CPU_CHAR    *p_name,
;;;75                      OS_MSG_QTY   max_qty,
;;;76                      OS_ERR      *p_err)
;;;77     
;;;78     {
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
000008  4616              MOV      r6,r2
00000a  461d              MOV      r5,r3
;;;79         CPU_SR_ALLOC();
00000c  f04f0800          MOV      r8,#0
;;;80     
;;;81     
;;;82     
;;;83     #ifdef OS_SAFETY_CRITICAL
;;;84         if (p_err == (OS_ERR *)0) {
;;;85             OS_SAFETY_CRITICAL_EXCEPTION();
;;;86             return;
;;;87         }
;;;88     #endif
;;;89     
;;;90     #ifdef OS_SAFETY_CRITICAL_IEC61508
;;;91         if (OSSafetyCriticalStartFlag == DEF_TRUE) {
;;;92            *p_err = OS_ERR_ILLEGAL_CREATE_RUN_TIME;
;;;93             return;
;;;94         }
;;;95     #endif
;;;96     
;;;97     #if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
;;;98         if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Not allowed to be called from an ISR                   */
;;;99            *p_err = OS_ERR_CREATE_ISR;
;;;100            return;
;;;101        }
;;;102    #endif
;;;103    
;;;104    #if OS_CFG_ARG_CHK_EN > 0u
;;;105        if (p_q == (OS_Q *)0) {                                 /* Validate arguments                                     */
000010  b924              CBNZ     r4,|L1.28|
;;;106           *p_err = OS_ERR_OBJ_PTR_NULL;
000012  f64550c3          MOV      r0,#0x5dc3
000016  8028              STRH     r0,[r5,#0]
                  |L1.24|
;;;107            return;
;;;108        }
;;;109        if (max_qty == (OS_MSG_QTY)0) {                         /* Cannot specify a zero size queue                       */
;;;110           *p_err = OS_ERR_Q_SIZE;
;;;111            return;
;;;112        }
;;;113    #endif
;;;114    
;;;115        OS_CRITICAL_ENTER();
;;;116    #if OS_OBJ_TYPE_REQ > 0u
;;;117        p_q->Type    = OS_OBJ_TYPE_Q;                           /* Mark the data structure as a message queue             */
;;;118    #endif
;;;119    #if OS_CFG_DBG_EN > 0u
;;;120        p_q->NamePtr = p_name;
;;;121    #else
;;;122        (void)&p_name;
;;;123    #endif
;;;124        OS_MsgQInit(&p_q->MsgQ,                                 /* Initialize the queue                                   */
;;;125                    max_qty);
;;;126        OS_PendListInit(&p_q->PendList);                        /* Initialize the waiting list                            */
;;;127    
;;;128    #if OS_CFG_DBG_EN > 0u
;;;129        OS_QDbgListAdd(p_q);
;;;130    #endif
;;;131        OSQQty++;                                               /* One more queue created                                 */
;;;132    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
;;;133        TRACE_OS_Q_CREATE(p_q, p_name);                         /* Record the event.                                      */
;;;134    #endif
;;;135        OS_CRITICAL_EXIT_NO_SCHED();
;;;136       *p_err = OS_ERR_NONE;
;;;137    }
000018  e8bd81f0          POP      {r4-r8,pc}
                  |L1.28|
00001c  b91e              CBNZ     r6,|L1.38|
00001e  f2465094          MOV      r0,#0x6594            ;110
000022  8028              STRH     r0,[r5,#0]            ;110
000024  e7f8              B        |L1.24|
                  |L1.38|
000026  bf00              NOP                            ;115
000028  bf00              NOP                            ;115
00002a  f7fffffe          BL       CPU_SR_Save
00002e  4680              MOV      r8,r0                 ;115
000030  bf00              NOP                            ;115
000032  bf00              NOP                            ;115
000034  480f              LDR      r0,|L1.116|
000036  6020              STR      r0,[r4,#0]            ;117
000038  6067              STR      r7,[r4,#4]            ;120
00003a  4631              MOV      r1,r6                 ;124
00003c  f1040020          ADD      r0,r4,#0x20           ;124
000040  f7fffffe          BL       OS_MsgQInit
000044  f1040008          ADD      r0,r4,#8              ;126
000048  f7fffffe          BL       OS_PendListInit
00004c  4620              MOV      r0,r4                 ;129
00004e  f7fffffe          BL       OS_QDbgListAdd
000052  4809              LDR      r0,|L1.120|
000054  8800              LDRH     r0,[r0,#0]            ;131  ; OSQQty
000056  1c40              ADDS     r0,r0,#1              ;131
000058  4907              LDR      r1,|L1.120|
00005a  8008              STRH     r0,[r1,#0]            ;131
00005c  bf00              NOP                            ;135
00005e  bf00              NOP                            ;135
000060  4640              MOV      r0,r8                 ;135
000062  f7fffffe          BL       CPU_SR_Restore
000066  bf00              NOP                            ;135
000068  bf00              NOP                            ;135
00006a  2000              MOVS     r0,#0                 ;136
00006c  8028              STRH     r0,[r5,#0]            ;136
00006e  bf00              NOP      
000070  e7d2              B        |L1.24|
;;;138    
                          ENDP

000072  0000              DCW      0x0000
                  |L1.116|
                          DCD      0x55455551
                  |L1.120|
                          DCD      OSQQty

                          AREA ||i.OSQDel||, CODE, READONLY, ALIGN=2

                  OSQDel PROC
;;;174    #if OS_CFG_Q_DEL_EN > 0u
;;;175    OS_OBJ_QTY  OSQDel (OS_Q    *p_q,
000000  e92d5ffc          PUSH     {r2-r12,lr}
;;;176                        OS_OPT   opt,
;;;177                        OS_ERR  *p_err)
;;;178    {
000004  4605              MOV      r5,r0
000006  4688              MOV      r8,r1
000008  4614              MOV      r4,r2
;;;179        OS_OBJ_QTY     cnt;
;;;180        OS_OBJ_QTY     nbr_tasks;
;;;181        OS_PEND_DATA  *p_pend_data;
;;;182        OS_PEND_LIST  *p_pend_list;
;;;183        OS_TCB        *p_tcb;
;;;184        CPU_TS         ts;
;;;185        CPU_SR_ALLOC();
00000a  2000              MOVS     r0,#0
00000c  9000              STR      r0,[sp,#0]
;;;186    
;;;187    
;;;188    
;;;189    #ifdef OS_SAFETY_CRITICAL
;;;190        if (p_err == (OS_ERR *)0) {
;;;191            OS_SAFETY_CRITICAL_EXCEPTION();
;;;192            return ((OS_OBJ_QTY)0);
;;;193        }
;;;194    #endif
;;;195    
;;;196    #if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
;;;197        if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Can't delete a message queue from an ISR               */
;;;198           *p_err = OS_ERR_DEL_ISR;
;;;199            return ((OS_OBJ_QTY)0);
;;;200        }
;;;201    #endif
;;;202    
;;;203    #if OS_CFG_ARG_CHK_EN > 0u
;;;204        if (p_q == (OS_Q *)0) {                                 /* Validate 'p_q'                                         */
00000e  b92d              CBNZ     r5,|L2.28|
;;;205           *p_err =  OS_ERR_OBJ_PTR_NULL;
000010  f64550c3          MOV      r0,#0x5dc3
000014  8020              STRH     r0,[r4,#0]
;;;206            return ((OS_OBJ_QTY)0u);
000016  2000              MOVS     r0,#0
                  |L2.24|
;;;207        }
;;;208        switch (opt) {                                          /* Validate 'opt'                                         */
;;;209            case OS_OPT_DEL_NO_PEND:
;;;210            case OS_OPT_DEL_ALWAYS:
;;;211                 break;
;;;212    
;;;213            default:
;;;214                *p_err =  OS_ERR_OPT_INVALID;
;;;215                 return ((OS_OBJ_QTY)0u);
;;;216        }
;;;217    #endif
;;;218    
;;;219    #if OS_CFG_OBJ_TYPE_CHK_EN > 0u
;;;220        if (p_q->Type != OS_OBJ_TYPE_Q) {                       /* Make sure message queue was created                    */
;;;221           *p_err = OS_ERR_OBJ_TYPE;
;;;222            return ((OS_OBJ_QTY)0);
;;;223        }
;;;224    #endif
;;;225    
;;;226        CPU_CRITICAL_ENTER();
;;;227        p_pend_list = &p_q->PendList;
;;;228        cnt         = p_pend_list->NbrEntries;
;;;229        nbr_tasks   = cnt;
;;;230        switch (opt) {
;;;231            case OS_OPT_DEL_NO_PEND:                            /* Delete message queue only if no task waiting           */
;;;232                 if (nbr_tasks == (OS_OBJ_QTY)0) {
;;;233    #if OS_CFG_DBG_EN > 0u
;;;234                     OS_QDbgListRemove(p_q);
;;;235    #endif
;;;236                     OSQQty--;
;;;237    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
;;;238                     TRACE_OS_Q_DEL(p_q);                       /* Record the event.                                      */
;;;239    #endif
;;;240                     OS_QClr(p_q);
;;;241                     CPU_CRITICAL_EXIT();
;;;242                    *p_err = OS_ERR_NONE;
;;;243                 } else {
;;;244                     CPU_CRITICAL_EXIT();
;;;245                    *p_err = OS_ERR_TASK_WAITING;
;;;246                 }
;;;247                 break;
;;;248    
;;;249            case OS_OPT_DEL_ALWAYS:                             /* Always delete the message queue                        */
;;;250                 OS_CRITICAL_ENTER_CPU_EXIT();
;;;251                 ts = OS_TS_GET();                              /* Get local time stamp so all tasks get the same time    */
;;;252                 while (cnt > 0u) {                             /* Remove all tasks from the pend list                    */
;;;253                     p_pend_data = p_pend_list->HeadPtr;
;;;254                     p_tcb       = p_pend_data->TCBPtr;
;;;255                     OS_PendObjDel((OS_PEND_OBJ *)((void *)p_q),
;;;256                                   p_tcb,
;;;257                                   ts);
;;;258                     cnt--;
;;;259                 }
;;;260    #if OS_CFG_DBG_EN > 0u
;;;261                 OS_QDbgListRemove(p_q);
;;;262    #endif
;;;263                 OSQQty--;
;;;264    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
;;;265                 TRACE_OS_Q_DEL(p_q);                           /* Record the event.                                      */
;;;266    #endif
;;;267                 OS_QClr(p_q);
;;;268                 OS_CRITICAL_EXIT_NO_SCHED();
;;;269                 OSSched();                                     /* Find highest priority task ready to run                */
;;;270                *p_err = OS_ERR_NONE;
;;;271                 break;
;;;272    
;;;273            default:
;;;274                 CPU_CRITICAL_EXIT();
;;;275                *p_err = OS_ERR_OPT_INVALID;
;;;276                 break;
;;;277        }
;;;278        return (nbr_tasks);
;;;279    }
000018  e8bd9ffc          POP      {r2-r12,pc}
                  |L2.28|
00001c  f1b80f00          CMP      r8,#0                 ;208
000020  d003              BEQ      |L2.42|
000022  f1b80f01          CMP      r8,#1                 ;208
000026  d102              BNE      |L2.46|
000028  e000              B        |L2.44|
                  |L2.42|
00002a  bf00              NOP                            ;210
                  |L2.44|
00002c  e004              B        |L2.56|
                  |L2.46|
00002e  f6456025          MOV      r0,#0x5e25            ;214
000032  8020              STRH     r0,[r4,#0]            ;214
000034  2000              MOVS     r0,#0                 ;215
000036  e7ef              B        |L2.24|
                  |L2.56|
000038  bf00              NOP                            ;211
00003a  4939              LDR      r1,|L2.288|
00003c  6828              LDR      r0,[r5,#0]            ;220
00003e  4288              CMP      r0,r1                 ;220
000040  d004              BEQ      |L2.76|
000042  f64550c4          MOV      r0,#0x5dc4            ;221
000046  8020              STRH     r0,[r4,#0]            ;221
000048  2000              MOVS     r0,#0                 ;222
00004a  e7e5              B        |L2.24|
                  |L2.76|
00004c  bf00              NOP                            ;226
00004e  bf00              NOP                            ;226
000050  f7fffffe          BL       CPU_SR_Save
000054  9000              STR      r0,[sp,#0]            ;226
000056  bf00              NOP                            ;226
000058  bf00              NOP                            ;226
00005a  f1050908          ADD      r9,r5,#8              ;227
00005e  f8b96008          LDRH     r6,[r9,#8]            ;228
000062  4637              MOV      r7,r6                 ;229
000064  f1b80f00          CMP      r8,#0                 ;230
000068  d003              BEQ      |L2.114|
00006a  f1b80f01          CMP      r8,#1                 ;230
00006e  d149              BNE      |L2.260|
000070  e020              B        |L2.180|
                  |L2.114|
000072  b9a7              CBNZ     r7,|L2.158|
000074  4628              MOV      r0,r5                 ;234
000076  f7fffffe          BL       OS_QDbgListRemove
00007a  482a              LDR      r0,|L2.292|
00007c  8800              LDRH     r0,[r0,#0]            ;236  ; OSQQty
00007e  1e40              SUBS     r0,r0,#1              ;236
000080  4928              LDR      r1,|L2.292|
000082  8008              STRH     r0,[r1,#0]            ;236
000084  4628              MOV      r0,r5                 ;240
000086  f7fffffe          BL       OS_QClr
00008a  bf00              NOP                            ;241
00008c  bf00              NOP                            ;241
00008e  9800              LDR      r0,[sp,#0]            ;241
000090  f7fffffe          BL       CPU_SR_Restore
000094  bf00              NOP                            ;241
000096  bf00              NOP                            ;241
000098  2000              MOVS     r0,#0                 ;242
00009a  8020              STRH     r0,[r4,#0]            ;242
00009c  e009              B        |L2.178|
                  |L2.158|
00009e  bf00              NOP                            ;244
0000a0  bf00              NOP                            ;244
0000a2  9800              LDR      r0,[sp,#0]            ;244
0000a4  f7fffffe          BL       CPU_SR_Restore
0000a8  bf00              NOP                            ;244
0000aa  bf00              NOP                            ;244
0000ac  f247105f          MOV      r0,#0x715f            ;245
0000b0  8020              STRH     r0,[r4,#0]            ;245
                  |L2.178|
0000b2  e032              B        |L2.282|
                  |L2.180|
0000b4  f7fffffe          BL       CPU_TS_TmrRd
0000b8  9001              STR      r0,[sp,#4]            ;251
0000ba  e00a              B        |L2.210|
                  |L2.188|
0000bc  f8d9a000          LDR      r10,[r9,#0]           ;253
0000c0  f8dab008          LDR      r11,[r10,#8]          ;254
0000c4  4659              MOV      r1,r11                ;255
0000c6  4628              MOV      r0,r5                 ;255
0000c8  9a01              LDR      r2,[sp,#4]            ;255
0000ca  f7fffffe          BL       OS_PendObjDel
0000ce  1e70              SUBS     r0,r6,#1              ;258
0000d0  b286              UXTH     r6,r0                 ;258
                  |L2.210|
0000d2  2e00              CMP      r6,#0                 ;252
0000d4  d1f2              BNE      |L2.188|
0000d6  4628              MOV      r0,r5                 ;261
0000d8  f7fffffe          BL       OS_QDbgListRemove
0000dc  4811              LDR      r0,|L2.292|
0000de  8800              LDRH     r0,[r0,#0]            ;263  ; OSQQty
0000e0  1e40              SUBS     r0,r0,#1              ;263
0000e2  4910              LDR      r1,|L2.292|
0000e4  8008              STRH     r0,[r1,#0]            ;263
0000e6  4628              MOV      r0,r5                 ;267
0000e8  f7fffffe          BL       OS_QClr
0000ec  bf00              NOP                            ;268
0000ee  bf00              NOP                            ;268
0000f0  9800              LDR      r0,[sp,#0]            ;268
0000f2  f7fffffe          BL       CPU_SR_Restore
0000f6  bf00              NOP                            ;268
0000f8  bf00              NOP                            ;268
0000fa  f7fffffe          BL       OSSched
0000fe  2000              MOVS     r0,#0                 ;270
000100  8020              STRH     r0,[r4,#0]            ;270
000102  e00a              B        |L2.282|
                  |L2.260|
000104  bf00              NOP                            ;274
000106  bf00              NOP                            ;274
000108  9800              LDR      r0,[sp,#0]            ;274
00010a  f7fffffe          BL       CPU_SR_Restore
00010e  bf00              NOP                            ;274
000110  bf00              NOP                            ;274
000112  f6456025          MOV      r0,#0x5e25            ;275
000116  8020              STRH     r0,[r4,#0]            ;275
000118  bf00              NOP                            ;276
                  |L2.282|
00011a  bf00              NOP                            ;247
00011c  4638              MOV      r0,r7                 ;278
00011e  e77b              B        |L2.24|
;;;280    #endif
                          ENDP

                  |L2.288|
                          DCD      0x55455551
                  |L2.292|
                          DCD      OSQQty

                          AREA ||i.OSQFlush||, CODE, READONLY, ALIGN=2

                  OSQFlush PROC
;;;307    #if OS_CFG_Q_FLUSH_EN > 0u
;;;308    OS_MSG_QTY  OSQFlush (OS_Q    *p_q,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;309                          OS_ERR  *p_err)
;;;310    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;311        OS_MSG_QTY  entries;
;;;312        CPU_SR_ALLOC();
000008  2600              MOVS     r6,#0
;;;313    
;;;314    
;;;315    
;;;316    #ifdef OS_SAFETY_CRITICAL
;;;317        if (p_err == (OS_ERR *)0) {
;;;318            OS_SAFETY_CRITICAL_EXCEPTION();
;;;319            return ((OS_MSG_QTY)0);
;;;320        }
;;;321    #endif
;;;322    
;;;323    #if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
;;;324        if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Can't flush a message queue from an ISR                */
;;;325           *p_err = OS_ERR_FLUSH_ISR;
;;;326            return ((OS_MSG_QTY)0);
;;;327        }
;;;328    #endif
;;;329    
;;;330    #if OS_CFG_ARG_CHK_EN > 0u
;;;331        if (p_q == (OS_Q *)0) {                                 /* Validate arguments                                     */
00000a  b92c              CBNZ     r4,|L3.24|
;;;332           *p_err = OS_ERR_OBJ_PTR_NULL;
00000c  f64550c3          MOV      r0,#0x5dc3
000010  8028              STRH     r0,[r5,#0]
;;;333            return ((OS_MSG_QTY)0);
000012  2000              MOVS     r0,#0
                  |L3.20|
;;;334        }
;;;335    #endif
;;;336    
;;;337    #if OS_CFG_OBJ_TYPE_CHK_EN > 0u
;;;338        if (p_q->Type != OS_OBJ_TYPE_Q) {                       /* Make sure message queue was created                    */
;;;339           *p_err = OS_ERR_OBJ_TYPE;
;;;340            return ((OS_MSG_QTY)0);
;;;341        }
;;;342    #endif
;;;343    
;;;344        OS_CRITICAL_ENTER();
;;;345        entries = OS_MsgQFreeAll(&p_q->MsgQ);                   /* Return all OS_MSGs to the OS_MSG pool                  */
;;;346        OS_CRITICAL_EXIT();
;;;347       *p_err   = OS_ERR_NONE;
;;;348        return ((OS_MSG_QTY)entries);
;;;349    }
000014  e8bd81f0          POP      {r4-r8,pc}
                  |L3.24|
000018  490f              LDR      r1,|L3.88|
00001a  6820              LDR      r0,[r4,#0]            ;338
00001c  4288              CMP      r0,r1                 ;338
00001e  d004              BEQ      |L3.42|
000020  f64550c4          MOV      r0,#0x5dc4            ;339
000024  8028              STRH     r0,[r5,#0]            ;339
000026  2000              MOVS     r0,#0                 ;340
000028  e7f4              B        |L3.20|
                  |L3.42|
00002a  bf00              NOP                            ;344
00002c  bf00              NOP                            ;344
00002e  f7fffffe          BL       CPU_SR_Save
000032  4606              MOV      r6,r0                 ;344
000034  bf00              NOP                            ;344
000036  bf00              NOP                            ;344
000038  f1040020          ADD      r0,r4,#0x20           ;345
00003c  f7fffffe          BL       OS_MsgQFreeAll
000040  4607              MOV      r7,r0                 ;345
000042  bf00              NOP                            ;346
000044  bf00              NOP                            ;346
000046  4630              MOV      r0,r6                 ;346
000048  f7fffffe          BL       CPU_SR_Restore
00004c  bf00              NOP                            ;346
00004e  bf00              NOP                            ;346
000050  2000              MOVS     r0,#0                 ;347
000052  8028              STRH     r0,[r5,#0]            ;347
000054  4638              MOV      r0,r7                 ;348
000056  e7dd              B        |L3.20|
;;;350    #endif
                          ENDP

                  |L3.88|
                          DCD      0x55455551

                          AREA ||i.OSQPend||, CODE, READONLY, ALIGN=2

                  OSQPend PROC
;;;398    
;;;399    void  *OSQPend (OS_Q         *p_q,
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;400                    OS_TICK       timeout,
;;;401                    OS_OPT        opt,
;;;402                    OS_MSG_SIZE  *p_msg_size,
;;;403                    CPU_TS       *p_ts,
;;;404                    OS_ERR       *p_err)
;;;405    {
000004  b089              SUB      sp,sp,#0x24
000006  4607              MOV      r7,r0
000008  4689              MOV      r9,r1
00000a  4690              MOV      r8,r2
00000c  461e              MOV      r6,r3
00000e  e9dd5412          LDRD     r5,r4,[sp,#0x48]
;;;406        OS_PEND_DATA  pend_data;
;;;407        void         *p_void;
;;;408        CPU_SR_ALLOC();
000012  f04f0b00          MOV      r11,#0
;;;409    
;;;410    
;;;411    
;;;412    #ifdef OS_SAFETY_CRITICAL
;;;413        if (p_err == (OS_ERR *)0) {
;;;414    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
;;;415            TRACE_OS_Q_PEND_FAILED(p_q);                        /* Record the event.                                      */
;;;416    #endif
;;;417            OS_SAFETY_CRITICAL_EXCEPTION();
;;;418            return ((void *)0);
;;;419        }
;;;420    #endif
;;;421    
;;;422    #if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
;;;423        if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Not allowed to call from an ISR                        */
;;;424    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
;;;425            TRACE_OS_Q_PEND_FAILED(p_q);                        /* Record the event.                                      */
;;;426    #endif
;;;427           *p_err = OS_ERR_PEND_ISR;
;;;428            return ((void *)0);
;;;429        }
;;;430    #endif
;;;431    
;;;432    #if OS_CFG_ARG_CHK_EN > 0u
;;;433        if (p_q == (OS_Q *)0) {                                 /* Validate arguments                                     */
000016  b937              CBNZ     r7,|L4.38|
;;;434    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
;;;435            TRACE_OS_Q_PEND_FAILED(p_q);                        /* Record the event.                                      */
;;;436    #endif
;;;437           *p_err = OS_ERR_OBJ_PTR_NULL;
000018  f64550c3          MOV      r0,#0x5dc3
00001c  8020              STRH     r0,[r4,#0]
;;;438            return ((void *)0);
00001e  2000              MOVS     r0,#0
                  |L4.32|
;;;439        }
;;;440        if (p_msg_size == (OS_MSG_SIZE *)0) {
;;;441    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
;;;442            TRACE_OS_Q_PEND_FAILED(p_q);                        /* Record the event.                                      */
;;;443    #endif
;;;444           *p_err = OS_ERR_PTR_INVALID;
;;;445            return ((void *)0);
;;;446        }
;;;447        switch (opt) {
;;;448            case OS_OPT_PEND_BLOCKING:
;;;449            case OS_OPT_PEND_NON_BLOCKING:
;;;450                 break;
;;;451    
;;;452            default:
;;;453    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
;;;454                 TRACE_OS_Q_PEND_FAILED(p_q);                   /* Record the event.                                      */
;;;455    #endif
;;;456                *p_err = OS_ERR_OPT_INVALID;
;;;457                 return ((void *)0);
;;;458        }
;;;459    #endif
;;;460    
;;;461    #if OS_CFG_OBJ_TYPE_CHK_EN > 0u
;;;462        if (p_q->Type != OS_OBJ_TYPE_Q) {                       /* Make sure message queue was created                    */
;;;463    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
;;;464            TRACE_OS_Q_PEND_FAILED(p_q);                        /* Record the event.                                      */
;;;465    #endif
;;;466           *p_err = OS_ERR_OBJ_TYPE;
;;;467            return ((void *)0);
;;;468        }
;;;469    #endif
;;;470    
;;;471        if (p_ts != (CPU_TS *)0) {
;;;472           *p_ts  = (CPU_TS  )0;                                /* Initialize the returned timestamp                      */
;;;473        }
;;;474    
;;;475        CPU_CRITICAL_ENTER();
;;;476        p_void = OS_MsgQGet(&p_q->MsgQ,                         /* Any message waiting in the message queue?              */
;;;477                            p_msg_size,
;;;478                            p_ts,
;;;479                            p_err);
;;;480        if (*p_err == OS_ERR_NONE) {
;;;481            CPU_CRITICAL_EXIT();
;;;482    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
;;;483            TRACE_OS_Q_PEND(p_q);                               /* Record the event.                                      */
;;;484    #endif
;;;485            return (p_void);                                    /* Yes, Return message received                           */
;;;486        }
;;;487    
;;;488        if ((opt & OS_OPT_PEND_NON_BLOCKING) != (OS_OPT)0) {    /* Caller wants to block if not available?                */
;;;489            CPU_CRITICAL_EXIT();
;;;490    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
;;;491            TRACE_OS_Q_PEND_FAILED(p_q);                        /* Record the event.                                      */
;;;492    #endif
;;;493           *p_err = OS_ERR_PEND_WOULD_BLOCK;                    /* No                                                     */
;;;494            return ((void *)0);
;;;495        } else {
;;;496            if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0) {    /* Can't pend when the scheduler is locked                */
;;;497                CPU_CRITICAL_EXIT();
;;;498    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
;;;499                TRACE_OS_Q_PEND_FAILED(p_q);                    /* Record the event.                                      */
;;;500    #endif
;;;501               *p_err = OS_ERR_SCHED_LOCKED;
;;;502                return ((void *)0);
;;;503            }
;;;504        }
;;;505                                                                /* Lock the scheduler/re-enable interrupts                */
;;;506        OS_CRITICAL_ENTER_CPU_EXIT();
;;;507        OS_Pend(&pend_data,                                     /* Block task pending on Message Queue                    */
;;;508                (OS_PEND_OBJ *)((void *)p_q),
;;;509                OS_TASK_PEND_ON_Q,
;;;510                timeout);
;;;511        OS_CRITICAL_EXIT_NO_SCHED();
;;;512    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
;;;513        TRACE_OS_Q_PEND_BLOCK(p_q);                             /* Record the event.                                      */
;;;514    #endif
;;;515        OSSched();                                              /* Find the next highest priority task ready to run       */
;;;516    
;;;517        CPU_CRITICAL_ENTER();
;;;518        switch (OSTCBCurPtr->PendStatus) {
;;;519            case OS_STATUS_PEND_OK:                             /* Extract message from TCB (Put there by Post)           */
;;;520                 p_void     = OSTCBCurPtr->MsgPtr;
;;;521                *p_msg_size = OSTCBCurPtr->MsgSize;
;;;522                 if (p_ts  != (CPU_TS *)0) {
;;;523                    *p_ts   =  OSTCBCurPtr->TS;
;;;524                 }
;;;525    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
;;;526                 TRACE_OS_Q_PEND(p_q);                          /* Record the event.                                      */
;;;527    #endif
;;;528                *p_err      = OS_ERR_NONE;
;;;529                 break;
;;;530    
;;;531            case OS_STATUS_PEND_ABORT:                          /* Indicate that we aborted                               */
;;;532                 p_void     = (void      *)0;
;;;533                *p_msg_size = (OS_MSG_SIZE)0;
;;;534                 if (p_ts  != (CPU_TS *)0) {
;;;535                    *p_ts   =  OSTCBCurPtr->TS;
;;;536                 }
;;;537    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
;;;538                 TRACE_OS_Q_PEND_FAILED(p_q);                   /* Record the event.                                      */
;;;539    #endif
;;;540                *p_err      = OS_ERR_PEND_ABORT;
;;;541                 break;
;;;542    
;;;543            case OS_STATUS_PEND_TIMEOUT:                        /* Indicate that we didn't get event within TO            */
;;;544                 p_void     = (void      *)0;
;;;545                *p_msg_size = (OS_MSG_SIZE)0;
;;;546                 if (p_ts  != (CPU_TS *)0) {
;;;547                    *p_ts   = (CPU_TS  )0;
;;;548                 }
;;;549    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
;;;550                 TRACE_OS_Q_PEND_FAILED(p_q);                   /* Record the event.                                      */
;;;551    #endif
;;;552                *p_err      = OS_ERR_TIMEOUT;
;;;553                 break;
;;;554    
;;;555            case OS_STATUS_PEND_DEL:                            /* Indicate that object pended on has been deleted        */
;;;556                 p_void     = (void      *)0;
;;;557                *p_msg_size = (OS_MSG_SIZE)0;
;;;558                 if (p_ts  != (CPU_TS *)0) {
;;;559                    *p_ts   =  OSTCBCurPtr->TS;
;;;560                 }
;;;561    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
;;;562                 TRACE_OS_Q_PEND_FAILED(p_q);                   /* Record the event.                                      */
;;;563    #endif
;;;564                *p_err      = OS_ERR_OBJ_DEL;
;;;565                 break;
;;;566    
;;;567            default:
;;;568                 p_void     = (void      *)0;
;;;569                *p_msg_size = (OS_MSG_SIZE)0;
;;;570    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
;;;571                 TRACE_OS_Q_PEND_FAILED(p_q);                   /* Record the event.                                      */
;;;572    #endif
;;;573                *p_err      = OS_ERR_STATUS_INVALID;
;;;574                 break;
;;;575        }
;;;576        CPU_CRITICAL_EXIT();
;;;577        return (p_void);
;;;578    }
000020  b009              ADD      sp,sp,#0x24
000022  e8bd8ff0          POP      {r4-r11,pc}
                  |L4.38|
000026  b926              CBNZ     r6,|L4.50|
000028  f24620d5          MOV      r0,#0x62d5            ;444
00002c  8020              STRH     r0,[r4,#0]            ;444
00002e  2000              MOVS     r0,#0                 ;445
000030  e7f6              B        |L4.32|
                  |L4.50|
000032  f1b80f00          CMP      r8,#0                 ;447
000036  d003              BEQ      |L4.64|
000038  f5b84f00          CMP      r8,#0x8000            ;447
00003c  d102              BNE      |L4.68|
00003e  e000              B        |L4.66|
                  |L4.64|
000040  bf00              NOP                            ;449
                  |L4.66|
000042  e004              B        |L4.78|
                  |L4.68|
000044  f6456025          MOV      r0,#0x5e25            ;456
000048  8020              STRH     r0,[r4,#0]            ;456
00004a  2000              MOVS     r0,#0                 ;457
00004c  e7e8              B        |L4.32|
                  |L4.78|
00004e  bf00              NOP                            ;450
000050  4956              LDR      r1,|L4.428|
000052  6838              LDR      r0,[r7,#0]            ;462
000054  4288              CMP      r0,r1                 ;462
000056  d004              BEQ      |L4.98|
000058  f64550c4          MOV      r0,#0x5dc4            ;466
00005c  8020              STRH     r0,[r4,#0]            ;466
00005e  2000              MOVS     r0,#0                 ;467
000060  e7de              B        |L4.32|
                  |L4.98|
000062  b10d              CBZ      r5,|L4.104|
000064  2000              MOVS     r0,#0                 ;472
000066  6028              STR      r0,[r5,#0]            ;472
                  |L4.104|
000068  bf00              NOP                            ;475
00006a  bf00              NOP                            ;475
00006c  f7fffffe          BL       CPU_SR_Save
000070  4683              MOV      r11,r0                ;475
000072  bf00              NOP                            ;475
000074  bf00              NOP                            ;475
000076  4623              MOV      r3,r4                 ;476
000078  462a              MOV      r2,r5                 ;476
00007a  4631              MOV      r1,r6                 ;476
00007c  f1070020          ADD      r0,r7,#0x20           ;476
000080  f7fffffe          BL       OS_MsgQGet
000084  4682              MOV      r10,r0                ;476
000086  8820              LDRH     r0,[r4,#0]            ;480
000088  b940              CBNZ     r0,|L4.156|
00008a  bf00              NOP                            ;481
00008c  bf00              NOP                            ;481
00008e  4658              MOV      r0,r11                ;481
000090  f7fffffe          BL       CPU_SR_Restore
000094  bf00              NOP                            ;481
000096  bf00              NOP                            ;481
000098  4650              MOV      r0,r10                ;485
00009a  e7c1              B        |L4.32|
                  |L4.156|
00009c  f4084000          AND      r0,r8,#0x8000         ;488
0000a0  b158              CBZ      r0,|L4.186|
0000a2  bf00              NOP                            ;489
0000a4  bf00              NOP                            ;489
0000a6  4658              MOV      r0,r11                ;489
0000a8  f7fffffe          BL       CPU_SR_Restore
0000ac  bf00              NOP                            ;489
0000ae  bf00              NOP                            ;489
0000b0  f24610b0          MOV      r0,#0x61b0            ;493
0000b4  8020              STRH     r0,[r4,#0]            ;493
0000b6  2000              MOVS     r0,#0                 ;494
0000b8  e7b2              B        |L4.32|
                  |L4.186|
0000ba  483d              LDR      r0,|L4.432|
0000bc  7800              LDRB     r0,[r0,#0]            ;496  ; OSSchedLockNestingCtr
0000be  2800              CMP      r0,#0                 ;496
0000c0  dd0b              BLE      |L4.218|
0000c2  bf00              NOP                            ;497
0000c4  bf00              NOP                            ;497
0000c6  4658              MOV      r0,r11                ;497
0000c8  f7fffffe          BL       CPU_SR_Restore
0000cc  bf00              NOP                            ;497
0000ce  bf00              NOP                            ;497
0000d0  f6465063          MOV      r0,#0x6d63            ;501
0000d4  8020              STRH     r0,[r4,#0]            ;501
0000d6  2000              MOVS     r0,#0                 ;502
0000d8  e7a2              B        |L4.32|
                  |L4.218|
0000da  464b              MOV      r3,r9                 ;507
0000dc  2205              MOVS     r2,#5                 ;507
0000de  4639              MOV      r1,r7                 ;507
0000e0  a801              ADD      r0,sp,#4              ;507
0000e2  f7fffffe          BL       OS_Pend
0000e6  bf00              NOP                            ;511
0000e8  bf00              NOP                            ;511
0000ea  4658              MOV      r0,r11                ;511
0000ec  f7fffffe          BL       CPU_SR_Restore
0000f0  bf00              NOP                            ;511
0000f2  bf00              NOP                            ;511
0000f4  f7fffffe          BL       OSSched
0000f8  bf00              NOP                            ;517
0000fa  bf00              NOP                            ;517
0000fc  f7fffffe          BL       CPU_SR_Save
000100  4683              MOV      r11,r0                ;517
000102  bf00              NOP                            ;517
000104  bf00              NOP                            ;517
000106  482b              LDR      r0,|L4.436|
000108  6800              LDR      r0,[r0,#0]            ;518  ; OSTCBCurPtr
00010a  f8900035          LDRB     r0,[r0,#0x35]         ;518
00010e  b130              CBZ      r0,|L4.286|
000110  2801              CMP      r0,#1                 ;518
000112  d015              BEQ      |L4.320|
000114  2802              CMP      r0,#2                 ;518
000116  d02a              BEQ      |L4.366|
000118  2803              CMP      r0,#3                 ;518
00011a  d135              BNE      |L4.392|
00011c  e01d              B        |L4.346|
                  |L4.286|
00011e  4825              LDR      r0,|L4.436|
000120  6800              LDR      r0,[r0,#0]            ;520  ; OSTCBCurPtr
000122  f8d0a058          LDR      r10,[r0,#0x58]        ;520
000126  4823              LDR      r0,|L4.436|
000128  6800              LDR      r0,[r0,#0]            ;521  ; OSTCBCurPtr
00012a  f8b0005c          LDRH     r0,[r0,#0x5c]         ;521
00012e  8030              STRH     r0,[r6,#0]            ;521
000130  b11d              CBZ      r5,|L4.314|
000132  4820              LDR      r0,|L4.436|
000134  6800              LDR      r0,[r0,#0]            ;523  ; OSTCBCurPtr
000136  6c80              LDR      r0,[r0,#0x48]         ;523
000138  6028              STR      r0,[r5,#0]            ;523
                  |L4.314|
00013a  2000              MOVS     r0,#0                 ;528
00013c  8020              STRH     r0,[r4,#0]            ;528
00013e  e02b              B        |L4.408|
                  |L4.320|
000140  f04f0a00          MOV      r10,#0                ;532
000144  2000              MOVS     r0,#0                 ;533
000146  8030              STRH     r0,[r6,#0]            ;533
000148  b11d              CBZ      r5,|L4.338|
00014a  481a              LDR      r0,|L4.436|
00014c  6800              LDR      r0,[r0,#0]            ;535  ; OSTCBCurPtr
00014e  6c80              LDR      r0,[r0,#0x48]         ;535
000150  6028              STR      r0,[r5,#0]            ;535
                  |L4.338|
000152  f24610a9          MOV      r0,#0x61a9            ;540
000156  8020              STRH     r0,[r4,#0]            ;540
000158  e01e              B        |L4.408|
                  |L4.346|
00015a  f04f0a00          MOV      r10,#0                ;544
00015e  2000              MOVS     r0,#0                 ;545
000160  8030              STRH     r0,[r6,#0]            ;545
000162  b105              CBZ      r5,|L4.358|
000164  6028              STR      r0,[r5,#0]            ;547
                  |L4.358|
000166  f24720d9          MOV      r0,#0x72d9            ;552
00016a  8020              STRH     r0,[r4,#0]            ;552
00016c  e014              B        |L4.408|
                  |L4.366|
00016e  f04f0a00          MOV      r10,#0                ;556
000172  2000              MOVS     r0,#0                 ;557
000174  8030              STRH     r0,[r6,#0]            ;557
000176  b11d              CBZ      r5,|L4.384|
000178  480e              LDR      r0,|L4.436|
00017a  6800              LDR      r0,[r0,#0]            ;559  ; OSTCBCurPtr
00017c  6c80              LDR      r0,[r0,#0x48]         ;559
00017e  6028              STR      r0,[r5,#0]            ;559
                  |L4.384|
000180  f64550c2          MOV      r0,#0x5dc2            ;564
000184  8020              STRH     r0,[r4,#0]            ;564
000186  e007              B        |L4.408|
                  |L4.392|
000188  f04f0a00          MOV      r10,#0                ;568
00018c  2000              MOVS     r0,#0                 ;569
00018e  8030              STRH     r0,[r6,#0]            ;569
000190  f646602e          MOV      r0,#0x6e2e            ;573
000194  8020              STRH     r0,[r4,#0]            ;573
000196  bf00              NOP                            ;574
                  |L4.408|
000198  bf00              NOP                            ;529
00019a  bf00              NOP                            ;576
00019c  bf00              NOP                            ;576
00019e  4658              MOV      r0,r11                ;576
0001a0  f7fffffe          BL       CPU_SR_Restore
0001a4  bf00              NOP                            ;576
0001a6  bf00              NOP                            ;576
0001a8  4650              MOV      r0,r10                ;577
0001aa  e739              B        |L4.32|
;;;579    
                          ENDP

                  |L4.428|
                          DCD      0x55455551
                  |L4.432|
                          DCD      OSSchedLockNestingCtr
                  |L4.436|
                          DCD      OSTCBCurPtr

                          AREA ||i.OSQPendAbort||, CODE, READONLY, ALIGN=2

                  OSQPendAbort PROC
;;;612    #if OS_CFG_Q_PEND_ABORT_EN > 0u
;;;613    OS_OBJ_QTY  OSQPendAbort (OS_Q    *p_q,
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;614                              OS_OPT   opt,
;;;615                              OS_ERR  *p_err)
;;;616    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;617        OS_PEND_LIST  *p_pend_list;
;;;618        OS_TCB        *p_tcb;
;;;619        CPU_TS         ts;
;;;620        OS_OBJ_QTY     nbr_tasks;
;;;621        CPU_SR_ALLOC();
00000a  f04f0a00          MOV      r10,#0
;;;622    
;;;623    
;;;624    
;;;625    #ifdef OS_SAFETY_CRITICAL
;;;626        if (p_err == (OS_ERR *)0) {
;;;627            OS_SAFETY_CRITICAL_EXCEPTION();
;;;628            return ((OS_OBJ_QTY)0u);
;;;629        }
;;;630    #endif
;;;631    
;;;632    #if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
;;;633        if (OSIntNestingCtr > (OS_NESTING_CTR)0u) {             /* Not allowed to Pend Abort from an ISR                  */
;;;634           *p_err =  OS_ERR_PEND_ABORT_ISR;
;;;635            return ((OS_OBJ_QTY)0u);
;;;636        }
;;;637    #endif
;;;638    
;;;639    #if OS_CFG_ARG_CHK_EN > 0u
;;;640        if (p_q == (OS_Q *)0) {                                 /* Validate 'p_q'                                         */
00000e  b92d              CBNZ     r5,|L5.28|
;;;641           *p_err =  OS_ERR_OBJ_PTR_NULL;
000010  f64550c3          MOV      r0,#0x5dc3
000014  8020              STRH     r0,[r4,#0]
;;;642            return ((OS_OBJ_QTY)0u);
000016  2000              MOVS     r0,#0
                  |L5.24|
;;;643        }
;;;644        switch (opt) {                                          /* Validate 'opt'                                         */
;;;645            case OS_OPT_PEND_ABORT_1:
;;;646            case OS_OPT_PEND_ABORT_ALL:
;;;647            case OS_OPT_PEND_ABORT_1   | OS_OPT_POST_NO_SCHED:
;;;648            case OS_OPT_PEND_ABORT_ALL | OS_OPT_POST_NO_SCHED:
;;;649                 break;
;;;650    
;;;651            default:
;;;652                *p_err =  OS_ERR_OPT_INVALID;
;;;653                 return ((OS_OBJ_QTY)0u);
;;;654        }
;;;655    #endif
;;;656    
;;;657    #if OS_CFG_OBJ_TYPE_CHK_EN > 0u
;;;658        if (p_q->Type != OS_OBJ_TYPE_Q) {                       /* Make sure queue was created                            */
;;;659           *p_err =  OS_ERR_OBJ_TYPE;
;;;660            return ((OS_OBJ_QTY)0u);
;;;661        }
;;;662    #endif
;;;663    
;;;664        CPU_CRITICAL_ENTER();
;;;665        p_pend_list = &p_q->PendList;
;;;666        if (p_pend_list->NbrEntries == (OS_OBJ_QTY)0u) {        /* Any task waiting on queue?                             */
;;;667            CPU_CRITICAL_EXIT();                                /* No                                                     */
;;;668           *p_err =  OS_ERR_PEND_ABORT_NONE;
;;;669            return ((OS_OBJ_QTY)0u);
;;;670        }
;;;671    
;;;672        OS_CRITICAL_ENTER_CPU_EXIT();
;;;673        nbr_tasks = 0u;
;;;674        ts        = OS_TS_GET();                                /* Get local time stamp so all tasks get the same time    */
;;;675        while (p_pend_list->NbrEntries > (OS_OBJ_QTY)0u) {
;;;676            p_tcb = p_pend_list->HeadPtr->TCBPtr;
;;;677            OS_PendAbort((OS_PEND_OBJ *)((void *)p_q),
;;;678                         p_tcb,
;;;679                         ts);
;;;680            nbr_tasks++;
;;;681            if (opt != OS_OPT_PEND_ABORT_ALL) {                 /* Pend abort all tasks waiting?                          */
;;;682                break;                                          /* No                                                     */
;;;683            }
;;;684        }
;;;685        OS_CRITICAL_EXIT_NO_SCHED();
;;;686    
;;;687        if ((opt & OS_OPT_POST_NO_SCHED) == (OS_OPT)0u) {
;;;688            OSSched();                                          /* Run the scheduler                                      */
;;;689        }
;;;690    
;;;691       *p_err = OS_ERR_NONE;
;;;692        return (nbr_tasks);
;;;693    }
000018  e8bd9ff0          POP      {r4-r12,pc}
                  |L5.28|
00001c  b14e              CBZ      r6,|L5.50|
00001e  f5b67f80          CMP      r6,#0x100             ;644
000022  d007              BEQ      |L5.52|
000024  f5b64f00          CMP      r6,#0x8000            ;644
000028  d005              BEQ      |L5.54|
00002a  f5b64f01          CMP      r6,#0x8100            ;644
00002e  d104              BNE      |L5.58|
000030  e002              B        |L5.56|
                  |L5.50|
000032  bf00              NOP                            ;646
                  |L5.52|
000034  bf00              NOP                            ;647
                  |L5.54|
000036  bf00              NOP                            ;648
                  |L5.56|
000038  e004              B        |L5.68|
                  |L5.58|
00003a  f6456025          MOV      r0,#0x5e25            ;652
00003e  8020              STRH     r0,[r4,#0]            ;652
000040  2000              MOVS     r0,#0                 ;653
000042  e7e9              B        |L5.24|
                  |L5.68|
000044  bf00              NOP                            ;649
000046  4925              LDR      r1,|L5.220|
000048  6828              LDR      r0,[r5,#0]            ;658
00004a  4288              CMP      r0,r1                 ;658
00004c  d004              BEQ      |L5.88|
00004e  f64550c4          MOV      r0,#0x5dc4            ;659
000052  8020              STRH     r0,[r4,#0]            ;659
000054  2000              MOVS     r0,#0                 ;660
000056  e7df              B        |L5.24|
                  |L5.88|
000058  bf00              NOP                            ;664
00005a  bf00              NOP                            ;664
00005c  f7fffffe          BL       CPU_SR_Save
000060  4682              MOV      r10,r0                ;664
000062  bf00              NOP                            ;664
000064  bf00              NOP                            ;664
000066  f1050708          ADD      r7,r5,#8              ;665
00006a  8938              LDRH     r0,[r7,#8]            ;666
00006c  b958              CBNZ     r0,|L5.134|
00006e  bf00              NOP                            ;667
000070  bf00              NOP                            ;667
000072  4650              MOV      r0,r10                ;667
000074  f7fffffe          BL       CPU_SR_Restore
000078  bf00              NOP                            ;667
00007a  bf00              NOP                            ;667
00007c  f24610ab          MOV      r0,#0x61ab            ;668
000080  8020              STRH     r0,[r4,#0]            ;668
000082  2000              MOVS     r0,#0                 ;669
000084  e7c8              B        |L5.24|
                  |L5.134|
000086  f04f0800          MOV      r8,#0                 ;673
00008a  f7fffffe          BL       CPU_TS_TmrRd
00008e  4683              MOV      r11,r0                ;674
000090  e00f              B        |L5.178|
                  |L5.146|
000092  6838              LDR      r0,[r7,#0]            ;676
000094  f8d09008          LDR      r9,[r0,#8]            ;676
000098  465a              MOV      r2,r11                ;677
00009a  4649              MOV      r1,r9                 ;677
00009c  4628              MOV      r0,r5                 ;677
00009e  f7fffffe          BL       OS_PendAbort
0000a2  f1080001          ADD      r0,r8,#1              ;680
0000a6  fa1ff880          UXTH     r8,r0                 ;680
0000aa  f5b67f80          CMP      r6,#0x100             ;681
0000ae  d000              BEQ      |L5.178|
0000b0  e002              B        |L5.184|
                  |L5.178|
0000b2  8938              LDRH     r0,[r7,#8]            ;675
0000b4  2800              CMP      r0,#0                 ;675
0000b6  dcec              BGT      |L5.146|
                  |L5.184|
0000b8  bf00              NOP                            ;682
0000ba  bf00              NOP                            ;685
0000bc  bf00              NOP                            ;685
0000be  4650              MOV      r0,r10                ;685
0000c0  f7fffffe          BL       CPU_SR_Restore
0000c4  bf00              NOP                            ;685
0000c6  bf00              NOP                            ;685
0000c8  f4064000          AND      r0,r6,#0x8000         ;687
0000cc  b908              CBNZ     r0,|L5.210|
0000ce  f7fffffe          BL       OSSched
                  |L5.210|
0000d2  2000              MOVS     r0,#0                 ;691
0000d4  8020              STRH     r0,[r4,#0]            ;691
0000d6  4640              MOV      r0,r8                 ;692
0000d8  e79e              B        |L5.24|
;;;694    #endif
                          ENDP

0000da  0000              DCW      0x0000
                  |L5.220|
                          DCD      0x55455551

                          AREA ||i.OSQPost||, CODE, READONLY, ALIGN=2

                  OSQPost PROC
;;;745    
;;;746    void  OSQPost (OS_Q         *p_q,
000000  e92d47fc          PUSH     {r2-r10,lr}
;;;747                   void         *p_void,
;;;748                   OS_MSG_SIZE   msg_size,
;;;749                   OS_OPT        opt,
;;;750                   OS_ERR       *p_err)
;;;751    {
000004  4605              MOV      r5,r0
000006  4688              MOV      r8,r1
000008  4691              MOV      r9,r2
00000a  461e              MOV      r6,r3
00000c  9c0a              LDR      r4,[sp,#0x28]
;;;752        CPU_TS  ts;
;;;753    
;;;754    
;;;755    
;;;756    #ifdef OS_SAFETY_CRITICAL
;;;757        if (p_err == (OS_ERR *)0) {
;;;758    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
;;;759            TRACE_OS_Q_POST_FAILED(p_q);                        /* Record the event.                                      */
;;;760    #endif
;;;761            OS_SAFETY_CRITICAL_EXCEPTION();
;;;762            return;
;;;763        }
;;;764    #endif
;;;765    
;;;766    #if OS_CFG_ARG_CHK_EN > 0u
;;;767        if (p_q == (OS_Q *)0) {                                 /* Validate 'p_q'                                         */
00000e  b925              CBNZ     r5,|L6.26|
;;;768    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
;;;769            TRACE_OS_Q_POST_FAILED(p_q);                        /* Record the event.                                      */
;;;770    #endif
;;;771           *p_err = OS_ERR_OBJ_PTR_NULL;
000010  f64550c3          MOV      r0,#0x5dc3
000014  8020              STRH     r0,[r4,#0]
                  |L6.22|
;;;772            return;
;;;773        }
;;;774        switch (opt) {                                          /* Validate 'opt'                                         */
;;;775            case OS_OPT_POST_FIFO:
;;;776            case OS_OPT_POST_LIFO:
;;;777            case OS_OPT_POST_FIFO | OS_OPT_POST_ALL:
;;;778            case OS_OPT_POST_LIFO | OS_OPT_POST_ALL:
;;;779            case OS_OPT_POST_FIFO | OS_OPT_POST_NO_SCHED:
;;;780            case OS_OPT_POST_LIFO | OS_OPT_POST_NO_SCHED:
;;;781            case OS_OPT_POST_FIFO | OS_OPT_POST_ALL | OS_OPT_POST_NO_SCHED:
;;;782            case OS_OPT_POST_LIFO | OS_OPT_POST_ALL | OS_OPT_POST_NO_SCHED:
;;;783                 break;
;;;784    
;;;785            default:
;;;786    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
;;;787                 TRACE_OS_Q_POST_FAILED(p_q);                   /* Record the event.                                      */
;;;788    #endif
;;;789                *p_err =  OS_ERR_OPT_INVALID;
;;;790                 return;
;;;791        }
;;;792    #endif
;;;793    
;;;794    #if OS_CFG_OBJ_TYPE_CHK_EN > 0u
;;;795        if (p_q->Type != OS_OBJ_TYPE_Q) {                       /* Make sure message queue was created                    */
;;;796    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
;;;797            TRACE_OS_Q_POST_FAILED(p_q);                        /* Record the event.                                      */
;;;798    #endif
;;;799           *p_err = OS_ERR_OBJ_TYPE;
;;;800            return;
;;;801        }
;;;802    #endif
;;;803    
;;;804        ts = OS_TS_GET();                                       /* Get timestamp                                          */
;;;805    
;;;806    #if OS_CFG_ISR_POST_DEFERRED_EN > 0u
;;;807        if (OSIntNestingCtr > (OS_NESTING_CTR)0) {
;;;808            OS_IntQPost((OS_OBJ_TYPE)OS_OBJ_TYPE_Q,             /* Post to ISR queue                                      */
;;;809                        (void      *)p_q,
;;;810                        (void      *)p_void,
;;;811                        (OS_MSG_SIZE)msg_size,
;;;812                        (OS_FLAGS   )0,
;;;813                        (OS_OPT     )opt,
;;;814                        (CPU_TS     )ts,
;;;815                        (OS_ERR    *)p_err);
;;;816            return;
;;;817        }
;;;818    #endif
;;;819    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
;;;820        TRACE_OS_Q_POST(p_q);                                   /* Record the event.                                      */
;;;821    #endif
;;;822        OS_QPost(p_q,
;;;823                 p_void,
;;;824                 msg_size,
;;;825                 opt,
;;;826                 ts,
;;;827                 p_err);
;;;828    }
000016  e8bd87fc          POP      {r2-r10,pc}
                  |L6.26|
00001a  f5b64f00          CMP      r6,#0x8000            ;774
00001e  d019              BEQ      |L6.84|
000020  dc09              BGT      |L6.54|
000022  b19e              CBZ      r6,|L6.76|
000024  2e10              CMP      r6,#0x10              ;774
000026  d012              BEQ      |L6.78|
000028  f5b67f00          CMP      r6,#0x200             ;774
00002c  d010              BEQ      |L6.80|
00002e  f5b67f04          CMP      r6,#0x210             ;774
000032  d113              BNE      |L6.92|
000034  e00d              B        |L6.82|
                  |L6.54|
000036  f5a64000          SUB      r0,r6,#0x8000         ;774
00003a  3810              SUBS     r0,r0,#0x10           ;774
00003c  b158              CBZ      r0,|L6.86|
00003e  f5b07ff8          CMP      r0,#0x1f0             ;774
000042  d009              BEQ      |L6.88|
000044  f5b07f00          CMP      r0,#0x200             ;774
000048  d108              BNE      |L6.92|
00004a  e006              B        |L6.90|
                  |L6.76|
00004c  bf00              NOP                            ;776
                  |L6.78|
00004e  bf00              NOP                            ;777
                  |L6.80|
000050  bf00              NOP                            ;778
                  |L6.82|
000052  bf00              NOP                            ;779
                  |L6.84|
000054  bf00              NOP                            ;780
                  |L6.86|
000056  bf00              NOP                            ;781
                  |L6.88|
000058  bf00              NOP                            ;782
                  |L6.90|
00005a  e003              B        |L6.100|
                  |L6.92|
00005c  f6456025          MOV      r0,#0x5e25            ;789
000060  8020              STRH     r0,[r4,#0]            ;789
000062  e7d8              B        |L6.22|
                  |L6.100|
000064  bf00              NOP                            ;783
000066  490a              LDR      r1,|L6.144|
000068  6828              LDR      r0,[r5,#0]            ;795
00006a  4288              CMP      r0,r1                 ;795
00006c  d003              BEQ      |L6.118|
00006e  f64550c4          MOV      r0,#0x5dc4            ;799
000072  8020              STRH     r0,[r4,#0]            ;799
000074  e7cf              B        |L6.22|
                  |L6.118|
000076  f7fffffe          BL       CPU_TS_TmrRd
00007a  4607              MOV      r7,r0                 ;804
00007c  4633              MOV      r3,r6                 ;822
00007e  464a              MOV      r2,r9                 ;822
000080  4641              MOV      r1,r8                 ;822
000082  4628              MOV      r0,r5                 ;822
000084  e9cd7400          STRD     r7,r4,[sp,#0]         ;822
000088  f7fffffe          BL       OS_QPost
00008c  bf00              NOP      
00008e  e7c2              B        |L6.22|
;;;829    
                          ENDP

                  |L6.144|
                          DCD      0x55455551

                          AREA ||i.OS_QClr||, CODE, READONLY, ALIGN=2

                  OS_QClr PROC
;;;846    
;;;847    void  OS_QClr (OS_Q  *p_q)
000000  b510              PUSH     {r4,lr}
;;;848    {
000002  4604              MOV      r4,r0
;;;849        (void)OS_MsgQFreeAll(&p_q->MsgQ);                       /* Return all OS_MSGs to the free list                    */
000004  f1040020          ADD      r0,r4,#0x20
000008  f7fffffe          BL       OS_MsgQFreeAll
;;;850    #if OS_OBJ_TYPE_REQ > 0u
;;;851        p_q->Type    =  OS_OBJ_TYPE_NONE;                       /* Mark the data structure as a NONE                      */
00000c  4806              LDR      r0,|L7.40|
00000e  6020              STR      r0,[r4,#0]
;;;852    #endif
;;;853    #if OS_CFG_DBG_EN > 0u
;;;854        p_q->NamePtr = (CPU_CHAR *)((void *)"?Q");
000010  a006              ADR      r0,|L7.44|
000012  6060              STR      r0,[r4,#4]
;;;855    #endif
;;;856        OS_MsgQInit(&p_q->MsgQ,                                 /* Initialize the list of OS_MSGs                         */
000014  2100              MOVS     r1,#0
000016  f1040020          ADD      r0,r4,#0x20
00001a  f7fffffe          BL       OS_MsgQInit
;;;857                    0u);
;;;858        OS_PendListInit(&p_q->PendList);                        /* Initialize the waiting list                            */
00001e  f1040008          ADD      r0,r4,#8
000022  f7fffffe          BL       OS_PendListInit
;;;859    }
000026  bd10              POP      {r4,pc}
;;;860    
                          ENDP

                  |L7.40|
                          DCD      0x454e4f4e
                  |L7.44|
00002c  3f5100            DCB      "?Q",0
00002f  00                DCB      0

                          AREA ||i.OS_QDbgListAdd||, CODE, READONLY, ALIGN=2

                  OS_QDbgListAdd PROC
;;;878    #if OS_CFG_DBG_EN > 0u
;;;879    void  OS_QDbgListAdd (OS_Q  *p_q)
000000  a109              ADR      r1,|L8.40|
;;;880    {
;;;881        p_q->DbgNamePtr               = (CPU_CHAR *)((void *)" ");
000002  61c1              STR      r1,[r0,#0x1c]
;;;882        p_q->DbgPrevPtr               = (OS_Q     *)0;
000004  2100              MOVS     r1,#0
000006  6141              STR      r1,[r0,#0x14]
;;;883        if (OSQDbgListPtr == (OS_Q *)0) {
000008  4908              LDR      r1,|L8.44|
00000a  6809              LDR      r1,[r1,#0]  ; OSQDbgListPtr
00000c  b911              CBNZ     r1,|L8.20|
;;;884            p_q->DbgNextPtr           = (OS_Q     *)0;
00000e  2100              MOVS     r1,#0
000010  6181              STR      r1,[r0,#0x18]
000012  e005              B        |L8.32|
                  |L8.20|
;;;885        } else {
;;;886            p_q->DbgNextPtr           =  OSQDbgListPtr;
000014  4905              LDR      r1,|L8.44|
000016  6809              LDR      r1,[r1,#0]  ; OSQDbgListPtr
000018  6181              STR      r1,[r0,#0x18]
;;;887            OSQDbgListPtr->DbgPrevPtr =  p_q;
00001a  4904              LDR      r1,|L8.44|
00001c  6809              LDR      r1,[r1,#0]  ; OSQDbgListPtr
00001e  6148              STR      r0,[r1,#0x14]
                  |L8.32|
;;;888        }
;;;889        OSQDbgListPtr                 =  p_q;
000020  4902              LDR      r1,|L8.44|
000022  6008              STR      r0,[r1,#0]  ; OSQDbgListPtr
;;;890    }
000024  4770              BX       lr
;;;891    
                          ENDP

000026  0000              DCW      0x0000
                  |L8.40|
000028  2000              DCB      " ",0
00002a  00                DCB      0
00002b  00                DCB      0
                  |L8.44|
                          DCD      OSQDbgListPtr

                          AREA ||i.OS_QDbgListRemove||, CODE, READONLY, ALIGN=2

                  OS_QDbgListRemove PROC
;;;893    
;;;894    void  OS_QDbgListRemove (OS_Q  *p_q)
000000  6942              LDR      r2,[r0,#0x14]
;;;895    {
;;;896        OS_Q  *p_q_next;
;;;897        OS_Q  *p_q_prev;
;;;898    
;;;899    
;;;900        p_q_prev = p_q->DbgPrevPtr;
;;;901        p_q_next = p_q->DbgNextPtr;
000002  6981              LDR      r1,[r0,#0x18]
;;;902    
;;;903        if (p_q_prev == (OS_Q *)0) {
000004  b93a              CBNZ     r2,|L9.22|
;;;904            OSQDbgListPtr = p_q_next;
000006  4b09              LDR      r3,|L9.44|
000008  6019              STR      r1,[r3,#0]  ; OSQDbgListPtr
;;;905            if (p_q_next != (OS_Q *)0) {
00000a  b109              CBZ      r1,|L9.16|
;;;906                p_q_next->DbgPrevPtr = (OS_Q *)0;
00000c  2300              MOVS     r3,#0
00000e  614b              STR      r3,[r1,#0x14]
                  |L9.16|
;;;907            }
;;;908            p_q->DbgNextPtr = (OS_Q *)0;
000010  2300              MOVS     r3,#0
000012  6183              STR      r3,[r0,#0x18]
000014  e009              B        |L9.42|
                  |L9.22|
;;;909    
;;;910        } else if (p_q_next == (OS_Q *)0) {
000016  b919              CBNZ     r1,|L9.32|
;;;911            p_q_prev->DbgNextPtr = (OS_Q *)0;
000018  2300              MOVS     r3,#0
00001a  6193              STR      r3,[r2,#0x18]
;;;912            p_q->DbgPrevPtr      = (OS_Q *)0;
00001c  6143              STR      r3,[r0,#0x14]
00001e  e004              B        |L9.42|
                  |L9.32|
;;;913    
;;;914        } else {
;;;915            p_q_prev->DbgNextPtr =  p_q_next;
000020  6191              STR      r1,[r2,#0x18]
;;;916            p_q_next->DbgPrevPtr =  p_q_prev;
000022  614a              STR      r2,[r1,#0x14]
;;;917            p_q->DbgNextPtr      = (OS_Q *)0;
000024  2300              MOVS     r3,#0
000026  6183              STR      r3,[r0,#0x18]
;;;918            p_q->DbgPrevPtr      = (OS_Q *)0;
000028  6143              STR      r3,[r0,#0x14]
                  |L9.42|
;;;919        }
;;;920    }
00002a  4770              BX       lr
;;;921    #endif
                          ENDP

                  |L9.44|
                          DCD      OSQDbgListPtr

                          AREA ||i.OS_QInit||, CODE, READONLY, ALIGN=2

                  OS_QInit PROC
;;;940    
;;;941    void  OS_QInit (OS_ERR  *p_err)
000000  2100              MOVS     r1,#0
;;;942    {
;;;943    #ifdef OS_SAFETY_CRITICAL
;;;944        if (p_err == (OS_ERR *)0) {
;;;945            OS_SAFETY_CRITICAL_EXCEPTION();
;;;946            return;
;;;947        }
;;;948    #endif
;;;949    
;;;950    #if OS_CFG_DBG_EN > 0u
;;;951        OSQDbgListPtr = (OS_Q *)0;
000002  4a03              LDR      r2,|L10.16|
000004  6011              STR      r1,[r2,#0]  ; OSQDbgListPtr
;;;952    #endif
;;;953    
;;;954        OSQQty        = (OS_OBJ_QTY)0;
000006  4a03              LDR      r2,|L10.20|
000008  8011              STRH     r1,[r2,#0]
;;;955       *p_err         = OS_ERR_NONE;
00000a  8001              STRH     r1,[r0,#0]
;;;956    }
00000c  4770              BX       lr
;;;957    
                          ENDP

00000e  0000              DCW      0x0000
                  |L10.16|
                          DCD      OSQDbgListPtr
                  |L10.20|
                          DCD      OSQQty

                          AREA ||i.OS_QPost||, CODE, READONLY, ALIGN=1

                  OS_QPost PROC
;;;997    
;;;998    void  OS_QPost (OS_Q         *p_q,
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;999                    void         *p_void,
;;;1000                   OS_MSG_SIZE   msg_size,
;;;1001                   OS_OPT        opt,
;;;1002                   CPU_TS        ts,
;;;1003                   OS_ERR       *p_err)
;;;1004   {
000004  b085              SUB      sp,sp,#0x14
000006  4607              MOV      r7,r0
000008  468a              MOV      r10,r1
00000a  4693              MOV      r11,r2
00000c  461c              MOV      r4,r3
;;;1005       OS_OBJ_QTY     cnt;
;;;1006       OS_OPT         post_type;
;;;1007       OS_PEND_LIST  *p_pend_list;
;;;1008       OS_PEND_DATA  *p_pend_data;
;;;1009       OS_PEND_DATA  *p_pend_data_next;
;;;1010       OS_TCB        *p_tcb;
;;;1011       CPU_SR_ALLOC();
00000e  2000              MOVS     r0,#0
000010  9002              STR      r0,[sp,#8]
;;;1012   
;;;1013   
;;;1014   
;;;1015       OS_CRITICAL_ENTER();
000012  bf00              NOP      
000014  bf00              NOP      
000016  f7fffffe          BL       CPU_SR_Save
00001a  9002              STR      r0,[sp,#8]
00001c  bf00              NOP      
00001e  bf00              NOP      
;;;1016       p_pend_list = &p_q->PendList;
000020  f1070608          ADD      r6,r7,#8
;;;1017       if (p_pend_list->NbrEntries == (OS_OBJ_QTY)0) {         /* Any task waiting on message queue?                     */
000024  8930              LDRH     r0,[r6,#8]
000026  b9e0              CBNZ     r0,|L11.98|
;;;1018           if ((opt & OS_OPT_POST_LIFO) == (OS_OPT)0) {        /* Determine whether we post FIFO or LIFO                 */
000028  f0040010          AND      r0,r4,#0x10
00002c  b910              CBNZ     r0,|L11.52|
;;;1019               post_type = OS_OPT_POST_FIFO;
00002e  f04f0800          MOV      r8,#0
000032  e001              B        |L11.56|
                  |L11.52|
;;;1020           } else {
;;;1021               post_type = OS_OPT_POST_LIFO;
000034  f04f0810          MOV      r8,#0x10
                  |L11.56|
;;;1022           }
;;;1023           OS_MsgQPut(&p_q->MsgQ,                              /* Place message in the message queue                     */
000038  e9dd010e          LDRD     r0,r1,[sp,#0x38]
00003c  4643              MOV      r3,r8
00003e  465a              MOV      r2,r11
000040  e9cd0100          STRD     r0,r1,[sp,#0]
000044  4651              MOV      r1,r10
000046  f1070020          ADD      r0,r7,#0x20
00004a  f7fffffe          BL       OS_MsgQPut
;;;1024                      p_void,
;;;1025                      msg_size,
;;;1026                      post_type,
;;;1027                      ts,
;;;1028                      p_err);
;;;1029           OS_CRITICAL_EXIT();
00004e  bf00              NOP      
000050  bf00              NOP      
000052  9802              LDR      r0,[sp,#8]
000054  f7fffffe          BL       CPU_SR_Restore
000058  bf00              NOP      
00005a  bf00              NOP      
                  |L11.92|
;;;1030           return;
;;;1031       }
;;;1032   
;;;1033       if ((opt & OS_OPT_POST_ALL) != (OS_OPT)0) {             /* Post message to all tasks waiting?                     */
;;;1034           cnt = p_pend_list->NbrEntries;                      /* Yes                                                    */
;;;1035       } else {
;;;1036           cnt = (OS_OBJ_QTY)1;                                /* No                                                     */
;;;1037       }
;;;1038       p_pend_data = p_pend_list->HeadPtr;
;;;1039       while (cnt > 0u) {
;;;1040           p_tcb            = p_pend_data->TCBPtr;
;;;1041           p_pend_data_next = p_pend_data->NextPtr;
;;;1042           OS_Post((OS_PEND_OBJ *)((void *)p_q),
;;;1043                   p_tcb,
;;;1044                   p_void,
;;;1045                   msg_size,
;;;1046                   ts);
;;;1047           p_pend_data = p_pend_data_next;
;;;1048           cnt--;
;;;1049       }
;;;1050       OS_CRITICAL_EXIT_NO_SCHED();
;;;1051       if ((opt & OS_OPT_POST_NO_SCHED) == (OS_OPT)0) {
;;;1052           OSSched();                                          /* Run the scheduler                                      */
;;;1053       }
;;;1054      *p_err = OS_ERR_NONE;
;;;1055   }
00005c  b005              ADD      sp,sp,#0x14
00005e  e8bd8ff0          POP      {r4-r11,pc}
                  |L11.98|
000062  f4047000          AND      r0,r4,#0x200          ;1033
000066  b108              CBZ      r0,|L11.108|
000068  8935              LDRH     r5,[r6,#8]            ;1034
00006a  e000              B        |L11.110|
                  |L11.108|
00006c  2501              MOVS     r5,#1                 ;1036
                  |L11.110|
00006e  f8d69000          LDR      r9,[r6,#0]            ;1038
000072  e011              B        |L11.152|
                  |L11.116|
000074  f8d90008          LDR      r0,[r9,#8]            ;1040
000078  9003              STR      r0,[sp,#0xc]          ;1040
00007a  f8d90004          LDR      r0,[r9,#4]            ;1041
00007e  9004              STR      r0,[sp,#0x10]         ;1041
000080  980e              LDR      r0,[sp,#0x38]         ;1042
000082  465b              MOV      r3,r11                ;1042
000084  4652              MOV      r2,r10                ;1042
000086  9000              STR      r0,[sp,#0]            ;1042
000088  4638              MOV      r0,r7                 ;1042
00008a  9903              LDR      r1,[sp,#0xc]          ;1042
00008c  f7fffffe          BL       OS_Post
000090  f8dd9010          LDR      r9,[sp,#0x10]         ;1047
000094  1e68              SUBS     r0,r5,#1              ;1048
000096  b285              UXTH     r5,r0                 ;1048
                  |L11.152|
000098  2d00              CMP      r5,#0                 ;1039
00009a  d1eb              BNE      |L11.116|
00009c  bf00              NOP                            ;1050
00009e  bf00              NOP                            ;1050
0000a0  9802              LDR      r0,[sp,#8]            ;1050
0000a2  f7fffffe          BL       CPU_SR_Restore
0000a6  bf00              NOP                            ;1050
0000a8  bf00              NOP                            ;1050
0000aa  f4044000          AND      r0,r4,#0x8000         ;1051
0000ae  b908              CBNZ     r0,|L11.180|
0000b0  f7fffffe          BL       OSSched
                  |L11.180|
0000b4  2100              MOVS     r1,#0                 ;1054
0000b6  980f              LDR      r0,[sp,#0x3c]         ;1054
0000b8  8001              STRH     r1,[r0,#0]            ;1054
0000ba  bf00              NOP      
0000bc  e7ce              B        |L11.92|
;;;1056   
                          ENDP

