; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\app.o --asm_dir=.\Lst\ --list_dir=.\Lst\ --depend=.\obj\app.d --cpu=Cortex-M4.fp --apcs=interwork -O0 -I..\..\..\CMSIS\4.5.0\CMSIS\Include -I..\APP -I..\APP\ST -I..\APP\uCOS -I..\..\BSP\KeilMDK -I..\..\BSP\Board\inc -I..\..\BSP\STM32F4xx\inc -I..\..\BSP\Xlong\inc -I..\..\..\uCOS\uC-CPU -I..\..\..\uCOS\uC-CPU\Ports\ARM-Cortex-M4 -I..\..\..\uCOS\uC-LIB -I..\..\..\uCOS\uC-LIB\Ports\ARM-Cortex-M4 -I..\..\..\uCOS\uCOS-III\Source -I..\..\..\uCOS\uCOS-III\Ports\ARM-Cortex-M4 -IC:\Users\V200\Desktop\XLong\XLong\OS\KeilMDKPrj\RTE -Id:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\1.0.8\Device\Include -Id:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -DSTM32F427_437xx -DSTM32F427_437xx -DUSE_STDPERIPH_DRIVER --omf_browse=.\obj\app.crf ..\APP\app.c]
                          THUMB

                          AREA ||i.AppObjCreate||, CODE, READONLY, ALIGN=1

                  AppObjCreate PROC
;;;232    
;;;233    static  void  AppObjCreate (void)
000000  4770              BX       lr
;;;234    {
;;;235    
;;;236    }
;;;237    
                          ENDP


                          AREA ||i.AppTaskCreate||, CODE, READONLY, ALIGN=2

                  AppTaskCreate PROC
;;;195    
;;;196    static  void  AppTaskCreate (void)
000000  b500              PUSH     {lr}
;;;197    {
000002  b08b              SUB      sp,sp,#0x2c
;;;198        OS_ERR  os_err;
;;;199        
;;;200                                                                    /* ------------- CREATE FLOATING POINT TASK ----------- */
;;;201        OSTaskCreate((OS_TCB      *)&App_TaskEq0FpTCB,
000004  a80a              ADD      r0,sp,#0x28
000006  2107              MOVS     r1,#7
000008  2200              MOVS     r2,#0
00000a  9205              STR      r2,[sp,#0x14]
00000c  e9cd2106          STRD     r2,r1,[sp,#0x18]
000010  9008              STR      r0,[sp,#0x20]
000012  4611              MOV      r1,r2
000014  f44f7200          MOV      r2,#0x200
000018  4808              LDR      r0,|L2.60|
00001a  f8d000cc          LDR      r0,[r0,#0xcc]  ; App_TaskEq0FpStk
00001e  4b07              LDR      r3,|L2.60|
000020  e9cd3001          STRD     r3,r0,[sp,#4]
000024  e9cd2103          STRD     r2,r1,[sp,#0xc]
000028  2004              MOVS     r0,#4
00002a  2300              MOVS     r3,#0
00002c  4a04              LDR      r2,|L2.64|
00002e  a105              ADR      r1,|L2.68|
000030  9000              STR      r0,[sp,#0]
000032  4808              LDR      r0,|L2.84|
000034  f7fffffe          BL       OSTaskCreate
;;;202                     (CPU_CHAR    *)"FP  Equation 1",
;;;203                     (OS_TASK_PTR  ) App_TaskEq0Fp, 
;;;204                     (void        *) 0,
;;;205                     (OS_PRIO      ) APP_CFG_TASK_EQ_PRIO,
;;;206                     (CPU_STK     *)&App_TaskEq0FpStk[0],
;;;207                     (CPU_STK_SIZE ) App_TaskEq0FpStk[APP_CFG_TASK_EQ_STK_SIZE / 10u],
;;;208                     (CPU_STK_SIZE ) APP_CFG_TASK_EQ_STK_SIZE,
;;;209                     (OS_MSG_QTY   ) 0u,
;;;210                     (OS_TICK      ) 0u,
;;;211                     (void        *) 0,
;;;212                     (OS_OPT       )(OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR | OS_OPT_TASK_SAVE_FP),
;;;213                     (OS_ERR      *)&os_err);
;;;214    }
000038  b00b              ADD      sp,sp,#0x2c
00003a  bd00              POP      {pc}
;;;215    
                          ENDP

                  |L2.60|
                          DCD      App_TaskEq0FpStk
                  |L2.64|
                          DCD      App_TaskEq0Fp
                  |L2.68|
000044  46502020          DCB      "FP  Equation 1",0
000048  45717561
00004c  74696f6e
000050  203100  
000053  00                DCB      0
                  |L2.84|
                          DCD      App_TaskEq0FpTCB

                          AREA ||i.AppTaskStart||, CODE, READONLY, ALIGN=1

                  AppTaskStart PROC
;;;136    
;;;137    static  void  AppTaskStart (void *p_arg)
000000  b50e              PUSH     {r1-r3,lr}
;;;138    {
;;;139        OS_ERR  err;
;;;140    
;;;141       (void)p_arg;
;;;142    
;;;143        BSP_Init();                                                 /* Initialize BSP functions 时钟                        */
000002  f7fffffe          BL       BSP_Init
;;;144        BSP_XLong_IOAllocate();                                     /* 初始化XLong端口，使能片上外设                          */
000006  f7fffffe          BL       BSP_XLong_IOAllocate
;;;145    	BSP_XLong_PWMInit();
00000a  f7fffffe          BL       BSP_XLong_PWMInit
;;;146        BSP_Tick_Init();                                            /* Initialize Tick Services.                            */
00000e  f7fffffe          BL       BSP_Tick_Init
;;;147    
;;;148    
;;;149    
;;;150    #if OS_CFG_STAT_TASK_EN > 0u
;;;151        OSStatTaskCPUUsageInit(&err);                               /* Compute CPU capacity with no task running            */
000012  a802              ADD      r0,sp,#8
000014  f7fffffe          BL       OSStatTaskCPUUsageInit
;;;152    #endif
;;;153    
;;;154    #ifdef CPU_CFG_INT_DIS_MEAS_EN
;;;155        CPU_IntDisMeasMaxCurReset();
;;;156    #endif
;;;157    
;;;158    
;;;159        APP_TRACE_DBG(("Creating Application Kernel Objects\n\r"));
;;;160        AppObjCreate();                                             /* Create Applicaiton kernel objects                    */
000018  f7fffffe          BL       AppObjCreate
;;;161    
;;;162        APP_TRACE_DBG(("Creating Application Tasks\n\r"));
;;;163        AppTaskCreate();                                            /* Create Application tasks                             */
00001c  f7fffffe          BL       AppTaskCreate
;;;164    
;;;165    
;;;166        while (DEF_TRUE) {                                          /* Task body, always written as an infinite loop.       */
000020  e017              B        |L3.82|
                  |L3.34|
;;;167    
;;;168            BSP_LEDBlue_Toggle;
000022  2000              MOVS     r0,#0
000024  f7fffffe          BL       BSP_LED_Toggle
;;;169            OSTimeDlyHMSM(0u, 0u, 0u, 100u,
000028  a802              ADD      r0,sp,#8
00002a  2100              MOVS     r1,#0
00002c  2364              MOVS     r3,#0x64
00002e  460a              MOV      r2,r1
000030  e9cd1000          STRD     r1,r0,[sp,#0]
000034  4608              MOV      r0,r1
000036  f7fffffe          BL       OSTimeDlyHMSM
;;;170                          OS_OPT_TIME_HMSM_STRICT,
;;;171                          &err);
;;;172            BSP_LEDRed_Toggle;
00003a  2001              MOVS     r0,#1
00003c  f7fffffe          BL       BSP_LED_Toggle
;;;173            OSTimeDlyHMSM(0u, 0u, 0u, 100u,
000040  a802              ADD      r0,sp,#8
000042  2100              MOVS     r1,#0
000044  2364              MOVS     r3,#0x64
000046  460a              MOV      r2,r1
000048  e9cd1000          STRD     r1,r0,[sp,#0]
00004c  4608              MOV      r0,r1
00004e  f7fffffe          BL       OSTimeDlyHMSM
                  |L3.82|
000052  e7e6              B        |L3.34|
;;;174                          OS_OPT_TIME_HMSM_STRICT,
;;;175                          &err);
;;;176        }
;;;177    }
;;;178    
                          ENDP


                          AREA ||i.App_TaskEq0Fp||, CODE, READONLY, ALIGN=2

                  App_TaskEq0Fp PROC
;;;253    
;;;254    void  App_TaskEq0Fp (void  *p_arg)
000000  ed2d8b10          VPUSH    {d8-d15}
;;;255    {
000004  b082              SUB      sp,sp,#8
;;;256        CPU_FP32    a;
;;;257        CPU_FP32    b;
;;;258        CPU_FP32    c;
;;;259        CPU_FP32    eps;
;;;260        CPU_FP32    f_a;
;;;261        CPU_FP32    f_c;
;;;262        CPU_FP32    delta;
;;;263        CPU_INT08U  iteration;
;;;264        RAND_NBR    wait_cycles;
;;;265            
;;;266        
;;;267        while (DEF_TRUE) {
000006  e1b0              B        |L4.874|
                  |L4.8|
;;;268            eps       = 0.00001;
000008  eddf9ad8          VLDR     s19,|L4.876|
;;;269            a         = 3.0; 
00000c  eeb00a08          VMOV.F32 s0,#3.00000000
000010  eeb08a40          VMOV.F32 s16,s0
;;;270            b         = 4.0;
000014  eeb10a00          VMOV.F32 s0,#4.00000000
000018  eeb09a40          VMOV.F32 s18,s0
;;;271            delta     = a - b;
00001c  ee380a49          VSUB.F32 s0,s16,s18
000020  eef08a40          VMOV.F32 s17,s0
;;;272            iteration = 0u;
000024  2700              MOVS     r7,#0
;;;273            if (delta < 0) {
000026  eef58ac0          VCMPE.F32 s17,#0.0
00002a  eef1fa10          VMRS     APSR_nzcv,FPSCR
00002e  d211              BCS      |L4.84|
;;;274                delta = delta * -1.0;
000030  ee180a90          VMOV     r0,s17
000034  f7fffffe          BL       __aeabi_f2d
000038  ec410b1b          VMOV     d11,r0,r1
00003c  ed9f0bcc          VLDR     d0,|L4.880|
000040  ec532b10          VMOV     r2,r3,d0
000044  f7fffffe          BL       __aeabi_dmul
000048  ec410b1a          VMOV     d10,r0,r1
00004c  f7fffffe          BL       __aeabi_d2f
000050  ee080a90          VMOV     s17,r0
                  |L4.84|
;;;275            }
;;;276            
;;;277            while (((2.00 * eps) < delta) || 
000054  e168              B        |L4.808|
                  |L4.86|
;;;278                   (iteration    > 20u  )) {
;;;279                c   = (a + b) / 2.00;
000056  ee380a09          VADD.F32 s0,s16,s18
00005a  ee101a10          VMOV     r1,s0
00005e  4608              MOV      r0,r1
000060  f7fffffe          BL       __aeabi_f2d
000064  ec410b1b          VMOV     d11,r0,r1
000068  ed9f0bc3          VLDR     d0,|L4.888|
00006c  ec532b10          VMOV     r2,r3,d0
000070  f7fffffe          BL       __aeabi_ddiv
000074  ec410b1a          VMOV     d10,r0,r1
000078  f7fffffe          BL       __aeabi_d2f
00007c  4604              MOV      r4,r0
;;;280                f_a = (exp((-1.0) * a) * (3.2 * sin(a) - 0.5 * cos(a)));
00007e  ee180a10          VMOV     r0,s16
000082  f7fffffe          BL       __aeabi_f2d
000086  ec410b1d          VMOV     d13,r0,r1
00008a  eeb00a4d          VMOV.F32 s0,s26
00008e  eef00a6d          VMOV.F32 s1,s27
000092  f7fffffe          BL       __hardfp_cos
000096  eeb0ca40          VMOV.F32 s24,s0
00009a  eef0ca60          VMOV.F32 s25,s1
00009e  ed9f0bb8          VLDR     d0,|L4.896|
0000a2  ec532b10          VMOV     r2,r3,d0
0000a6  ec510b1c          VMOV     r0,r1,d12
0000aa  f7fffffe          BL       __aeabi_dmul
0000ae  ec410b1b          VMOV     d11,r0,r1
0000b2  ee180a10          VMOV     r0,s16
0000b6  f7fffffe          BL       __aeabi_f2d
0000ba  ec410b1d          VMOV     d13,r0,r1
0000be  eeb00a4d          VMOV.F32 s0,s26
0000c2  eef00a6d          VMOV.F32 s1,s27
0000c6  f7fffffe          BL       __hardfp_sin
0000ca  eeb0ca40          VMOV.F32 s24,s0
0000ce  eef0ca60          VMOV.F32 s25,s1
0000d2  ed9f0bad          VLDR     d0,|L4.904|
0000d6  ec532b10          VMOV     r2,r3,d0
0000da  ec510b1c          VMOV     r0,r1,d12
0000de  f7fffffe          BL       __aeabi_dmul
0000e2  ec410b1f          VMOV     d15,r0,r1
0000e6  ec532b1b          VMOV     r2,r3,d11
0000ea  f7fffffe          BL       __aeabi_dsub
0000ee  ec410b1e          VMOV     d14,r0,r1
0000f2  ee180a10          VMOV     r0,s16
0000f6  f7fffffe          BL       __aeabi_f2d
0000fa  ec410b1c          VMOV     d12,r0,r1
0000fe  ed9f0b9c          VLDR     d0,|L4.880|
000102  ec532b10          VMOV     r2,r3,d0
000106  f7fffffe          BL       __aeabi_dmul
00010a  ec410b1b          VMOV     d11,r0,r1
00010e  eeb00a4b          VMOV.F32 s0,s22
000112  eef00a6b          VMOV.F32 s1,s23
000116  f7fffffe          BL       __hardfp_exp
00011a  eeb0aa40          VMOV.F32 s20,s0
00011e  eef0aa60          VMOV.F32 s21,s1
000122  ec532b1e          VMOV     r2,r3,d14
000126  ec510b1a          VMOV     r0,r1,d10
00012a  f7fffffe          BL       __aeabi_dmul
00012e  e9cd0100          STRD     r0,r1,[sp,#0]
000132  ed9d0b00          VLDR     d0,[sp,#0]
000136  ec510b10          VMOV     r0,r1,d0
00013a  f7fffffe          BL       __aeabi_d2f
00013e  4605              MOV      r5,r0
;;;281                f_c = (exp((-1.0) * c) * (3.2 * sin(c) - 0.5 * cos(c)));
000140  4620              MOV      r0,r4
000142  f7fffffe          BL       __aeabi_f2d
000146  ec410b1d          VMOV     d13,r0,r1
00014a  eeb00a4d          VMOV.F32 s0,s26
00014e  eef00a6d          VMOV.F32 s1,s27
000152  f7fffffe          BL       __hardfp_cos
000156  eeb0ca40          VMOV.F32 s24,s0
00015a  eef0ca60          VMOV.F32 s25,s1
00015e  ed9f0b88          VLDR     d0,|L4.896|
000162  ec532b10          VMOV     r2,r3,d0
000166  ec510b1c          VMOV     r0,r1,d12
00016a  f7fffffe          BL       __aeabi_dmul
00016e  ec410b1e          VMOV     d14,r0,r1
000172  4620              MOV      r0,r4
000174  f7fffffe          BL       __aeabi_f2d
000178  ec410b1d          VMOV     d13,r0,r1
00017c  eeb00a4d          VMOV.F32 s0,s26
000180  eef00a6d          VMOV.F32 s1,s27
000184  f7fffffe          BL       __hardfp_sin
000188  eeb0ca40          VMOV.F32 s24,s0
00018c  eef0ca60          VMOV.F32 s25,s1
000190  ed9f0b7d          VLDR     d0,|L4.904|
000194  ec532b10          VMOV     r2,r3,d0
000198  ec510b1c          VMOV     r0,r1,d12
00019c  f7fffffe          BL       __aeabi_dmul
0001a0  ec410b1b          VMOV     d11,r0,r1
0001a4  ec532b1e          VMOV     r2,r3,d14
0001a8  f7fffffe          BL       __aeabi_dsub
0001ac  ec410b1a          VMOV     d10,r0,r1
0001b0  4620              MOV      r0,r4
0001b2  f7fffffe          BL       __aeabi_f2d
0001b6  ec410b1c          VMOV     d12,r0,r1
0001ba  ed9f0b6d          VLDR     d0,|L4.880|
0001be  ec532b10          VMOV     r2,r3,d0
0001c2  f7fffffe          BL       __aeabi_dmul
0001c6  ec410b1b          VMOV     d11,r0,r1
0001ca  eeb00a4b          VMOV.F32 s0,s22
0001ce  eef00a6b          VMOV.F32 s1,s23
0001d2  f7fffffe          BL       __hardfp_exp
0001d6  eeb0fa40          VMOV.F32 s30,s0
0001da  eef0fa60          VMOV.F32 s31,s1
0001de  ec532b1a          VMOV     r2,r3,d10
0001e2  ec510b1f          VMOV     r0,r1,d15
0001e6  f7fffffe          BL       __aeabi_dmul
0001ea  e9cd0100          STRD     r0,r1,[sp,#0]
0001ee  ed9d0b00          VLDR     d0,[sp,#0]
0001f2  ec510b10          VMOV     r0,r1,d0
0001f6  f7fffffe          BL       __aeabi_d2f
0001fa  4606              MOV      r6,r0
;;;282                
;;;283                if (((f_a > 0.0) && (f_c < 0.0)) || 
0001fc  4628              MOV      r0,r5
0001fe  f7fffffe          BL       __aeabi_f2d
000202  ec410b1a          VMOV     d10,r0,r1
000206  ed9f0b62          VLDR     d0,|L4.912|
00020a  ec532b10          VMOV     r2,r3,d0
00020e  f7fffffe          BL       __aeabi_cdrcmple
000212  d20b              BCS      |L4.556|
000214  4630              MOV      r0,r6
000216  f7fffffe          BL       __aeabi_f2d
00021a  ec410b1a          VMOV     d10,r0,r1
00021e  ed9f0b5c          VLDR     d0,|L4.912|
000222  ec532b10          VMOV     r2,r3,d0
000226  f7fffffe          BL       __aeabi_cdcmple
00022a  d317              BCC      |L4.604|
                  |L4.556|
;;;284                    ((f_a < 0.0) && (f_c > 0.0))) {
00022c  4628              MOV      r0,r5
00022e  f7fffffe          BL       __aeabi_f2d
000232  ec410b1a          VMOV     d10,r0,r1
000236  ed9f0b56          VLDR     d0,|L4.912|
00023a  ec532b10          VMOV     r2,r3,d0
00023e  f7fffffe          BL       __aeabi_cdcmple
000242  d20e              BCS      |L4.610|
000244  4630              MOV      r0,r6
000246  f7fffffe          BL       __aeabi_f2d
00024a  ec410b1a          VMOV     d10,r0,r1
00024e  ed9f0b50          VLDR     d0,|L4.912|
000252  ec532b10          VMOV     r2,r3,d0
000256  f7fffffe          BL       __aeabi_cdrcmple
00025a  d202              BCS      |L4.610|
                  |L4.604|
;;;285                    b = c;
00025c  ee094a10          VMOV     s18,r4
000260  e033              B        |L4.714|
                  |L4.610|
;;;286                } else if (((f_a > 0.0) && (f_c > 0.0)) || 
000262  4628              MOV      r0,r5
000264  f7fffffe          BL       __aeabi_f2d
000268  ec410b1a          VMOV     d10,r0,r1
00026c  ed9f0b48          VLDR     d0,|L4.912|
000270  ec532b10          VMOV     r2,r3,d0
000274  f7fffffe          BL       __aeabi_cdrcmple
000278  d20b              BCS      |L4.658|
00027a  4630              MOV      r0,r6
00027c  f7fffffe          BL       __aeabi_f2d
000280  ec410b1a          VMOV     d10,r0,r1
000284  ed9f0b42          VLDR     d0,|L4.912|
000288  ec532b10          VMOV     r2,r3,d0
00028c  f7fffffe          BL       __aeabi_cdrcmple
000290  d317              BCC      |L4.706|
                  |L4.658|
;;;287                           ((f_a < 0.0) && (f_c < 0.0))) {
000292  4628              MOV      r0,r5
000294  f7fffffe          BL       __aeabi_f2d
000298  ec410b1a          VMOV     d10,r0,r1
00029c  ed9f0b3c          VLDR     d0,|L4.912|
0002a0  ec532b10          VMOV     r2,r3,d0
0002a4  f7fffffe          BL       __aeabi_cdcmple
0002a8  d20e              BCS      |L4.712|
0002aa  4630              MOV      r0,r6
0002ac  f7fffffe          BL       __aeabi_f2d
0002b0  ec410b1a          VMOV     d10,r0,r1
0002b4  ed9f0b36          VLDR     d0,|L4.912|
0002b8  ec532b10          VMOV     r2,r3,d0
0002bc  f7fffffe          BL       __aeabi_cdcmple
0002c0  d202              BCS      |L4.712|
                  |L4.706|
;;;288                    a = c;           
0002c2  ee084a10          VMOV     s16,r4
0002c6  e000              B        |L4.714|
                  |L4.712|
;;;289                } else {
;;;290                    break;
0002c8  e04b              B        |L4.866|
                  |L4.714|
;;;291                }
;;;292                    
;;;293                delta = a - b;
0002ca  ee380a49          VSUB.F32 s0,s16,s18
0002ce  eef08a40          VMOV.F32 s17,s0
;;;294                if (delta < 0) {
0002d2  eef58ac0          VCMPE.F32 s17,#0.0
0002d6  eef1fa10          VMRS     APSR_nzcv,FPSCR
0002da  d211              BCS      |L4.768|
;;;295                   delta = delta * -1.0;
0002dc  ee180a90          VMOV     r0,s17
0002e0  f7fffffe          BL       __aeabi_f2d
0002e4  ec410b1b          VMOV     d11,r0,r1
0002e8  ed9f0b21          VLDR     d0,|L4.880|
0002ec  ec532b10          VMOV     r2,r3,d0
0002f0  f7fffffe          BL       __aeabi_dmul
0002f4  ec410b1a          VMOV     d10,r0,r1
0002f8  f7fffffe          BL       __aeabi_d2f
0002fc  ee080a90          VMOV     s17,r0
                  |L4.768|
;;;296                }
;;;297                iteration++;
000300  1c78              ADDS     r0,r7,#1
000302  b2c7              UXTB     r7,r0
;;;298    
;;;299                wait_cycles = Math_Rand();
000304  f7fffffe          BL       Math_Rand
000308  4680              MOV      r8,r0
;;;300                wait_cycles = wait_cycles % 1000;
00030a  f44f707a          MOV      r0,#0x3e8
00030e  fbb8f1f0          UDIV     r1,r8,r0
000312  fb008811          MLS      r8,r0,r1,r8
;;;301    
;;;302                while (wait_cycles > 0u) {
000316  e001              B        |L4.796|
                  |L4.792|
;;;303                    wait_cycles--;
000318  f1a80801          SUB      r8,r8,#1
                  |L4.796|
00031c  f1b80f00          CMP      r8,#0                 ;302
000320  d1fa              BNE      |L4.792|
;;;304                }
;;;305    
;;;306                if (iteration > APP_TASK_EQ_0_ITERATION_NBR) {
000322  2f10              CMP      r7,#0x10
000324  d900              BLS      |L4.808|
;;;307                    APP_TRACE_INFO(("App_TaskEq0Fp() max # iteration reached\n"));
;;;308                    break;
000326  e01c              B        |L4.866|
                  |L4.808|
000328  ee180a90          VMOV     r0,s17                ;277
00032c  f7fffffe          BL       __aeabi_f2d
000330  ec410b1a          VMOV     d10,r0,r1             ;277
000334  ee190a90          VMOV     r0,s19                ;277
000338  f7fffffe          BL       __aeabi_f2d
00033c  ec410b1c          VMOV     d12,r0,r1             ;277
000340  ed9f0b0d          VLDR     d0,|L4.888|
000344  ec532b10          VMOV     r2,r3,d0              ;277
000348  f7fffffe          BL       __aeabi_dmul
00034c  ec410b1b          VMOV     d11,r0,r1             ;277
000350  ec532b1a          VMOV     r2,r3,d10             ;277
000354  f7fffffe          BL       __aeabi_cdcmple
000358  f4ffae7d          BCC      |L4.86|
00035c  2f14              CMP      r7,#0x14              ;278
00035e  f63fae7a          BHI      |L4.86|
                  |L4.866|
000362  bf00              NOP                            ;290
;;;309                }            
;;;310            }
;;;311    
;;;312            APP_TRACE_INFO(("Eq0 Task Running ....\n"));
;;;313            
;;;314            if (iteration == APP_TASK_EQ_0_ITERATION_NBR) {
000364  2f10              CMP      r7,#0x10
000366  d100              BNE      |L4.874|
;;;315                APP_TRACE_INFO(("Root = %f; f(c) = %f; #iterations : %d\n", c, f_c, iteration));
000368  bf00              NOP      
                  |L4.874|
00036a  e64d              B        |L4.8|
;;;316            }
;;;317        }
;;;318    }
                          ENDP

                  |L4.876|
00036c  3727c5ac          DCFS     0x3727c5ac ; 9.9999997473787516e-06
                  |L4.880|
000370  00000000          DCFD     0xbff0000000000000 ; -1
000374  bff00000
                  |L4.888|
000378  00000000          DCFD     0x4000000000000000 ; 2
00037c  40000000
                  |L4.896|
000380  00000000          DCFD     0x3fe0000000000000 ; 0.5
000384  3fe00000
                  |L4.904|
000388  9999999a          DCFD     0x400999999999999a ; 3.2000000000000002
00038c  40099999
                  |L4.912|
000390  00000000          DCFD     0x0000000000000000 ; 0
000394  00000000

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;85     
;;;86     int main(void)
000000  b500              PUSH     {lr}
;;;87     {
000002  b08b              SUB      sp,sp,#0x2c
;;;88         OS_ERR  err;
;;;89     
;;;90     
;;;91         BSP_IntDisAll();                                            /* Disable all interrupts.                              */
000004  f7fffffe          BL       BSP_IntDisAll
;;;92         
;;;93         CPU_Init();                                                 /* Initialize the uC/CPU Services                       */
000008  f7fffffe          BL       CPU_Init
;;;94         Mem_Init();                                                 /* Initialize Memory Management Module                  */
00000c  f7fffffe          BL       Mem_Init
;;;95         Math_Init();                                                /* Initialize Mathematical Module                       */
000010  f7fffffe          BL       Math_Init
;;;96     
;;;97         OSInit(&err);                                               /* Init uC/OS-III.                                      */
000014  a80a              ADD      r0,sp,#0x28
000016  f7fffffe          BL       OSInit
;;;98     
;;;99         OSTaskCreate((OS_TCB       *)&AppTaskStartTCB,              /* Create the start task                                */
00001a  a80a              ADD      r0,sp,#0x28
00001c  2103              MOVS     r1,#3
00001e  2200              MOVS     r2,#0
000020  9205              STR      r2,[sp,#0x14]
000022  e9cd2106          STRD     r2,r1,[sp,#0x18]
000026  9008              STR      r0,[sp,#0x20]
000028  4611              MOV      r1,r2
00002a  2280              MOVS     r2,#0x80
00002c  480a              LDR      r0,|L5.88|
00002e  6b00              LDR      r0,[r0,#0x30]  ; AppTaskStartStk
000030  4b09              LDR      r3,|L5.88|
000032  e9cd3001          STRD     r3,r0,[sp,#4]
000036  e9cd2103          STRD     r2,r1,[sp,#0xc]
00003a  2002              MOVS     r0,#2
00003c  2300              MOVS     r3,#0
00003e  4a07              LDR      r2,|L5.92|
000040  a107              ADR      r1,|L5.96|
000042  9000              STR      r0,[sp,#0]
000044  480a              LDR      r0,|L5.112|
000046  f7fffffe          BL       OSTaskCreate
;;;100                     (CPU_CHAR     *)"App Task Start",
;;;101                     (OS_TASK_PTR   )AppTaskStart,
;;;102                     (void         *)0u,
;;;103                     (OS_PRIO       )APP_CFG_TASK_START_PRIO,
;;;104                     (CPU_STK      *)&AppTaskStartStk[0u],
;;;105                     (CPU_STK_SIZE  )AppTaskStartStk[APP_CFG_TASK_START_STK_SIZE / 10u],
;;;106                     (CPU_STK_SIZE  )APP_CFG_TASK_START_STK_SIZE,
;;;107                     (OS_MSG_QTY    )0u,
;;;108                     (OS_TICK       )0u,
;;;109                     (void         *)0u,
;;;110                     (OS_OPT        )(OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),
;;;111                     (OS_ERR       *)&err);
;;;112    
;;;113        OSStart(&err);                                              /* Start multitasking (i.e. give control to uC/OS-III). */
00004a  a80a              ADD      r0,sp,#0x28
00004c  f7fffffe          BL       OSStart
;;;114    
;;;115        (void)&err;
;;;116    
;;;117        return (0u);
000050  2000              MOVS     r0,#0
;;;118    }
000052  b00b              ADD      sp,sp,#0x2c
000054  bd00              POP      {pc}
;;;119    
                          ENDP

000056  0000              DCW      0x0000
                  |L5.88|
                          DCD      AppTaskStartStk
                  |L5.92|
                          DCD      AppTaskStart
                  |L5.96|
000060  41707020          DCB      "App Task Start",0
000064  5461736b
000068  20537461
00006c  727400  
00006f  00                DCB      0
                  |L5.112|
                          DCD      AppTaskStartTCB

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  AppTaskStartTCB
                          %        192
                  AppTaskStartStk
                          %        512
                  App_TaskEq0FpTCB
                          %        192
                  App_TaskEq0FpStk
                          %        2048

;*** Start embedded assembler ***

#line 1 "..\\APP\\app.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_app_c_main____REV16|
#line 388 "..\\..\\..\\CMSIS\\4.5.0\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___5_app_c_main____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_app_c_main____REVSH|
#line 402
|__asm___5_app_c_main____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___5_app_c_main____RRX|
#line 587
|__asm___5_app_c_main____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
