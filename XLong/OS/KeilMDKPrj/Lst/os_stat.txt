; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\os_stat.o --asm_dir=.\Lst\ --list_dir=.\Lst\ --depend=.\obj\os_stat.d --cpu=Cortex-M4.fp --apcs=interwork -O0 -I..\..\..\CMSIS\4.5.0\CMSIS\Include -I..\APP -I..\APP\ST -I..\APP\uCOS -I..\..\BSP\KeilMDK -I..\..\BSP\Board\inc -I..\..\BSP\STM32F4xx\inc -I..\..\BSP\Xlong\inc -I..\..\..\uCOS\uC-CPU -I..\..\..\uCOS\uC-CPU\Ports\ARM-Cortex-M4 -I..\..\..\uCOS\uC-LIB -I..\..\..\uCOS\uC-LIB\Ports\ARM-Cortex-M4 -I..\..\..\uCOS\uCOS-III\Source -I..\..\..\uCOS\uCOS-III\Ports\ARM-Cortex-M4 -IC:\Users\V200\Desktop\XLong\XLong\OS\KeilMDKPrj\RTE -Id:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\1.0.8\Device\Include -Id:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -DSTM32F427_437xx -DSTM32F427_437xx -DUSE_STDPERIPH_DRIVER --omf_browse=.\obj\os_stat.crf ..\..\..\uCOS\uCOS-III\Source\os_stat.c]
                          THUMB

                          AREA ||i.OSStatReset||, CODE, READONLY, ALIGN=2

                  OSStatReset PROC
;;;58     
;;;59     void  OSStatReset (OS_ERR  *p_err)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;60     {
000004  4607              MOV      r7,r0
;;;61     #if (OS_CFG_DBG_EN > 0u)
;;;62         OS_TCB      *p_tcb;
;;;63     #if (OS_MSG_EN > 0u)
;;;64         OS_MSG_Q    *p_msg_q;
;;;65     #endif
;;;66     #if (OS_CFG_Q_EN > 0u)
;;;67         OS_Q        *p_q;
;;;68     #endif
;;;69     #endif
;;;70         CPU_SR_ALLOC();
000006  f04f0800          MOV      r8,#0
;;;71     
;;;72     
;;;73     
;;;74     #ifdef OS_SAFETY_CRITICAL
;;;75         if (p_err == (OS_ERR *)0) {
;;;76             OS_SAFETY_CRITICAL_EXCEPTION();
;;;77             return;
;;;78         }
;;;79     #endif
;;;80     
;;;81         CPU_CRITICAL_ENTER();
00000a  bf00              NOP      
00000c  bf00              NOP      
00000e  f7fffffe          BL       CPU_SR_Save
000012  4680              MOV      r8,r0
000014  bf00              NOP      
000016  bf00              NOP      
;;;82     #if OS_CFG_ISR_POST_DEFERRED_EN > 0u
;;;83         OSIntQTaskTimeMax     = (CPU_TS    )0;                  /* Reset the task execution times                         */
;;;84         OSIntQNbrEntriesMax   = (OS_OBJ_QTY)0;                  /* Reset the queue maximum number of entries              */
;;;85     #endif
;;;86     
;;;87     #if OS_CFG_STAT_TASK_EN > 0u
;;;88         OSStatTaskCPUUsageMax = 0u;
000018  2000              MOVS     r0,#0
00001a  493b              LDR      r1,|L1.264|
00001c  8008              STRH     r0,[r1,#0]
;;;89         OSStatTaskTimeMax     = (CPU_TS)0;
00001e  493b              LDR      r1,|L1.268|
000020  6008              STR      r0,[r1,#0]  ; OSStatTaskTimeMax
;;;90     #endif
;;;91     
;;;92         OSTickTaskTimeMax     = (CPU_TS)0;
000022  493b              LDR      r1,|L1.272|
000024  6008              STR      r0,[r1,#0]  ; OSTickTaskTimeMax
;;;93     
;;;94     #if OS_CFG_TMR_EN > 0u
;;;95         OSTmrTaskTimeMax      = (CPU_TS)0;
000026  493b              LDR      r1,|L1.276|
000028  6008              STR      r0,[r1,#0]  ; OSTmrTaskTimeMax
;;;96     #endif
;;;97     
;;;98     #ifdef CPU_CFG_INT_DIS_MEAS_EN
;;;99         OSIntDisTimeMax       = (CPU_TS)0;                      /* Reset the maximum interrupt disable time               */
;;;100    #endif
;;;101    
;;;102    #if OS_CFG_SCHED_LOCK_TIME_MEAS_EN > 0u
;;;103        OSSchedLockTimeMax    = (CPU_TS)0;                      /* Reset the maximum scheduler lock time                  */
00002a  493b              LDR      r1,|L1.280|
00002c  6008              STR      r0,[r1,#0]  ; OSSchedLockTimeMax
;;;104    #endif
;;;105    
;;;106    #if ((OS_MSG_EN > 0u) && (OS_CFG_DBG_EN > 0u))
;;;107        OSMsgPool.NbrUsedMax  = 0u;
00002e  493b              LDR      r1,|L1.284|
000030  8108              STRH     r0,[r1,#8]
;;;108    #endif
;;;109        CPU_CRITICAL_EXIT();
000032  bf00              NOP      
000034  bf00              NOP      
000036  4640              MOV      r0,r8
000038  f7fffffe          BL       CPU_SR_Restore
00003c  bf00              NOP      
00003e  bf00              NOP      
;;;110    
;;;111    #if OS_CFG_DBG_EN > 0u
;;;112        CPU_CRITICAL_ENTER();
000040  bf00              NOP      
000042  bf00              NOP      
000044  f7fffffe          BL       CPU_SR_Save
000048  4680              MOV      r8,r0
00004a  bf00              NOP      
00004c  bf00              NOP      
;;;113        p_tcb = OSTaskDbgListPtr;
00004e  4834              LDR      r0,|L1.288|
000050  6804              LDR      r4,[r0,#0]  ; OSTaskDbgListPtr
;;;114        CPU_CRITICAL_EXIT();
000052  bf00              NOP      
000054  bf00              NOP      
000056  4640              MOV      r0,r8
000058  f7fffffe          BL       CPU_SR_Restore
00005c  bf00              NOP      
00005e  bf00              NOP      
;;;115        while (p_tcb != (OS_TCB *)0) {                          /* Reset per-Task statistics                              */
000060  e021              B        |L1.166|
                  |L1.98|
;;;116            CPU_CRITICAL_ENTER();
000062  bf00              NOP      
000064  bf00              NOP      
000066  f7fffffe          BL       CPU_SR_Save
00006a  4680              MOV      r8,r0
00006c  bf00              NOP      
00006e  bf00              NOP      
;;;117    
;;;118    #ifdef CPU_CFG_INT_DIS_MEAS_EN
;;;119            p_tcb->IntDisTimeMax    = (CPU_TS      )0;
;;;120    #endif
;;;121    
;;;122    #if OS_CFG_SCHED_LOCK_TIME_MEAS_EN > 0u
;;;123            p_tcb->SchedLockTimeMax = (CPU_TS      )0;
000070  2000              MOVS     r0,#0
000072  3474              ADDS     r4,r4,#0x74
000074  63e0              STR      r0,[r4,#0x3c]
;;;124    #endif
;;;125    
;;;126    #if OS_CFG_TASK_PROFILE_EN > 0u
;;;127    #if OS_CFG_TASK_Q_EN > 0u
;;;128            p_tcb->MsgQPendTimeMax  = (CPU_TS      )0;
000076  6020              STR      r0,[r4,#0]
;;;129    #endif
;;;130            p_tcb->SemPendTimeMax   = (CPU_TS      )0;
000078  6320              STR      r0,[r4,#0x30]
;;;131            p_tcb->CtxSwCtr         = (OS_CTR      )0;
00007a  61a0              STR      r0,[r4,#0x18]
;;;132            p_tcb->CPUUsage         = (OS_CPU_USAGE)0;
00007c  82a0              STRH     r0,[r4,#0x14]
;;;133            p_tcb->CPUUsageMax      = (OS_CPU_USAGE)0;
00007e  82e0              STRH     r0,[r4,#0x16]
;;;134            p_tcb->CyclesTotal      = (OS_CYCLES   )0;
000080  6260              STR      r0,[r4,#0x24]
;;;135            p_tcb->CyclesTotalPrev  = (OS_CYCLES   )0;
000082  62a0              STR      r0,[r4,#0x28]
;;;136            p_tcb->CyclesStart      =  OS_TS_GET();
000084  f7fffffe          BL       CPU_TS_TmrRd
000088  6220              STR      r0,[r4,#0x20]
00008a  3c74              SUBS     r4,r4,#0x74
;;;137    #endif
;;;138    
;;;139    #if OS_CFG_TASK_Q_EN > 0u
;;;140            p_msg_q                 = &p_tcb->MsgQ;
00008c  f1040660          ADD      r6,r4,#0x60
;;;141            p_msg_q->NbrEntriesMax  = (OS_MSG_QTY  )0;
000090  2000              MOVS     r0,#0
000092  81b0              STRH     r0,[r6,#0xc]
;;;142    #endif
;;;143            p_tcb                   = p_tcb->DbgNextPtr;
000094  f8d440b8          LDR      r4,[r4,#0xb8]
;;;144            CPU_CRITICAL_EXIT();
000098  bf00              NOP      
00009a  bf00              NOP      
00009c  4640              MOV      r0,r8
00009e  f7fffffe          BL       CPU_SR_Restore
0000a2  bf00              NOP      
0000a4  bf00              NOP      
                  |L1.166|
0000a6  2c00              CMP      r4,#0                 ;115
0000a8  d1db              BNE      |L1.98|
;;;145        }
;;;146    #endif
;;;147    
;;;148    #if (OS_CFG_Q_EN > 0u) && (OS_CFG_DBG_EN > 0u)
;;;149        CPU_CRITICAL_ENTER();
0000aa  bf00              NOP      
0000ac  bf00              NOP      
0000ae  f7fffffe          BL       CPU_SR_Save
0000b2  4680              MOV      r8,r0
0000b4  bf00              NOP      
0000b6  bf00              NOP      
;;;150        p_q = OSQDbgListPtr;
0000b8  481a              LDR      r0,|L1.292|
0000ba  6805              LDR      r5,[r0,#0]  ; OSQDbgListPtr
;;;151        CPU_CRITICAL_EXIT();
0000bc  bf00              NOP      
0000be  bf00              NOP      
0000c0  4640              MOV      r0,r8
0000c2  f7fffffe          BL       CPU_SR_Restore
0000c6  bf00              NOP      
0000c8  bf00              NOP      
;;;152        while (p_q != (OS_Q *)0) {                              /* Reset message queues statistics                        */
0000ca  e012              B        |L1.242|
                  |L1.204|
;;;153            CPU_CRITICAL_ENTER();
0000cc  bf00              NOP      
0000ce  bf00              NOP      
0000d0  f7fffffe          BL       CPU_SR_Save
0000d4  4680              MOV      r8,r0
0000d6  bf00              NOP      
0000d8  bf00              NOP      
;;;154            p_msg_q                = &p_q->MsgQ;
0000da  f1050620          ADD      r6,r5,#0x20
;;;155            p_msg_q->NbrEntriesMax = (OS_MSG_QTY)0;
0000de  2000              MOVS     r0,#0
0000e0  81b0              STRH     r0,[r6,#0xc]
;;;156            p_q                    = p_q->DbgNextPtr;
0000e2  69ad              LDR      r5,[r5,#0x18]
;;;157            CPU_CRITICAL_EXIT();
0000e4  bf00              NOP      
0000e6  bf00              NOP      
0000e8  4640              MOV      r0,r8
0000ea  f7fffffe          BL       CPU_SR_Restore
0000ee  bf00              NOP      
0000f0  bf00              NOP      
                  |L1.242|
0000f2  2d00              CMP      r5,#0                 ;152
0000f4  d1ea              BNE      |L1.204|
;;;158        }
;;;159    #endif
;;;160    
;;;161        OS_TickListResetPeak();                                 /* Reset tick wheel statistics                            */
0000f6  f7fffffe          BL       OS_TickListResetPeak
;;;162    
;;;163    #if OS_CFG_TMR_EN > 0u
;;;164        OS_TmrResetPeak();
0000fa  f7fffffe          BL       OS_TmrResetPeak
;;;165    #endif
;;;166    
;;;167    
;;;168       *p_err = OS_ERR_NONE;
0000fe  2000              MOVS     r0,#0
000100  8038              STRH     r0,[r7,#0]
;;;169    }
000102  e8bd81f0          POP      {r4-r8,pc}
;;;170    
                          ENDP

000106  0000              DCW      0x0000
                  |L1.264|
                          DCD      OSStatTaskCPUUsageMax
                  |L1.268|
                          DCD      OSStatTaskTimeMax
                  |L1.272|
                          DCD      OSTickTaskTimeMax
                  |L1.276|
                          DCD      OSTmrTaskTimeMax
                  |L1.280|
                          DCD      OSSchedLockTimeMax
                  |L1.284|
                          DCD      OSMsgPool
                  |L1.288|
                          DCD      OSTaskDbgListPtr
                  |L1.292|
                          DCD      OSQDbgListPtr

                          AREA ||i.OSStatTaskCPUUsageInit||, CODE, READONLY, ALIGN=2

                  OSStatTaskCPUUsageInit PROC
;;;192    
;;;193    void  OSStatTaskCPUUsageInit (OS_ERR  *p_err)
000000  b5f8              PUSH     {r3-r7,lr}
;;;194    {
000002  4604              MOV      r4,r0
;;;195        OS_ERR   err;
;;;196        OS_TICK  dly;
;;;197        CPU_SR_ALLOC();
000004  2600              MOVS     r6,#0
;;;198    
;;;199    
;;;200    
;;;201    #ifdef OS_SAFETY_CRITICAL
;;;202        if (p_err == (OS_ERR *)0) {
;;;203            OS_SAFETY_CRITICAL_EXCEPTION();
;;;204            return;
;;;205        }
;;;206    #endif
;;;207    
;;;208    #if ((OS_CFG_TMR_EN > 0u) && (OS_CFG_TASK_SUSPEND_EN > 0u))
;;;209        OSTaskSuspend(&OSTmrTaskTCB, &err);
000006  4669              MOV      r1,sp
000008  4832              LDR      r0,|L2.212|
00000a  f7fffffe          BL       OSTaskSuspend
;;;210        if (err != OS_ERR_NONE) {
00000e  f8bd0000          LDRH     r0,[sp,#0]
000012  b118              CBZ      r0,|L2.28|
;;;211           *p_err = err;
000014  f8bd0000          LDRH     r0,[sp,#0]
000018  8020              STRH     r0,[r4,#0]
                  |L2.26|
;;;212            return;
;;;213        }
;;;214    #endif
;;;215    
;;;216        OSTimeDly((OS_TICK )2,                                  /* Synchronize with clock tick                            */
;;;217                  (OS_OPT  )OS_OPT_TIME_DLY,
;;;218                  (OS_ERR *)&err);
;;;219        if (err != OS_ERR_NONE) {
;;;220           *p_err = err;
;;;221            return;
;;;222        }
;;;223        CPU_CRITICAL_ENTER();
;;;224        OSStatTaskCtr = (OS_TICK)0;                             /* Clear idle counter                                     */
;;;225        CPU_CRITICAL_EXIT();
;;;226    
;;;227        dly = (OS_TICK)0;
;;;228        if (OSCfg_TickRate_Hz > OSCfg_StatTaskRate_Hz) {
;;;229            dly = (OS_TICK)(OSCfg_TickRate_Hz / OSCfg_StatTaskRate_Hz);
;;;230        }
;;;231        if (dly == (OS_TICK)0) {
;;;232            dly =  (OS_TICK)(OSCfg_TickRate_Hz / (OS_RATE_HZ)10);
;;;233        }
;;;234    
;;;235        OSTimeDly(dly,                                          /* Determine MAX. idle counter value                      */
;;;236                  OS_OPT_TIME_DLY,
;;;237                  &err);
;;;238    
;;;239    #if ((OS_CFG_TMR_EN > 0u) && (OS_CFG_TASK_SUSPEND_EN > 0u))
;;;240        OSTaskResume(&OSTmrTaskTCB, &err);
;;;241        if (err != OS_ERR_NONE) {
;;;242           *p_err = err;
;;;243            return;
;;;244        }
;;;245    #endif
;;;246    
;;;247        CPU_CRITICAL_ENTER();
;;;248        OSStatTaskTimeMax = (CPU_TS)0;
;;;249    
;;;250        OSStatTaskCtrMax  = OSStatTaskCtr;                      /* Store maximum idle counter count                       */
;;;251        OSStatTaskRdy     = OS_STATE_RDY;
;;;252        CPU_CRITICAL_EXIT();
;;;253       *p_err             = OS_ERR_NONE;
;;;254    }
00001a  bdf8              POP      {r3-r7,pc}
                  |L2.28|
00001c  466a              MOV      r2,sp                 ;216
00001e  2100              MOVS     r1,#0                 ;216
000020  2002              MOVS     r0,#2                 ;216
000022  f7fffffe          BL       OSTimeDly
000026  f8bd0000          LDRH     r0,[sp,#0]            ;219
00002a  b118              CBZ      r0,|L2.52|
00002c  f8bd0000          LDRH     r0,[sp,#0]            ;220
000030  8020              STRH     r0,[r4,#0]            ;220
000032  e7f2              B        |L2.26|
                  |L2.52|
000034  bf00              NOP                            ;223
000036  bf00              NOP                            ;223
000038  f7fffffe          BL       CPU_SR_Save
00003c  4606              MOV      r6,r0                 ;223
00003e  bf00              NOP                            ;223
000040  bf00              NOP                            ;223
000042  2000              MOVS     r0,#0                 ;224
000044  4924              LDR      r1,|L2.216|
000046  6008              STR      r0,[r1,#0]            ;224  ; OSStatTaskCtr
000048  bf00              NOP                            ;225
00004a  bf00              NOP                            ;225
00004c  4630              MOV      r0,r6                 ;225
00004e  f7fffffe          BL       CPU_SR_Restore
000052  bf00              NOP                            ;225
000054  bf00              NOP                            ;225
000056  2500              MOVS     r5,#0                 ;227
000058  4820              LDR      r0,|L2.220|
00005a  6800              LDR      r0,[r0,#0]            ;228  ; OSCfg_TickRate_Hz
00005c  4920              LDR      r1,|L2.224|
00005e  6809              LDR      r1,[r1,#0]            ;228  ; OSCfg_StatTaskRate_Hz
000060  4288              CMP      r0,r1                 ;228
000062  d905              BLS      |L2.112|
000064  481d              LDR      r0,|L2.220|
000066  6800              LDR      r0,[r0,#0]            ;229  ; OSCfg_TickRate_Hz
000068  491d              LDR      r1,|L2.224|
00006a  6809              LDR      r1,[r1,#0]            ;229  ; OSCfg_StatTaskRate_Hz
00006c  fbb0f5f1          UDIV     r5,r0,r1              ;229
                  |L2.112|
000070  b925              CBNZ     r5,|L2.124|
000072  481a              LDR      r0,|L2.220|
000074  6800              LDR      r0,[r0,#0]            ;232  ; OSCfg_TickRate_Hz
000076  210a              MOVS     r1,#0xa               ;232
000078  fbb0f5f1          UDIV     r5,r0,r1              ;232
                  |L2.124|
00007c  466a              MOV      r2,sp                 ;235
00007e  2100              MOVS     r1,#0                 ;235
000080  4628              MOV      r0,r5                 ;235
000082  f7fffffe          BL       OSTimeDly
000086  4669              MOV      r1,sp                 ;240
000088  4812              LDR      r0,|L2.212|
00008a  f7fffffe          BL       OSTaskResume
00008e  f8bd0000          LDRH     r0,[sp,#0]            ;241
000092  b118              CBZ      r0,|L2.156|
000094  f8bd0000          LDRH     r0,[sp,#0]            ;242
000098  8020              STRH     r0,[r4,#0]            ;242
00009a  e7be              B        |L2.26|
                  |L2.156|
00009c  bf00              NOP                            ;247
00009e  bf00              NOP                            ;247
0000a0  f7fffffe          BL       CPU_SR_Save
0000a4  4606              MOV      r6,r0                 ;247
0000a6  bf00              NOP                            ;247
0000a8  bf00              NOP                            ;247
0000aa  2000              MOVS     r0,#0                 ;248
0000ac  490d              LDR      r1,|L2.228|
0000ae  6008              STR      r0,[r1,#0]            ;248  ; OSStatTaskTimeMax
0000b0  4809              LDR      r0,|L2.216|
0000b2  6800              LDR      r0,[r0,#0]            ;250  ; OSStatTaskCtr
0000b4  490c              LDR      r1,|L2.232|
0000b6  6008              STR      r0,[r1,#0]            ;250  ; OSStatTaskCtrMax
0000b8  2001              MOVS     r0,#1                 ;251
0000ba  490c              LDR      r1,|L2.236|
0000bc  7008              STRB     r0,[r1,#0]            ;251
0000be  bf00              NOP                            ;252
0000c0  bf00              NOP                            ;252
0000c2  4630              MOV      r0,r6                 ;252
0000c4  f7fffffe          BL       CPU_SR_Restore
0000c8  bf00              NOP                            ;252
0000ca  bf00              NOP                            ;252
0000cc  2000              MOVS     r0,#0                 ;253
0000ce  8020              STRH     r0,[r4,#0]            ;253
0000d0  bf00              NOP      
0000d2  e7a2              B        |L2.26|
;;;255    
                          ENDP

                  |L2.212|
                          DCD      OSTmrTaskTCB
                  |L2.216|
                          DCD      OSStatTaskCtr
                  |L2.220|
                          DCD      OSCfg_TickRate_Hz
                  |L2.224|
                          DCD      OSCfg_StatTaskRate_Hz
                  |L2.228|
                          DCD      OSStatTaskTimeMax
                  |L2.232|
                          DCD      OSStatTaskCtrMax
                  |L2.236|
                          DCD      OSStatTaskRdy

                          AREA ||i.OS_StatTask||, CODE, READONLY, ALIGN=2

                  OS_StatTask PROC
;;;282    
;;;283    void  OS_StatTask (void  *p_arg)
000000  b086              SUB      sp,sp,#0x18
;;;284    {
;;;285    #if OS_CFG_DBG_EN > 0u
;;;286    #if OS_CFG_TASK_PROFILE_EN > 0u
;;;287        OS_CPU_USAGE usage;
;;;288        OS_CYCLES    cycles_total;
;;;289        OS_CYCLES    cycles_div;
;;;290        OS_CYCLES    cycles_mult;
;;;291        OS_CYCLES    cycles_max;
;;;292    #endif
;;;293        OS_TCB      *p_tcb;
;;;294    #endif
;;;295        OS_TICK      ctr_max;
;;;296        OS_TICK      ctr_mult;
;;;297        OS_TICK      ctr_div;
;;;298        OS_ERR       err;
;;;299        OS_TICK      dly;
;;;300        CPU_TS       ts_start;
;;;301        CPU_TS       ts_end;
;;;302        CPU_SR_ALLOC();
000002  2000              MOVS     r0,#0
000004  9000              STR      r0,[sp,#0]
;;;303    
;;;304    
;;;305    
;;;306        (void)&p_arg;                                           /* Prevent compiler warning for not using 'p_arg'         */
;;;307        while (OSStatTaskRdy != DEF_TRUE) {
000006  e006              B        |L3.22|
                  |L3.8|
;;;308            OSTimeDly(2u * OSCfg_StatTaskRate_Hz,               /* Wait until statistic task is ready                     */
000008  49a8              LDR      r1,|L3.684|
00000a  6809              LDR      r1,[r1,#0]  ; OSCfg_StatTaskRate_Hz
00000c  0048              LSLS     r0,r1,#1
00000e  aa01              ADD      r2,sp,#4
000010  2100              MOVS     r1,#0
000012  f7fffffe          BL       OSTimeDly
                  |L3.22|
000016  48a6              LDR      r0,|L3.688|
000018  7800              LDRB     r0,[r0,#0]            ;307  ; OSStatTaskRdy
00001a  2801              CMP      r0,#1                 ;307
00001c  d1f4              BNE      |L3.8|
;;;309                      OS_OPT_TIME_DLY,
;;;310                      &err);
;;;311        }
;;;312        OSStatReset(&err);                                      /* Reset statistics                                       */
00001e  a801              ADD      r0,sp,#4
000020  f7fffffe          BL       OSStatReset
;;;313    
;;;314        dly = (OS_TICK)0;                                       /* Compute statistic task sleep delay                     */
000024  2700              MOVS     r7,#0
;;;315        if (OSCfg_TickRate_Hz > OSCfg_StatTaskRate_Hz) {
000026  48a3              LDR      r0,|L3.692|
000028  6800              LDR      r0,[r0,#0]  ; OSCfg_TickRate_Hz
00002a  49a0              LDR      r1,|L3.684|
00002c  6809              LDR      r1,[r1,#0]  ; OSCfg_StatTaskRate_Hz
00002e  4288              CMP      r0,r1
000030  d905              BLS      |L3.62|
;;;316            dly = (OS_TICK)(OSCfg_TickRate_Hz / OSCfg_StatTaskRate_Hz);
000032  48a0              LDR      r0,|L3.692|
000034  6800              LDR      r0,[r0,#0]  ; OSCfg_TickRate_Hz
000036  499d              LDR      r1,|L3.684|
000038  6809              LDR      r1,[r1,#0]  ; OSCfg_StatTaskRate_Hz
00003a  fbb0f7f1          UDIV     r7,r0,r1
                  |L3.62|
;;;317        }
;;;318        if (dly == (OS_TICK)0) {
00003e  b927              CBNZ     r7,|L3.74|
;;;319            dly =  (OS_TICK)(OSCfg_TickRate_Hz / (OS_RATE_HZ)10);
000040  489c              LDR      r0,|L3.692|
000042  6800              LDR      r0,[r0,#0]  ; OSCfg_TickRate_Hz
000044  210a              MOVS     r1,#0xa
000046  fbb0f7f1          UDIV     r7,r0,r1
                  |L3.74|
;;;320        }
;;;321    
;;;322        while (DEF_ON) {
00004a  e12e              B        |L3.682|
                  |L3.76|
;;;323            ts_start        = OS_TS_GET();
00004c  f7fffffe          BL       CPU_TS_TmrRd
000050  4680              MOV      r8,r0
;;;324    #ifdef  CPU_CFG_INT_DIS_MEAS_EN
;;;325            OSIntDisTimeMax = CPU_IntDisMeasMaxGet();
;;;326    #endif
;;;327    
;;;328            CPU_CRITICAL_ENTER();                               /* ----------------- OVERALL CPU USAGE ------------------ */
000052  bf00              NOP      
000054  bf00              NOP      
000056  f7fffffe          BL       CPU_SR_Save
00005a  9000              STR      r0,[sp,#0]
00005c  bf00              NOP      
00005e  bf00              NOP      
;;;329            OSStatTaskCtrRun   = OSStatTaskCtr;                 /* Obtain the of the stat counter for the past .1 second  */
000060  4895              LDR      r0,|L3.696|
000062  6800              LDR      r0,[r0,#0]  ; OSStatTaskCtr
000064  4995              LDR      r1,|L3.700|
000066  6008              STR      r0,[r1,#0]  ; OSStatTaskCtrRun
;;;330            OSStatTaskCtr      = (OS_TICK)0;                    /* Reset the stat counter for the next .1 second          */
000068  2000              MOVS     r0,#0
00006a  4993              LDR      r1,|L3.696|
00006c  6008              STR      r0,[r1,#0]  ; OSStatTaskCtr
;;;331            CPU_CRITICAL_EXIT();
00006e  bf00              NOP      
000070  bf00              NOP      
000072  9800              LDR      r0,[sp,#0]
000074  f7fffffe          BL       CPU_SR_Restore
000078  bf00              NOP      
00007a  bf00              NOP      
;;;332    
;;;333            if (OSStatTaskCtrMax > OSStatTaskCtrRun) {          /* Compute CPU Usage with best resolution                 */
00007c  4890              LDR      r0,|L3.704|
00007e  6800              LDR      r0,[r0,#0]  ; OSStatTaskCtrMax
000080  498e              LDR      r1,|L3.700|
000082  6809              LDR      r1,[r1,#0]  ; OSStatTaskCtrRun
000084  4288              CMP      r0,r1
000086  d948              BLS      |L3.282|
;;;334                if (OSStatTaskCtrMax < 400000u) {                                        /*            1 to       400,000 */
000088  488d              LDR      r0,|L3.704|
00008a  6800              LDR      r0,[r0,#0]  ; OSStatTaskCtrMax
00008c  498d              LDR      r1,|L3.708|
00008e  4288              CMP      r0,r1
000090  d205              BCS      |L3.158|
;;;335                    ctr_mult = 10000u;
000092  f2427010          MOV      r0,#0x2710
000096  9003              STR      r0,[sp,#0xc]
;;;336                    ctr_div  =     1u;
000098  2001              MOVS     r0,#1
00009a  9002              STR      r0,[sp,#8]
00009c  e023              B        |L3.230|
                  |L3.158|
;;;337                } else if (OSStatTaskCtrMax <   4000000u) {                              /*      400,000 to     4,000,000 */
00009e  4888              LDR      r0,|L3.704|
0000a0  6800              LDR      r0,[r0,#0]  ; OSStatTaskCtrMax
0000a2  4989              LDR      r1,|L3.712|
0000a4  4288              CMP      r0,r1
0000a6  d205              BCS      |L3.180|
;;;338                    ctr_mult =  1000u;
0000a8  f44f707a          MOV      r0,#0x3e8
0000ac  9003              STR      r0,[sp,#0xc]
;;;339                    ctr_div  =    10u;
0000ae  200a              MOVS     r0,#0xa
0000b0  9002              STR      r0,[sp,#8]
0000b2  e018              B        |L3.230|
                  |L3.180|
;;;340                } else if (OSStatTaskCtrMax <  40000000u) {                              /*    4,000,000 to    40,000,000 */
0000b4  4882              LDR      r0,|L3.704|
0000b6  6800              LDR      r0,[r0,#0]  ; OSStatTaskCtrMax
0000b8  4984              LDR      r1,|L3.716|
0000ba  4288              CMP      r0,r1
0000bc  d203              BCS      |L3.198|
;;;341                    ctr_mult =   100u;
0000be  2064              MOVS     r0,#0x64
0000c0  9003              STR      r0,[sp,#0xc]
;;;342                    ctr_div  =   100u;
0000c2  9002              STR      r0,[sp,#8]
0000c4  e00f              B        |L3.230|
                  |L3.198|
;;;343                } else if (OSStatTaskCtrMax < 400000000u) {                              /*   40,000,000 to   400,000,000 */
0000c6  487e              LDR      r0,|L3.704|
0000c8  6800              LDR      r0,[r0,#0]  ; OSStatTaskCtrMax
0000ca  4981              LDR      r1,|L3.720|
0000cc  4288              CMP      r0,r1
0000ce  d205              BCS      |L3.220|
;;;344                    ctr_mult =    10u;
0000d0  200a              MOVS     r0,#0xa
0000d2  9003              STR      r0,[sp,#0xc]
;;;345                    ctr_div  =  1000u;
0000d4  f44f707a          MOV      r0,#0x3e8
0000d8  9002              STR      r0,[sp,#8]
0000da  e004              B        |L3.230|
                  |L3.220|
;;;346                } else {                                                                 /*  400,000,000 and up           */
;;;347                    ctr_mult =     1u;
0000dc  2001              MOVS     r0,#1
0000de  9003              STR      r0,[sp,#0xc]
;;;348                    ctr_div  = 10000u;
0000e0  f2427010          MOV      r0,#0x2710
0000e4  9002              STR      r0,[sp,#8]
                  |L3.230|
;;;349                }
;;;350                ctr_max            = OSStatTaskCtrMax / ctr_div;
0000e6  4876              LDR      r0,|L3.704|
0000e8  6801              LDR      r1,[r0,#0]  ; OSStatTaskCtrMax
0000ea  9802              LDR      r0,[sp,#8]
0000ec  fbb1faf0          UDIV     r10,r1,r0
;;;351                OSStatTaskCPUUsage = (OS_CPU_USAGE)((OS_TICK)10000u - ctr_mult * OSStatTaskCtrRun / ctr_max);
0000f0  4972              LDR      r1,|L3.700|
0000f2  9803              LDR      r0,[sp,#0xc]
0000f4  6809              LDR      r1,[r1,#0]  ; OSStatTaskCtrRun
0000f6  4348              MULS     r0,r1,r0
0000f8  fbb0f0fa          UDIV     r0,r0,r10
0000fc  f2427110          MOV      r1,#0x2710
000100  1a08              SUBS     r0,r1,r0
000102  4974              LDR      r1,|L3.724|
000104  8008              STRH     r0,[r1,#0]
;;;352                if (OSStatTaskCPUUsageMax < OSStatTaskCPUUsage) {
000106  4874              LDR      r0,|L3.728|
000108  8800              LDRH     r0,[r0,#0]  ; OSStatTaskCPUUsageMax
00010a  8809              LDRH     r1,[r1,#0]  ; OSStatTaskCPUUsage
00010c  4288              CMP      r0,r1
00010e  da08              BGE      |L3.290|
;;;353                    OSStatTaskCPUUsageMax = OSStatTaskCPUUsage;
000110  4870              LDR      r0,|L3.724|
000112  8800              LDRH     r0,[r0,#0]  ; OSStatTaskCPUUsage
000114  4970              LDR      r1,|L3.728|
000116  8008              STRH     r0,[r1,#0]
000118  e003              B        |L3.290|
                  |L3.282|
;;;354                }
;;;355            } else {
;;;356                OSStatTaskCPUUsage = (OS_CPU_USAGE)10000u;
00011a  f2427010          MOV      r0,#0x2710
00011e  496d              LDR      r1,|L3.724|
000120  8008              STRH     r0,[r1,#0]
                  |L3.290|
;;;357            }
;;;358    
;;;359            OSStatTaskHook();                                   /* Invoke user definable hook                             */
000122  f7fffffe          BL       OSStatTaskHook
;;;360    
;;;361    
;;;362    #if OS_CFG_DBG_EN > 0u
;;;363    #if OS_CFG_TASK_PROFILE_EN > 0u
;;;364            cycles_total = (OS_CYCLES)0;
000126  2500              MOVS     r5,#0
;;;365    
;;;366            CPU_CRITICAL_ENTER();
000128  bf00              NOP      
00012a  bf00              NOP      
00012c  f7fffffe          BL       CPU_SR_Save
000130  9000              STR      r0,[sp,#0]
000132  bf00              NOP      
000134  bf00              NOP      
;;;367            p_tcb = OSTaskDbgListPtr;
000136  4869              LDR      r0,|L3.732|
000138  6804              LDR      r4,[r0,#0]  ; OSTaskDbgListPtr
;;;368            CPU_CRITICAL_EXIT();
00013a  bf00              NOP      
00013c  bf00              NOP      
00013e  9800              LDR      r0,[sp,#0]
000140  f7fffffe          BL       CPU_SR_Restore
000144  bf00              NOP      
000146  bf00              NOP      
;;;369            while (p_tcb != (OS_TCB *)0) {                      /* ----------------- TOTAL CYCLES COUNT ----------------- */
000148  e026              B        |L3.408|
                  |L3.330|
;;;370                OS_CRITICAL_ENTER();
00014a  bf00              NOP      
00014c  bf00              NOP      
00014e  f7fffffe          BL       CPU_SR_Save
000152  9000              STR      r0,[sp,#0]
000154  bf00              NOP      
000156  bf00              NOP      
;;;371                p_tcb->CyclesTotalPrev =  p_tcb->CyclesTotal;   /* Save accumulated # cycles into a temp variable         */
000158  f8540f98          LDR      r0,[r4,#0x98]!
00015c  6060              STR      r0,[r4,#4]
;;;372                p_tcb->CyclesTotal     = (OS_CYCLES)0;          /* Reset total cycles for task for next run               */
00015e  2000              MOVS     r0,#0
000160  f8440998          STR      r0,[r4],#-0x98
;;;373                OS_CRITICAL_EXIT();
000164  bf00              NOP      
000166  bf00              NOP      
000168  9800              LDR      r0,[sp,#0]
00016a  f7fffffe          BL       CPU_SR_Restore
00016e  bf00              NOP      
000170  bf00              NOP      
;;;374    
;;;375                cycles_total          += p_tcb->CyclesTotalPrev;/* Perform sum of all task # cycles                       */
000172  f8d4009c          LDR      r0,[r4,#0x9c]
000176  4405              ADD      r5,r5,r0
;;;376    
;;;377                CPU_CRITICAL_ENTER();
000178  bf00              NOP      
00017a  bf00              NOP      
00017c  f7fffffe          BL       CPU_SR_Save
000180  9000              STR      r0,[sp,#0]
000182  bf00              NOP      
000184  bf00              NOP      
;;;378                p_tcb                  = p_tcb->DbgNextPtr;
000186  f8d440b8          LDR      r4,[r4,#0xb8]
;;;379                CPU_CRITICAL_EXIT();
00018a  bf00              NOP      
00018c  bf00              NOP      
00018e  9800              LDR      r0,[sp,#0]
000190  f7fffffe          BL       CPU_SR_Restore
000194  bf00              NOP      
000196  bf00              NOP      
                  |L3.408|
000198  2c00              CMP      r4,#0                 ;369
00019a  d1d6              BNE      |L3.330|
;;;380            }
;;;381    #endif
;;;382    
;;;383    
;;;384    #if OS_CFG_TASK_PROFILE_EN > 0u
;;;385                                                                /* ------------- INDIVIDUAL TASK CPU USAGE -------------- */
;;;386            if (cycles_total > (OS_CYCLES)0u) {                                          /* 'cycles_total' scaling ...    */
00019c  b345              CBZ      r5,|L3.496|
;;;387                if (cycles_total < 400000u) {                                            /*            1 to       400,000 */
00019e  4849              LDR      r0,|L3.708|
0001a0  4285              CMP      r5,r0
0001a2  d205              BCS      |L3.432|
;;;388                    cycles_mult = 10000u;
0001a4  f2427010          MOV      r0,#0x2710
0001a8  9005              STR      r0,[sp,#0x14]
;;;389                    cycles_div  =     1u;
0001aa  f04f0b01          MOV      r11,#1
0001ae  e01b              B        |L3.488|
                  |L3.432|
;;;390                } else if (cycles_total <   4000000u) {                                  /*      400,000 to     4,000,000 */
0001b0  4845              LDR      r0,|L3.712|
0001b2  4285              CMP      r5,r0
0001b4  d205              BCS      |L3.450|
;;;391                    cycles_mult =  1000u;
0001b6  f44f707a          MOV      r0,#0x3e8
0001ba  9005              STR      r0,[sp,#0x14]
;;;392                    cycles_div  =    10u;
0001bc  f04f0b0a          MOV      r11,#0xa
0001c0  e012              B        |L3.488|
                  |L3.450|
;;;393                } else if (cycles_total <  40000000u) {                                  /*    4,000,000 to    40,000,000 */
0001c2  4842              LDR      r0,|L3.716|
0001c4  4285              CMP      r5,r0
0001c6  d203              BCS      |L3.464|
;;;394                    cycles_mult =   100u;
0001c8  2064              MOVS     r0,#0x64
0001ca  9005              STR      r0,[sp,#0x14]
;;;395                    cycles_div  =   100u;
0001cc  4683              MOV      r11,r0
0001ce  e00b              B        |L3.488|
                  |L3.464|
;;;396                } else if (cycles_total < 400000000u) {                                  /*   40,000,000 to   400,000,000 */
0001d0  483f              LDR      r0,|L3.720|
0001d2  4285              CMP      r5,r0
0001d4  d204              BCS      |L3.480|
;;;397                    cycles_mult =    10u;
0001d6  200a              MOVS     r0,#0xa
0001d8  9005              STR      r0,[sp,#0x14]
;;;398                    cycles_div  =  1000u;
0001da  f44f7b7a          MOV      r11,#0x3e8
0001de  e003              B        |L3.488|
                  |L3.480|
;;;399                } else {                                                                 /*  400,000,000 and up           */
;;;400                    cycles_mult =     1u;
0001e0  2001              MOVS     r0,#1
0001e2  9005              STR      r0,[sp,#0x14]
;;;401                    cycles_div  = 10000u;
0001e4  f2427b10          MOV      r11,#0x2710
                  |L3.488|
;;;402                }
;;;403                cycles_max  = cycles_total / cycles_div;
0001e8  fbb5f0fb          UDIV     r0,r5,r11
0001ec  9004              STR      r0,[sp,#0x10]
0001ee  e003              B        |L3.504|
                  |L3.496|
;;;404            } else {
;;;405                cycles_mult = 0u;
0001f0  2000              MOVS     r0,#0
0001f2  9005              STR      r0,[sp,#0x14]
;;;406                cycles_max  = 1u;
0001f4  2001              MOVS     r0,#1
0001f6  9004              STR      r0,[sp,#0x10]
                  |L3.504|
;;;407            }
;;;408    #endif
;;;409            CPU_CRITICAL_ENTER();
0001f8  bf00              NOP      
0001fa  bf00              NOP      
0001fc  f7fffffe          BL       CPU_SR_Save
000200  9000              STR      r0,[sp,#0]
000202  bf00              NOP      
000204  bf00              NOP      
;;;410            p_tcb = OSTaskDbgListPtr;
000206  4835              LDR      r0,|L3.732|
000208  6804              LDR      r4,[r0,#0]  ; OSTaskDbgListPtr
;;;411            CPU_CRITICAL_EXIT();
00020a  bf00              NOP      
00020c  bf00              NOP      
00020e  9800              LDR      r0,[sp,#0]
000210  f7fffffe          BL       CPU_SR_Restore
000214  bf00              NOP      
000216  bf00              NOP      
;;;412            while (p_tcb != (OS_TCB *)0) {
000218  e02b              B        |L3.626|
                  |L3.538|
;;;413    #if OS_CFG_TASK_PROFILE_EN > 0u                             /* Compute execution time of each task                    */
;;;414                usage = (OS_CPU_USAGE)(cycles_mult * p_tcb->CyclesTotalPrev / cycles_max);
00021a  f8d4009c          LDR      r0,[r4,#0x9c]
00021e  9905              LDR      r1,[sp,#0x14]
000220  4348              MULS     r0,r1,r0
000222  9904              LDR      r1,[sp,#0x10]
000224  fbb0f0f1          UDIV     r0,r0,r1
000228  b286              UXTH     r6,r0
;;;415                if (usage > 10000u) {
00022a  f2427010          MOV      r0,#0x2710
00022e  4286              CMP      r6,r0
000230  d900              BLS      |L3.564|
;;;416                    usage = 10000u;
000232  4606              MOV      r6,r0
                  |L3.564|
;;;417                }
;;;418                p_tcb->CPUUsage = usage;
000234  f8a46088          STRH     r6,[r4,#0x88]
;;;419                if (p_tcb->CPUUsageMax < usage) {               /* Detect peak CPU usage                                  */
000238  f8b4008a          LDRH     r0,[r4,#0x8a]
00023c  42b0              CMP      r0,r6
00023e  da01              BGE      |L3.580|
;;;420                    p_tcb->CPUUsageMax = usage;
000240  f8a4608a          STRH     r6,[r4,#0x8a]
                  |L3.580|
;;;421                }
;;;422    #endif
;;;423    
;;;424    #if OS_CFG_STAT_TASK_STK_CHK_EN > 0u
;;;425                OSTaskStkChk( p_tcb,                            /* Compute stack usage of active tasks only               */
000244  ab01              ADD      r3,sp,#4
000246  f10402a8          ADD      r2,r4,#0xa8
00024a  1d11              ADDS     r1,r2,#4
00024c  4620              MOV      r0,r4
00024e  f7fffffe          BL       OSTaskStkChk
;;;426                             &p_tcb->StkFree,
;;;427                             &p_tcb->StkUsed,
;;;428                             &err);
;;;429    #endif
;;;430    
;;;431                CPU_CRITICAL_ENTER();
000252  bf00              NOP      
000254  bf00              NOP      
000256  f7fffffe          BL       CPU_SR_Save
00025a  9000              STR      r0,[sp,#0]
00025c  bf00              NOP      
00025e  bf00              NOP      
;;;432                p_tcb = p_tcb->DbgNextPtr;
000260  f8d440b8          LDR      r4,[r4,#0xb8]
;;;433                CPU_CRITICAL_EXIT();
000264  bf00              NOP      
000266  bf00              NOP      
000268  9800              LDR      r0,[sp,#0]
00026a  f7fffffe          BL       CPU_SR_Restore
00026e  bf00              NOP      
000270  bf00              NOP      
                  |L3.626|
000272  2c00              CMP      r4,#0                 ;412
000274  d1d1              BNE      |L3.538|
;;;434            }
;;;435    #endif
;;;436    
;;;437            if (OSStatResetFlag == DEF_TRUE) {                  /* Check if need to reset statistics                      */
000276  481a              LDR      r0,|L3.736|
000278  7800              LDRB     r0,[r0,#0]  ; OSStatResetFlag
00027a  2801              CMP      r0,#1
00027c  d105              BNE      |L3.650|
;;;438                OSStatResetFlag  = DEF_FALSE;
00027e  2000              MOVS     r0,#0
000280  4917              LDR      r1,|L3.736|
000282  7008              STRB     r0,[r1,#0]
;;;439                OSStatReset(&err);
000284  a801              ADD      r0,sp,#4
000286  f7fffffe          BL       OSStatReset
                  |L3.650|
;;;440            }
;;;441    
;;;442            ts_end = OS_TS_GET() - ts_start;                    /* Measure execution time of statistic task               */
00028a  f7fffffe          BL       CPU_TS_TmrRd
00028e  eba00908          SUB      r9,r0,r8
;;;443            if (OSStatTaskTimeMax < ts_end) {
000292  4814              LDR      r0,|L3.740|
000294  6800              LDR      r0,[r0,#0]  ; OSStatTaskTimeMax
000296  4548              CMP      r0,r9
000298  d202              BCS      |L3.672|
;;;444                OSStatTaskTimeMax = ts_end;
00029a  4812              LDR      r0,|L3.740|
00029c  f8c09000          STR      r9,[r0,#0]  ; OSStatTaskTimeMax
                  |L3.672|
;;;445            }
;;;446    
;;;447            OSTimeDly(dly,
0002a0  aa01              ADD      r2,sp,#4
0002a2  2100              MOVS     r1,#0
0002a4  4638              MOV      r0,r7
0002a6  f7fffffe          BL       OSTimeDly
                  |L3.682|
0002aa  e6cf              B        |L3.76|
;;;448                      OS_OPT_TIME_DLY,
;;;449                      &err);
;;;450        }
;;;451    }
;;;452    
                          ENDP

                  |L3.684|
                          DCD      OSCfg_StatTaskRate_Hz
                  |L3.688|
                          DCD      OSStatTaskRdy
                  |L3.692|
                          DCD      OSCfg_TickRate_Hz
                  |L3.696|
                          DCD      OSStatTaskCtr
                  |L3.700|
                          DCD      OSStatTaskCtrRun
                  |L3.704|
                          DCD      OSStatTaskCtrMax
                  |L3.708|
                          DCD      0x00061a80
                  |L3.712|
                          DCD      0x003d0900
                  |L3.716|
                          DCD      0x02625a00
                  |L3.720|
                          DCD      0x17d78400
                  |L3.724|
                          DCD      OSStatTaskCPUUsage
                  |L3.728|
                          DCD      OSStatTaskCPUUsageMax
                  |L3.732|
                          DCD      OSTaskDbgListPtr
                  |L3.736|
                          DCD      OSStatResetFlag
                  |L3.740|
                          DCD      OSStatTaskTimeMax

                          AREA ||i.OS_StatTaskInit||, CODE, READONLY, ALIGN=2

                  OS_StatTaskInit PROC
;;;473    
;;;474    void  OS_StatTaskInit (OS_ERR  *p_err)
000000  b510              PUSH     {r4,lr}
;;;475    {
000002  b08a              SUB      sp,sp,#0x28
000004  4604              MOV      r4,r0
;;;476    #ifdef OS_SAFETY_CRITICAL
;;;477        if (p_err == (OS_ERR *)0) {
;;;478            OS_SAFETY_CRITICAL_EXCEPTION();
;;;479            return;
;;;480        }
;;;481    #endif
;;;482    
;;;483        OSStatTaskCtr    = (OS_TICK)0;
000006  2000              MOVS     r0,#0
000008  491f              LDR      r1,|L4.136|
00000a  6008              STR      r0,[r1,#0]  ; OSStatTaskCtr
;;;484        OSStatTaskCtrRun = (OS_TICK)0;
00000c  491f              LDR      r1,|L4.140|
00000e  6008              STR      r0,[r1,#0]  ; OSStatTaskCtrRun
;;;485        OSStatTaskCtrMax = (OS_TICK)0;
000010  491f              LDR      r1,|L4.144|
000012  6008              STR      r0,[r1,#0]  ; OSStatTaskCtrMax
;;;486        OSStatTaskRdy    = OS_STATE_NOT_RDY;                    /* Statistic task is not ready                            */
000014  491f              LDR      r1,|L4.148|
000016  7008              STRB     r0,[r1,#0]
;;;487        OSStatResetFlag  = DEF_FALSE;
000018  491f              LDR      r1,|L4.152|
00001a  7008              STRB     r0,[r1,#0]
;;;488    
;;;489                                                                /* ---------------- CREATE THE STAT TASK ---------------- */
;;;490        if (OSCfg_StatTaskStkBasePtr == (CPU_STK *)0) {
00001c  481f              LDR      r0,|L4.156|
00001e  6800              LDR      r0,[r0,#0]  ; OSCfg_StatTaskStkBasePtr
000020  b920              CBNZ     r0,|L4.44|
;;;491           *p_err = OS_ERR_STAT_STK_INVALID;
000022  f646602b          MOV      r0,#0x6e2b
000026  8020              STRH     r0,[r4,#0]
                  |L4.40|
;;;492            return;
;;;493        }
;;;494    
;;;495        if (OSCfg_StatTaskStkSize < OSCfg_StkSizeMin) {
;;;496           *p_err = OS_ERR_STAT_STK_SIZE_INVALID;
;;;497            return;
;;;498        }
;;;499    
;;;500        if (OSCfg_StatTaskPrio >= (OS_CFG_PRIO_MAX - 1u)) {
;;;501           *p_err = OS_ERR_STAT_PRIO_INVALID;
;;;502            return;
;;;503        }
;;;504    
;;;505        OSTaskCreate((OS_TCB     *)&OSStatTaskTCB,
;;;506                     (CPU_CHAR   *)((void *)"uC/OS-III Stat Task"),
;;;507                     (OS_TASK_PTR )OS_StatTask,
;;;508                     (void       *)0,
;;;509                     (OS_PRIO     )OSCfg_StatTaskPrio,
;;;510                     (CPU_STK    *)OSCfg_StatTaskStkBasePtr,
;;;511                     (CPU_STK_SIZE)OSCfg_StatTaskStkLimit,
;;;512                     (CPU_STK_SIZE)OSCfg_StatTaskStkSize,
;;;513                     (OS_MSG_QTY  )0,
;;;514                     (OS_TICK     )0,
;;;515                     (void       *)0,
;;;516                     (OS_OPT      )(OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),
;;;517                     (OS_ERR     *)p_err);
;;;518    }
000028  b00a              ADD      sp,sp,#0x28
00002a  bd10              POP      {r4,pc}
                  |L4.44|
00002c  481c              LDR      r0,|L4.160|
00002e  6800              LDR      r0,[r0,#0]            ;495  ; OSCfg_StatTaskStkSize
000030  491c              LDR      r1,|L4.164|
000032  6809              LDR      r1,[r1,#0]            ;495  ; OSCfg_StkSizeMin
000034  4288              CMP      r0,r1                 ;495
000036  d203              BCS      |L4.64|
000038  f646602c          MOV      r0,#0x6e2c            ;496
00003c  8020              STRH     r0,[r4,#0]            ;496
00003e  e7f3              B        |L4.40|
                  |L4.64|
000040  4819              LDR      r0,|L4.168|
000042  7800              LDRB     r0,[r0,#0]            ;500  ; OSCfg_StatTaskPrio
000044  283f              CMP      r0,#0x3f              ;500
000046  d303              BCC      |L4.80|
000048  f646602a          MOV      r0,#0x6e2a            ;501
00004c  8020              STRH     r0,[r4,#0]            ;501
00004e  e7eb              B        |L4.40|
                  |L4.80|
000050  2003              MOVS     r0,#3                 ;505
000052  2100              MOVS     r1,#0                 ;505
000054  9105              STR      r1,[sp,#0x14]         ;505
000056  e9cd0407          STRD     r0,r4,[sp,#0x1c]      ;505
00005a  9106              STR      r1,[sp,#0x18]         ;505
00005c  4608              MOV      r0,r1                 ;505
00005e  4910              LDR      r1,|L4.160|
000060  6809              LDR      r1,[r1,#0]            ;505  ; OSCfg_StatTaskStkSize
000062  4a12              LDR      r2,|L4.172|
000064  6812              LDR      r2,[r2,#0]            ;505  ; OSCfg_StatTaskStkLimit
000066  4b0d              LDR      r3,|L4.156|
000068  681b              LDR      r3,[r3,#0]            ;505  ; OSCfg_StatTaskStkBasePtr
00006a  e9cd3201          STRD     r3,r2,[sp,#4]         ;505
00006e  e9cd1003          STRD     r1,r0,[sp,#0xc]       ;505
000072  480d              LDR      r0,|L4.168|
000074  7800              LDRB     r0,[r0,#0]            ;505  ; OSCfg_StatTaskPrio
000076  2300              MOVS     r3,#0                 ;505
000078  4a0d              LDR      r2,|L4.176|
00007a  a10e              ADR      r1,|L4.180|
00007c  9000              STR      r0,[sp,#0]            ;505
00007e  4812              LDR      r0,|L4.200|
000080  f7fffffe          BL       OSTaskCreate
000084  bf00              NOP      
000086  e7cf              B        |L4.40|
;;;519    
                          ENDP

                  |L4.136|
                          DCD      OSStatTaskCtr
                  |L4.140|
                          DCD      OSStatTaskCtrRun
                  |L4.144|
                          DCD      OSStatTaskCtrMax
                  |L4.148|
                          DCD      OSStatTaskRdy
                  |L4.152|
                          DCD      OSStatResetFlag
                  |L4.156|
                          DCD      OSCfg_StatTaskStkBasePtr
                  |L4.160|
                          DCD      OSCfg_StatTaskStkSize
                  |L4.164|
                          DCD      OSCfg_StkSizeMin
                  |L4.168|
                          DCD      OSCfg_StatTaskPrio
                  |L4.172|
                          DCD      OSCfg_StatTaskStkLimit
                  |L4.176|
                          DCD      OS_StatTask
                  |L4.180|
0000b4  75432f4f          DCB      "uC/OS-III Stat Task",0
0000b8  532d4949
0000bc  49205374
0000c0  61742054
0000c4  61736b00
                  |L4.200|
                          DCD      OSStatTaskTCB
