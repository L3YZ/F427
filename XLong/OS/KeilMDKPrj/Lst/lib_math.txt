; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\lib_math.o --asm_dir=.\Lst\ --list_dir=.\Lst\ --depend=.\obj\lib_math.d --cpu=Cortex-M4.fp --apcs=interwork -O0 -I..\..\..\CMSIS\4.5.0\CMSIS\Include -I..\APP -I..\APP\ST -I..\APP\uCOS -I..\..\BSP\KeilMDK -I..\..\BSP\Board\inc -I..\..\BSP\STM32F4xx\inc -I..\..\BSP\Xlong\inc -I..\..\..\uCOS\uC-CPU -I..\..\..\uCOS\uC-CPU\Ports\ARM-Cortex-M4 -I..\..\..\uCOS\uC-LIB -I..\..\..\uCOS\uC-LIB\Ports\ARM-Cortex-M4 -I..\..\..\uCOS\uCOS-III\Source -I..\..\..\uCOS\uCOS-III\Ports\ARM-Cortex-M4 -IC:\Users\V200\Desktop\XLong\XLong\OS\KeilMDKPrj\RTE -Id:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\1.0.8\Device\Include -Id:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -DSTM32F427_437xx -DSTM32F427_437xx -DUSE_STDPERIPH_DRIVER --omf_browse=.\obj\lib_math.crf ..\..\..\uCOS\uC-LIB\lib_math.c]
                          THUMB

                          AREA ||i.Math_Init||, CODE, READONLY, ALIGN=1

                  Math_Init PROC
;;;146    
;;;147    void  Math_Init (void)
000000  b510              PUSH     {r4,lr}
;;;148    {
;;;149        Math_RandSetSeed((RAND_NBR)RAND_SEED_INIT_VAL);             /* See Note #2.                                         */
000002  2001              MOVS     r0,#1
000004  f7fffffe          BL       Math_RandSetSeed
;;;150    }
000008  bd10              POP      {r4,pc}
;;;151    
                          ENDP


                          AREA ||i.Math_Rand||, CODE, READONLY, ALIGN=2

                  Math_Rand PROC
;;;214    
;;;215    RAND_NBR  Math_Rand (void)
000000  b570              PUSH     {r4-r6,lr}
;;;216    {
;;;217        RAND_NBR  seed;
;;;218        RAND_NBR  rand_nbr;
;;;219        CPU_SR_ALLOC();
000002  2600              MOVS     r6,#0
;;;220    
;;;221    
;;;222        CPU_CRITICAL_ENTER();
000004  bf00              NOP      
000006  bf00              NOP      
000008  f7fffffe          BL       CPU_SR_Save
00000c  4606              MOV      r6,r0
00000e  bf00              NOP      
000010  bf00              NOP      
;;;223        seed             = Math_RandSeedCur;
000012  4808              LDR      r0,|L2.52|
000014  6805              LDR      r5,[r0,#0]  ; Math_RandSeedCur
;;;224        rand_nbr         = Math_RandSeed(seed);
000016  4628              MOV      r0,r5
000018  f7fffffe          BL       Math_RandSeed
00001c  4604              MOV      r4,r0
;;;225        Math_RandSeedCur = rand_nbr;
00001e  4805              LDR      r0,|L2.52|
000020  6004              STR      r4,[r0,#0]  ; Math_RandSeedCur
;;;226        CPU_CRITICAL_EXIT();
000022  bf00              NOP      
000024  bf00              NOP      
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       CPU_SR_Restore
00002c  bf00              NOP      
00002e  bf00              NOP      
;;;227    
;;;228        return (rand_nbr);
000030  4620              MOV      r0,r4
;;;229    }
000032  bd70              POP      {r4-r6,pc}
;;;230    
                          ENDP

                  |L2.52|
                          DCD      Math_RandSeedCur

                          AREA ||i.Math_RandSeed||, CODE, READONLY, ALIGN=2

                  Math_RandSeed PROC
;;;271    
;;;272    RAND_NBR  Math_RandSeed (RAND_NBR  seed)
000000  4601              MOV      r1,r0
;;;273    {
;;;274        RAND_NBR  rand_nbr;
;;;275    
;;;276    
;;;277        rand_nbr = (((RAND_NBR)RAND_LCG_PARAM_A * seed) + (RAND_NBR)RAND_LCG_PARAM_B)  %  ((RAND_NBR)RAND_LCG_PARAM_M + 1u);
000002  f2430239          MOV      r2,#0x3039
000006  4b03              LDR      r3,|L3.20|
000008  fb032201          MLA      r2,r3,r1,r2
00000c  f0224000          BIC      r0,r2,#0x80000000
;;;278    
;;;279        return (rand_nbr);
;;;280    }
000010  4770              BX       lr
;;;281    
                          ENDP

000012  0000              DCW      0x0000
                  |L3.20|
                          DCD      0x41c64e6d

                          AREA ||i.Math_RandSetSeed||, CODE, READONLY, ALIGN=2

                  Math_RandSetSeed PROC
;;;174    
;;;175    void  Math_RandSetSeed (RAND_NBR  seed)
000000  b570              PUSH     {r4-r6,lr}
;;;176    {
000002  4604              MOV      r4,r0
;;;177        CPU_SR_ALLOC();
000004  2500              MOVS     r5,#0
;;;178    
;;;179    
;;;180        CPU_CRITICAL_ENTER();
000006  bf00              NOP      
000008  bf00              NOP      
00000a  f7fffffe          BL       CPU_SR_Save
00000e  4605              MOV      r5,r0
000010  bf00              NOP      
000012  bf00              NOP      
;;;181        Math_RandSeedCur = seed;
000014  4804              LDR      r0,|L4.40|
000016  6004              STR      r4,[r0,#0]  ; Math_RandSeedCur
;;;182        CPU_CRITICAL_EXIT();
000018  bf00              NOP      
00001a  bf00              NOP      
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       CPU_SR_Restore
000022  bf00              NOP      
000024  bf00              NOP      
;;;183    }
000026  bd70              POP      {r4-r6,pc}
;;;184    
                          ENDP

                  |L4.40|
                          DCD      Math_RandSeedCur

                          AREA ||.data||, DATA, ALIGN=2

                  Math_RandSeedCur
                          DCD      0x00000000
