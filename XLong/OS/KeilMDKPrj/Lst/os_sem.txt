; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\os_sem.o --asm_dir=.\Lst\ --list_dir=.\Lst\ --depend=.\obj\os_sem.d --cpu=Cortex-M4.fp --apcs=interwork -O0 -I..\..\..\CMSIS\4.5.0\CMSIS\Include -I..\APP -I..\APP\ST -I..\APP\uCOS -I..\..\BSP\KeilMDK -I..\..\BSP\Board\inc -I..\..\BSP\STM32F4xx\inc -I..\..\BSP\Xlong\inc -I..\..\..\uCOS\uC-CPU -I..\..\..\uCOS\uC-CPU\Ports\ARM-Cortex-M4 -I..\..\..\uCOS\uC-LIB -I..\..\..\uCOS\uC-LIB\Ports\ARM-Cortex-M4 -I..\..\..\uCOS\uCOS-III\Source -I..\..\..\uCOS\uCOS-III\Ports\ARM-Cortex-M4 -IC:\Users\V200\Desktop\XLong\XLong\OS\KeilMDKPrj\RTE -Id:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\1.0.8\Device\Include -Id:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -DSTM32F427_437xx -DSTM32F427_437xx -DUSE_STDPERIPH_DRIVER --omf_browse=.\obj\os_sem.crf ..\..\..\uCOS\uCOS-III\Source\os_sem.c]
                          THUMB

                          AREA ||i.OSSemCreate||, CODE, READONLY, ALIGN=2

                  OSSemCreate PROC
;;;74     
;;;75     void  OSSemCreate (OS_SEM      *p_sem,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;76                        CPU_CHAR    *p_name,
;;;77                        OS_SEM_CTR   cnt,
;;;78                        OS_ERR      *p_err)
;;;79     {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
00000a  461d              MOV      r5,r3
;;;80         CPU_SR_ALLOC();
00000c  f04f0800          MOV      r8,#0
;;;81     
;;;82     
;;;83     
;;;84     #ifdef OS_SAFETY_CRITICAL
;;;85         if (p_err == (OS_ERR *)0) {
;;;86             OS_SAFETY_CRITICAL_EXCEPTION();
;;;87             return;
;;;88         }
;;;89     #endif
;;;90     
;;;91     #ifdef OS_SAFETY_CRITICAL_IEC61508
;;;92         if (OSSafetyCriticalStartFlag == DEF_TRUE) {
;;;93            *p_err = OS_ERR_ILLEGAL_CREATE_RUN_TIME;
;;;94             return;
;;;95         }
;;;96     #endif
;;;97     
;;;98     #if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
;;;99         if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Not allowed to be called from an ISR                   */
;;;100           *p_err = OS_ERR_CREATE_ISR;
;;;101            return;
;;;102        }
;;;103    #endif
;;;104    
;;;105    #if OS_CFG_ARG_CHK_EN > 0u
;;;106        if (p_sem == (OS_SEM *)0) {                             /* Validate 'p_sem'                                       */
000010  b924              CBNZ     r4,|L1.28|
;;;107           *p_err = OS_ERR_OBJ_PTR_NULL;
000012  f64550c3          MOV      r0,#0x5dc3
000016  8028              STRH     r0,[r5,#0]
                  |L1.24|
;;;108            return;
;;;109        }
;;;110    #endif
;;;111    
;;;112        OS_CRITICAL_ENTER();
;;;113    #if OS_OBJ_TYPE_REQ > 0u
;;;114        p_sem->Type    = OS_OBJ_TYPE_SEM;                       /* Mark the data structure as a semaphore                 */
;;;115    #endif
;;;116        p_sem->Ctr     = cnt;                                   /* Set semaphore value                                    */
;;;117        p_sem->TS      = (CPU_TS)0;
;;;118    #if OS_CFG_DBG_EN > 0u
;;;119        p_sem->NamePtr = p_name;                                /* Save the name of the semaphore                         */
;;;120    #else
;;;121        (void)&p_name;
;;;122    #endif
;;;123        OS_PendListInit(&p_sem->PendList);                      /* Initialize the waiting list                            */
;;;124    
;;;125    #if OS_CFG_DBG_EN > 0u
;;;126        OS_SemDbgListAdd(p_sem);
;;;127    #endif
;;;128        OSSemQty++;
;;;129    
;;;130    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
;;;131        TRACE_OS_SEM_CREATE(p_sem, p_name);                     /* Record the event.                                      */
;;;132    #endif
;;;133    
;;;134        OS_CRITICAL_EXIT_NO_SCHED();
;;;135       *p_err = OS_ERR_NONE;
;;;136    }
000018  e8bd81f0          POP      {r4-r8,pc}
                  |L1.28|
00001c  bf00              NOP                            ;112
00001e  bf00              NOP                            ;112
000020  f7fffffe          BL       CPU_SR_Save
000024  4680              MOV      r8,r0                 ;112
000026  bf00              NOP                            ;112
000028  bf00              NOP                            ;112
00002a  480e              LDR      r0,|L1.100|
00002c  6020              STR      r0,[r4,#0]            ;114
00002e  6227              STR      r7,[r4,#0x20]         ;116
000030  2000              MOVS     r0,#0                 ;117
000032  6260              STR      r0,[r4,#0x24]         ;117
000034  6066              STR      r6,[r4,#4]            ;119
000036  f1040008          ADD      r0,r4,#8              ;123
00003a  f7fffffe          BL       OS_PendListInit
00003e  4620              MOV      r0,r4                 ;126
000040  f7fffffe          BL       OS_SemDbgListAdd
000044  4808              LDR      r0,|L1.104|
000046  8800              LDRH     r0,[r0,#0]            ;128  ; OSSemQty
000048  1c40              ADDS     r0,r0,#1              ;128
00004a  4907              LDR      r1,|L1.104|
00004c  8008              STRH     r0,[r1,#0]            ;128
00004e  bf00              NOP                            ;134
000050  bf00              NOP                            ;134
000052  4640              MOV      r0,r8                 ;134
000054  f7fffffe          BL       CPU_SR_Restore
000058  bf00              NOP                            ;134
00005a  bf00              NOP                            ;134
00005c  2000              MOVS     r0,#0                 ;135
00005e  8028              STRH     r0,[r5,#0]            ;135
000060  bf00              NOP      
000062  e7d9              B        |L1.24|
;;;137    
                          ENDP

                  |L1.100|
                          DCD      0x414d4553
                  |L1.104|
                          DCD      OSSemQty

                          AREA ||i.OSSemDel||, CODE, READONLY, ALIGN=2

                  OSSemDel PROC
;;;174    #if OS_CFG_SEM_DEL_EN > 0u
;;;175    OS_OBJ_QTY  OSSemDel (OS_SEM  *p_sem,
000000  e92d5ffc          PUSH     {r2-r12,lr}
;;;176                          OS_OPT   opt,
;;;177                          OS_ERR  *p_err)
;;;178    {
000004  4605              MOV      r5,r0
000006  4688              MOV      r8,r1
000008  4614              MOV      r4,r2
;;;179        OS_OBJ_QTY     cnt;
;;;180        OS_OBJ_QTY     nbr_tasks;
;;;181        OS_PEND_DATA  *p_pend_data;
;;;182        OS_PEND_LIST  *p_pend_list;
;;;183        OS_TCB        *p_tcb;
;;;184        CPU_TS         ts;
;;;185        CPU_SR_ALLOC();
00000a  2000              MOVS     r0,#0
00000c  9000              STR      r0,[sp,#0]
;;;186    
;;;187    
;;;188    
;;;189    #ifdef OS_SAFETY_CRITICAL
;;;190        if (p_err == (OS_ERR *)0) {
;;;191            OS_SAFETY_CRITICAL_EXCEPTION();
;;;192            return ((OS_OBJ_QTY)0);
;;;193        }
;;;194    #endif
;;;195    
;;;196    #if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
;;;197        if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Not allowed to delete a semaphore from an ISR          */
;;;198           *p_err = OS_ERR_DEL_ISR;
;;;199            return ((OS_OBJ_QTY)0);
;;;200        }
;;;201    #endif
;;;202    
;;;203    #if OS_CFG_ARG_CHK_EN > 0u
;;;204        if (p_sem == (OS_SEM *)0) {                             /* Validate 'p_sem'                                       */
00000e  b92d              CBNZ     r5,|L2.28|
;;;205           *p_err = OS_ERR_OBJ_PTR_NULL;
000010  f64550c3          MOV      r0,#0x5dc3
000014  8020              STRH     r0,[r4,#0]
;;;206            return ((OS_OBJ_QTY)0);
000016  2000              MOVS     r0,#0
                  |L2.24|
;;;207        }
;;;208        switch (opt) {                                          /* Validate 'opt'                                         */
;;;209            case OS_OPT_DEL_NO_PEND:
;;;210            case OS_OPT_DEL_ALWAYS:
;;;211                 break;
;;;212    
;;;213            default:
;;;214                *p_err = OS_ERR_OPT_INVALID;
;;;215                 return ((OS_OBJ_QTY)0);
;;;216        }
;;;217    #endif
;;;218    
;;;219    #if OS_CFG_OBJ_TYPE_CHK_EN > 0u
;;;220        if (p_sem->Type != OS_OBJ_TYPE_SEM) {                   /* Make sure semaphore was created                        */
;;;221           *p_err = OS_ERR_OBJ_TYPE;
;;;222            return ((OS_OBJ_QTY)0);
;;;223        }
;;;224    #endif
;;;225    
;;;226        CPU_CRITICAL_ENTER();
;;;227        p_pend_list = &p_sem->PendList;
;;;228        cnt         = p_pend_list->NbrEntries;
;;;229        nbr_tasks   = cnt;
;;;230        switch (opt) {
;;;231            case OS_OPT_DEL_NO_PEND:                            /* Delete semaphore only if no task waiting               */
;;;232                 if (nbr_tasks == (OS_OBJ_QTY)0) {
;;;233    #if OS_CFG_DBG_EN > 0u
;;;234                     OS_SemDbgListRemove(p_sem);
;;;235    #endif
;;;236                     OSSemQty--;
;;;237    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
;;;238                     TRACE_OS_SEM_DEL(p_sem);                   /* Record the event.                                      */
;;;239    #endif
;;;240                     OS_SemClr(p_sem);
;;;241                     CPU_CRITICAL_EXIT();
;;;242                    *p_err = OS_ERR_NONE;
;;;243                 } else {
;;;244                     CPU_CRITICAL_EXIT();
;;;245                    *p_err = OS_ERR_TASK_WAITING;
;;;246                 }
;;;247                 break;
;;;248    
;;;249            case OS_OPT_DEL_ALWAYS:                             /* Always delete the semaphore                            */
;;;250                 OS_CRITICAL_ENTER_CPU_EXIT();
;;;251                 ts = OS_TS_GET();                              /* Get local time stamp so all tasks get the same time    */
;;;252                 while (cnt > 0u) {                             /* Remove all tasks on the pend list                      */
;;;253                     p_pend_data = p_pend_list->HeadPtr;
;;;254                     p_tcb       = p_pend_data->TCBPtr;
;;;255                     OS_PendObjDel((OS_PEND_OBJ *)((void *)p_sem),
;;;256                                   p_tcb,
;;;257                                   ts);
;;;258                     cnt--;
;;;259                 }
;;;260    #if OS_CFG_DBG_EN > 0u
;;;261                 OS_SemDbgListRemove(p_sem);
;;;262    #endif
;;;263                 OSSemQty--;
;;;264    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
;;;265                 TRACE_OS_SEM_DEL(p_sem);                       /* Record the event.                                      */
;;;266    #endif
;;;267                 OS_SemClr(p_sem);
;;;268                 OS_CRITICAL_EXIT_NO_SCHED();
;;;269                 OSSched();                                     /* Find highest priority task ready to run                */
;;;270                *p_err = OS_ERR_NONE;
;;;271                 break;
;;;272    
;;;273            default:
;;;274                 CPU_CRITICAL_EXIT();
;;;275                *p_err = OS_ERR_OPT_INVALID;
;;;276                 break;
;;;277        }
;;;278        return ((OS_OBJ_QTY)nbr_tasks);
;;;279    }
000018  e8bd9ffc          POP      {r2-r12,pc}
                  |L2.28|
00001c  f1b80f00          CMP      r8,#0                 ;208
000020  d003              BEQ      |L2.42|
000022  f1b80f01          CMP      r8,#1                 ;208
000026  d102              BNE      |L2.46|
000028  e000              B        |L2.44|
                  |L2.42|
00002a  bf00              NOP                            ;210
                  |L2.44|
00002c  e004              B        |L2.56|
                  |L2.46|
00002e  f6456025          MOV      r0,#0x5e25            ;214
000032  8020              STRH     r0,[r4,#0]            ;214
000034  2000              MOVS     r0,#0                 ;215
000036  e7ef              B        |L2.24|
                  |L2.56|
000038  bf00              NOP                            ;211
00003a  4939              LDR      r1,|L2.288|
00003c  6828              LDR      r0,[r5,#0]            ;220
00003e  4288              CMP      r0,r1                 ;220
000040  d004              BEQ      |L2.76|
000042  f64550c4          MOV      r0,#0x5dc4            ;221
000046  8020              STRH     r0,[r4,#0]            ;221
000048  2000              MOVS     r0,#0                 ;222
00004a  e7e5              B        |L2.24|
                  |L2.76|
00004c  bf00              NOP                            ;226
00004e  bf00              NOP                            ;226
000050  f7fffffe          BL       CPU_SR_Save
000054  9000              STR      r0,[sp,#0]            ;226
000056  bf00              NOP                            ;226
000058  bf00              NOP                            ;226
00005a  f1050908          ADD      r9,r5,#8              ;227
00005e  f8b96008          LDRH     r6,[r9,#8]            ;228
000062  4637              MOV      r7,r6                 ;229
000064  f1b80f00          CMP      r8,#0                 ;230
000068  d003              BEQ      |L2.114|
00006a  f1b80f01          CMP      r8,#1                 ;230
00006e  d149              BNE      |L2.260|
000070  e020              B        |L2.180|
                  |L2.114|
000072  b9a7              CBNZ     r7,|L2.158|
000074  4628              MOV      r0,r5                 ;234
000076  f7fffffe          BL       OS_SemDbgListRemove
00007a  482a              LDR      r0,|L2.292|
00007c  8800              LDRH     r0,[r0,#0]            ;236  ; OSSemQty
00007e  1e40              SUBS     r0,r0,#1              ;236
000080  4928              LDR      r1,|L2.292|
000082  8008              STRH     r0,[r1,#0]            ;236
000084  4628              MOV      r0,r5                 ;240
000086  f7fffffe          BL       OS_SemClr
00008a  bf00              NOP                            ;241
00008c  bf00              NOP                            ;241
00008e  9800              LDR      r0,[sp,#0]            ;241
000090  f7fffffe          BL       CPU_SR_Restore
000094  bf00              NOP                            ;241
000096  bf00              NOP                            ;241
000098  2000              MOVS     r0,#0                 ;242
00009a  8020              STRH     r0,[r4,#0]            ;242
00009c  e009              B        |L2.178|
                  |L2.158|
00009e  bf00              NOP                            ;244
0000a0  bf00              NOP                            ;244
0000a2  9800              LDR      r0,[sp,#0]            ;244
0000a4  f7fffffe          BL       CPU_SR_Restore
0000a8  bf00              NOP                            ;244
0000aa  bf00              NOP                            ;244
0000ac  f247105f          MOV      r0,#0x715f            ;245
0000b0  8020              STRH     r0,[r4,#0]            ;245
                  |L2.178|
0000b2  e032              B        |L2.282|
                  |L2.180|
0000b4  f7fffffe          BL       CPU_TS_TmrRd
0000b8  9001              STR      r0,[sp,#4]            ;251
0000ba  e00a              B        |L2.210|
                  |L2.188|
0000bc  f8d9a000          LDR      r10,[r9,#0]           ;253
0000c0  f8dab008          LDR      r11,[r10,#8]          ;254
0000c4  4659              MOV      r1,r11                ;255
0000c6  4628              MOV      r0,r5                 ;255
0000c8  9a01              LDR      r2,[sp,#4]            ;255
0000ca  f7fffffe          BL       OS_PendObjDel
0000ce  1e70              SUBS     r0,r6,#1              ;258
0000d0  b286              UXTH     r6,r0                 ;258
                  |L2.210|
0000d2  2e00              CMP      r6,#0                 ;252
0000d4  d1f2              BNE      |L2.188|
0000d6  4628              MOV      r0,r5                 ;261
0000d8  f7fffffe          BL       OS_SemDbgListRemove
0000dc  4811              LDR      r0,|L2.292|
0000de  8800              LDRH     r0,[r0,#0]            ;263  ; OSSemQty
0000e0  1e40              SUBS     r0,r0,#1              ;263
0000e2  4910              LDR      r1,|L2.292|
0000e4  8008              STRH     r0,[r1,#0]            ;263
0000e6  4628              MOV      r0,r5                 ;267
0000e8  f7fffffe          BL       OS_SemClr
0000ec  bf00              NOP                            ;268
0000ee  bf00              NOP                            ;268
0000f0  9800              LDR      r0,[sp,#0]            ;268
0000f2  f7fffffe          BL       CPU_SR_Restore
0000f6  bf00              NOP                            ;268
0000f8  bf00              NOP                            ;268
0000fa  f7fffffe          BL       OSSched
0000fe  2000              MOVS     r0,#0                 ;270
000100  8020              STRH     r0,[r4,#0]            ;270
000102  e00a              B        |L2.282|
                  |L2.260|
000104  bf00              NOP                            ;274
000106  bf00              NOP                            ;274
000108  9800              LDR      r0,[sp,#0]            ;274
00010a  f7fffffe          BL       CPU_SR_Restore
00010e  bf00              NOP                            ;274
000110  bf00              NOP                            ;274
000112  f6456025          MOV      r0,#0x5e25            ;275
000116  8020              STRH     r0,[r4,#0]            ;275
000118  bf00              NOP                            ;276
                  |L2.282|
00011a  bf00              NOP                            ;247
00011c  4638              MOV      r0,r7                 ;278
00011e  e77b              B        |L2.24|
;;;280    #endif
                          ENDP

                  |L2.288|
                          DCD      0x414d4553
                  |L2.292|
                          DCD      OSSemQty

                          AREA ||i.OSSemPend||, CODE, READONLY, ALIGN=2

                  OSSemPend PROC
;;;328    
;;;329    OS_SEM_CTR  OSSemPend (OS_SEM   *p_sem,
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;330                           OS_TICK   timeout,
;;;331                           OS_OPT    opt,
;;;332                           CPU_TS   *p_ts,
;;;333                           OS_ERR   *p_err)
;;;334    {
000004  b088              SUB      sp,sp,#0x20
000006  4605              MOV      r5,r0
000008  4689              MOV      r9,r1
00000a  4690              MOV      r8,r2
00000c  461c              MOV      r4,r3
00000e  9e10              LDR      r6,[sp,#0x40]
;;;335        OS_SEM_CTR    ctr;
;;;336        OS_PEND_DATA  pend_data;
;;;337        CPU_SR_ALLOC();
000010  f04f0a00          MOV      r10,#0
;;;338    
;;;339    
;;;340    
;;;341    #ifdef OS_SAFETY_CRITICAL
;;;342        if (p_err == (OS_ERR *)0) {
;;;343    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
;;;344            TRACE_OS_SEM_PEND_FAILED(p_sem);                    /* Record the event.                                      */
;;;345    #endif
;;;346            OS_SAFETY_CRITICAL_EXCEPTION();
;;;347            return ((OS_SEM_CTR)0);
;;;348        }
;;;349    #endif
;;;350    
;;;351    #if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
;;;352        if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Not allowed to call from an ISR                        */
;;;353    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
;;;354            TRACE_OS_SEM_PEND_FAILED(p_sem);                    /* Record the event.                                      */
;;;355    #endif
;;;356           *p_err = OS_ERR_PEND_ISR;
;;;357            return ((OS_SEM_CTR)0);
;;;358        }
;;;359    #endif
;;;360    
;;;361    #if OS_CFG_ARG_CHK_EN > 0u
;;;362        if (p_sem == (OS_SEM *)0) {                             /* Validate 'p_sem'                                       */
000014  b935              CBNZ     r5,|L3.36|
;;;363           *p_err = OS_ERR_OBJ_PTR_NULL;
000016  f64550c3          MOV      r0,#0x5dc3
00001a  8030              STRH     r0,[r6,#0]
;;;364            return ((OS_SEM_CTR)0);
00001c  2000              MOVS     r0,#0
                  |L3.30|
;;;365        }
;;;366        switch (opt) {                                          /* Validate 'opt'                                         */
;;;367            case OS_OPT_PEND_BLOCKING:
;;;368            case OS_OPT_PEND_NON_BLOCKING:
;;;369                 break;
;;;370    
;;;371            default:
;;;372    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
;;;373                 TRACE_OS_SEM_PEND_FAILED(p_sem);               /* Record the event.                                      */
;;;374    #endif
;;;375                *p_err = OS_ERR_OPT_INVALID;
;;;376                 return ((OS_SEM_CTR)0);
;;;377        }
;;;378    #endif
;;;379    
;;;380    #if OS_CFG_OBJ_TYPE_CHK_EN > 0u
;;;381        if (p_sem->Type != OS_OBJ_TYPE_SEM) {                   /* Make sure semaphore was created                        */
;;;382    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
;;;383            TRACE_OS_SEM_PEND_FAILED(p_sem);                    /* Record the event.                                      */
;;;384    #endif
;;;385           *p_err = OS_ERR_OBJ_TYPE;
;;;386            return ((OS_SEM_CTR)0);
;;;387        }
;;;388    #endif
;;;389    
;;;390        if (p_ts != (CPU_TS *)0) {
;;;391           *p_ts  = (CPU_TS)0;                                  /* Initialize the returned timestamp                      */
;;;392        }
;;;393        CPU_CRITICAL_ENTER();
;;;394        if (p_sem->Ctr > (OS_SEM_CTR)0) {                       /* Resource available?                                    */
;;;395            p_sem->Ctr--;                                       /* Yes, caller may proceed                                */
;;;396            if (p_ts != (CPU_TS *)0) {
;;;397               *p_ts  = p_sem->TS;                              /*      get timestamp of last post                        */
;;;398            }
;;;399            ctr   = p_sem->Ctr;
;;;400            CPU_CRITICAL_EXIT();
;;;401           *p_err = OS_ERR_NONE;
;;;402    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
;;;403            TRACE_OS_SEM_PEND(p_sem);                           /* Record the event.                                      */
;;;404    #endif
;;;405            return (ctr);
;;;406        }
;;;407    
;;;408        if ((opt & OS_OPT_PEND_NON_BLOCKING) != (OS_OPT)0) {    /* Caller wants to block if not available?                */
;;;409            ctr   = p_sem->Ctr;                                 /* No                                                     */
;;;410            CPU_CRITICAL_EXIT();
;;;411           *p_err = OS_ERR_PEND_WOULD_BLOCK;
;;;412    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
;;;413            TRACE_OS_SEM_PEND_FAILED(p_sem);                    /* Record the event.                                      */
;;;414    #endif
;;;415            return (ctr);
;;;416        } else {                                                /* Yes                                                    */
;;;417            if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0) {    /* Can't pend when the scheduler is locked                */
;;;418                CPU_CRITICAL_EXIT();
;;;419    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
;;;420                TRACE_OS_SEM_PEND_FAILED(p_sem);                /* Record the event.                                      */
;;;421    #endif
;;;422               *p_err = OS_ERR_SCHED_LOCKED;
;;;423                return ((OS_SEM_CTR)0);
;;;424            }
;;;425        }
;;;426                                                                /* Lock the scheduler/re-enable interrupts                */
;;;427        OS_CRITICAL_ENTER_CPU_EXIT();
;;;428        OS_Pend(&pend_data,                                     /* Block task pending on Semaphore                        */
;;;429                (OS_PEND_OBJ *)((void *)p_sem),
;;;430                OS_TASK_PEND_ON_SEM,
;;;431                timeout);
;;;432        OS_CRITICAL_EXIT_NO_SCHED();
;;;433    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
;;;434        TRACE_OS_SEM_PEND_BLOCK(p_sem);                         /* Record the event.                                      */
;;;435    #endif
;;;436        OSSched();                                              /* Find the next highest priority task ready to run       */
;;;437    
;;;438        CPU_CRITICAL_ENTER();
;;;439        switch (OSTCBCurPtr->PendStatus) {
;;;440            case OS_STATUS_PEND_OK:                             /* We got the semaphore                                   */
;;;441                 if (p_ts != (CPU_TS *)0) {
;;;442                    *p_ts  =  OSTCBCurPtr->TS;
;;;443                 }
;;;444    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
;;;445                 TRACE_OS_SEM_PEND(p_sem);                      /* Record the event.                                      */
;;;446    #endif
;;;447                *p_err = OS_ERR_NONE;
;;;448                 break;
;;;449    
;;;450            case OS_STATUS_PEND_ABORT:                          /* Indicate that we aborted                               */
;;;451                 if (p_ts != (CPU_TS *)0) {
;;;452                    *p_ts  =  OSTCBCurPtr->TS;
;;;453                 }
;;;454    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
;;;455                 TRACE_OS_SEM_PEND_FAILED(p_sem);               /* Record the event.                                      */
;;;456    #endif
;;;457                *p_err = OS_ERR_PEND_ABORT;
;;;458                 break;
;;;459    
;;;460            case OS_STATUS_PEND_TIMEOUT:                        /* Indicate that we didn't get semaphore within timeout   */
;;;461                 if (p_ts != (CPU_TS *)0) {
;;;462                    *p_ts  = (CPU_TS  )0;
;;;463                 }
;;;464    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
;;;465                 TRACE_OS_SEM_PEND_FAILED(p_sem);               /* Record the event.                                      */
;;;466    #endif
;;;467                *p_err = OS_ERR_TIMEOUT;
;;;468                 break;
;;;469    
;;;470            case OS_STATUS_PEND_DEL:                            /* Indicate that object pended on has been deleted        */
;;;471                 if (p_ts != (CPU_TS *)0) {
;;;472                    *p_ts  =  OSTCBCurPtr->TS;
;;;473                 }
;;;474    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
;;;475                 TRACE_OS_SEM_PEND_FAILED(p_sem);               /* Record the event.                                      */
;;;476    #endif
;;;477                *p_err = OS_ERR_OBJ_DEL;
;;;478                 break;
;;;479    
;;;480            default:
;;;481    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
;;;482                 TRACE_OS_SEM_PEND_FAILED(p_sem);               /* Record the event.                                      */
;;;483    #endif
;;;484                *p_err = OS_ERR_STATUS_INVALID;
;;;485                 CPU_CRITICAL_EXIT();
;;;486                 return ((OS_SEM_CTR)0);
;;;487        }
;;;488        ctr = p_sem->Ctr;
;;;489        CPU_CRITICAL_EXIT();
;;;490        return (ctr);
;;;491    }
00001e  b008              ADD      sp,sp,#0x20
000020  e8bd87f0          POP      {r4-r10,pc}
                  |L3.36|
000024  f1b80f00          CMP      r8,#0                 ;366
000028  d003              BEQ      |L3.50|
00002a  f5b84f00          CMP      r8,#0x8000            ;366
00002e  d102              BNE      |L3.54|
000030  e000              B        |L3.52|
                  |L3.50|
000032  bf00              NOP                            ;368
                  |L3.52|
000034  e004              B        |L3.64|
                  |L3.54|
000036  f6456025          MOV      r0,#0x5e25            ;375
00003a  8030              STRH     r0,[r6,#0]            ;375
00003c  2000              MOVS     r0,#0                 ;376
00003e  e7ee              B        |L3.30|
                  |L3.64|
000040  bf00              NOP                            ;369
000042  4950              LDR      r1,|L3.388|
000044  6828              LDR      r0,[r5,#0]            ;381
000046  4288              CMP      r0,r1                 ;381
000048  d004              BEQ      |L3.84|
00004a  f64550c4          MOV      r0,#0x5dc4            ;385
00004e  8030              STRH     r0,[r6,#0]            ;385
000050  2000              MOVS     r0,#0                 ;386
000052  e7e4              B        |L3.30|
                  |L3.84|
000054  b10c              CBZ      r4,|L3.90|
000056  2000              MOVS     r0,#0                 ;391
000058  6020              STR      r0,[r4,#0]            ;391
                  |L3.90|
00005a  bf00              NOP                            ;393
00005c  bf00              NOP                            ;393
00005e  f7fffffe          BL       CPU_SR_Save
000062  4682              MOV      r10,r0                ;393
000064  bf00              NOP                            ;393
000066  bf00              NOP                            ;393
000068  6a28              LDR      r0,[r5,#0x20]         ;394
00006a  b188              CBZ      r0,|L3.144|
00006c  6a28              LDR      r0,[r5,#0x20]         ;395
00006e  1e40              SUBS     r0,r0,#1              ;395
000070  6228              STR      r0,[r5,#0x20]         ;395
000072  b10c              CBZ      r4,|L3.120|
000074  6a68              LDR      r0,[r5,#0x24]         ;397
000076  6020              STR      r0,[r4,#0]            ;397
                  |L3.120|
000078  6a2f              LDR      r7,[r5,#0x20]         ;399
00007a  bf00              NOP                            ;400
00007c  bf00              NOP                            ;400
00007e  4650              MOV      r0,r10                ;400
000080  f7fffffe          BL       CPU_SR_Restore
000084  bf00              NOP                            ;400
000086  bf00              NOP                            ;400
000088  2000              MOVS     r0,#0                 ;401
00008a  8030              STRH     r0,[r6,#0]            ;401
00008c  4638              MOV      r0,r7                 ;405
00008e  e7c6              B        |L3.30|
                  |L3.144|
000090  f4084000          AND      r0,r8,#0x8000         ;408
000094  b160              CBZ      r0,|L3.176|
000096  6a2f              LDR      r7,[r5,#0x20]         ;409
000098  bf00              NOP                            ;410
00009a  bf00              NOP                            ;410
00009c  4650              MOV      r0,r10                ;410
00009e  f7fffffe          BL       CPU_SR_Restore
0000a2  bf00              NOP                            ;410
0000a4  bf00              NOP                            ;410
0000a6  f24610b0          MOV      r0,#0x61b0            ;411
0000aa  8030              STRH     r0,[r6,#0]            ;411
0000ac  4638              MOV      r0,r7                 ;415
0000ae  e7b6              B        |L3.30|
                  |L3.176|
0000b0  4835              LDR      r0,|L3.392|
0000b2  7800              LDRB     r0,[r0,#0]            ;417  ; OSSchedLockNestingCtr
0000b4  2800              CMP      r0,#0                 ;417
0000b6  dd0b              BLE      |L3.208|
0000b8  bf00              NOP                            ;418
0000ba  bf00              NOP                            ;418
0000bc  4650              MOV      r0,r10                ;418
0000be  f7fffffe          BL       CPU_SR_Restore
0000c2  bf00              NOP                            ;418
0000c4  bf00              NOP                            ;418
0000c6  f6465063          MOV      r0,#0x6d63            ;422
0000ca  8030              STRH     r0,[r6,#0]            ;422
0000cc  2000              MOVS     r0,#0                 ;423
0000ce  e7a6              B        |L3.30|
                  |L3.208|
0000d0  464b              MOV      r3,r9                 ;428
0000d2  2206              MOVS     r2,#6                 ;428
0000d4  4629              MOV      r1,r5                 ;428
0000d6  4668              MOV      r0,sp                 ;428
0000d8  f7fffffe          BL       OS_Pend
0000dc  bf00              NOP                            ;432
0000de  bf00              NOP                            ;432
0000e0  4650              MOV      r0,r10                ;432
0000e2  f7fffffe          BL       CPU_SR_Restore
0000e6  bf00              NOP                            ;432
0000e8  bf00              NOP                            ;432
0000ea  f7fffffe          BL       OSSched
0000ee  bf00              NOP                            ;438
0000f0  bf00              NOP                            ;438
0000f2  f7fffffe          BL       CPU_SR_Save
0000f6  4682              MOV      r10,r0                ;438
0000f8  bf00              NOP                            ;438
0000fa  bf00              NOP                            ;438
0000fc  4823              LDR      r0,|L3.396|
0000fe  6800              LDR      r0,[r0,#0]            ;439  ; OSTCBCurPtr
000100  f8900035          LDRB     r0,[r0,#0x35]         ;439
000104  b130              CBZ      r0,|L3.276|
000106  2801              CMP      r0,#1                 ;439
000108  d00c              BEQ      |L3.292|
00010a  2802              CMP      r0,#2                 ;439
00010c  d01a              BEQ      |L3.324|
00010e  2803              CMP      r0,#3                 ;439
000110  d121              BNE      |L3.342|
000112  e010              B        |L3.310|
                  |L3.276|
000114  b11c              CBZ      r4,|L3.286|
000116  481d              LDR      r0,|L3.396|
000118  6800              LDR      r0,[r0,#0]            ;442  ; OSTCBCurPtr
00011a  6c80              LDR      r0,[r0,#0x48]         ;442
00011c  6020              STR      r0,[r4,#0]            ;442
                  |L3.286|
00011e  2000              MOVS     r0,#0                 ;447
000120  8030              STRH     r0,[r6,#0]            ;447
000122  e024              B        |L3.366|
                  |L3.292|
000124  b11c              CBZ      r4,|L3.302|
000126  4819              LDR      r0,|L3.396|
000128  6800              LDR      r0,[r0,#0]            ;452  ; OSTCBCurPtr
00012a  6c80              LDR      r0,[r0,#0x48]         ;452
00012c  6020              STR      r0,[r4,#0]            ;452
                  |L3.302|
00012e  f24610a9          MOV      r0,#0x61a9            ;457
000132  8030              STRH     r0,[r6,#0]            ;457
000134  e01b              B        |L3.366|
                  |L3.310|
000136  b10c              CBZ      r4,|L3.316|
000138  2000              MOVS     r0,#0                 ;462
00013a  6020              STR      r0,[r4,#0]            ;462
                  |L3.316|
00013c  f24720d9          MOV      r0,#0x72d9            ;467
000140  8030              STRH     r0,[r6,#0]            ;467
000142  e014              B        |L3.366|
                  |L3.324|
000144  b11c              CBZ      r4,|L3.334|
000146  4811              LDR      r0,|L3.396|
000148  6800              LDR      r0,[r0,#0]            ;472  ; OSTCBCurPtr
00014a  6c80              LDR      r0,[r0,#0x48]         ;472
00014c  6020              STR      r0,[r4,#0]            ;472
                  |L3.334|
00014e  f64550c2          MOV      r0,#0x5dc2            ;477
000152  8030              STRH     r0,[r6,#0]            ;477
000154  e00b              B        |L3.366|
                  |L3.342|
000156  f646602e          MOV      r0,#0x6e2e            ;484
00015a  8030              STRH     r0,[r6,#0]            ;484
00015c  bf00              NOP                            ;485
00015e  bf00              NOP                            ;485
000160  4650              MOV      r0,r10                ;485
000162  f7fffffe          BL       CPU_SR_Restore
000166  bf00              NOP                            ;485
000168  bf00              NOP                            ;485
00016a  2000              MOVS     r0,#0                 ;486
00016c  e757              B        |L3.30|
                  |L3.366|
00016e  bf00              NOP                            ;448
000170  6a2f              LDR      r7,[r5,#0x20]         ;488
000172  bf00              NOP                            ;489
000174  bf00              NOP                            ;489
000176  4650              MOV      r0,r10                ;489
000178  f7fffffe          BL       CPU_SR_Restore
00017c  bf00              NOP                            ;489
00017e  bf00              NOP                            ;489
000180  4638              MOV      r0,r7                 ;490
000182  e74c              B        |L3.30|
;;;492    
                          ENDP

                  |L3.388|
                          DCD      0x414d4553
                  |L3.392|
                          DCD      OSSchedLockNestingCtr
                  |L3.396|
                          DCD      OSTCBCurPtr

                          AREA ||i.OSSemPendAbort||, CODE, READONLY, ALIGN=2

                  OSSemPendAbort PROC
;;;525    #if OS_CFG_SEM_PEND_ABORT_EN > 0u
;;;526    OS_OBJ_QTY  OSSemPendAbort (OS_SEM  *p_sem,
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;527                                OS_OPT   opt,
;;;528                                OS_ERR  *p_err)
;;;529    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;530        OS_PEND_LIST  *p_pend_list;
;;;531        OS_TCB        *p_tcb;
;;;532        CPU_TS         ts;
;;;533        OS_OBJ_QTY     nbr_tasks;
;;;534        CPU_SR_ALLOC();
00000a  f04f0a00          MOV      r10,#0
;;;535    
;;;536    
;;;537    
;;;538    #ifdef OS_SAFETY_CRITICAL
;;;539        if (p_err == (OS_ERR *)0) {
;;;540            OS_SAFETY_CRITICAL_EXCEPTION();
;;;541            return ((OS_OBJ_QTY)0u);
;;;542        }
;;;543    #endif
;;;544    
;;;545    #if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
;;;546        if (OSIntNestingCtr > (OS_NESTING_CTR)0u) {             /* Not allowed to Pend Abort from an ISR                  */
;;;547           *p_err =  OS_ERR_PEND_ABORT_ISR;
;;;548            return ((OS_OBJ_QTY)0u);
;;;549        }
;;;550    #endif
;;;551    
;;;552    #if OS_CFG_ARG_CHK_EN > 0u
;;;553        if (p_sem == (OS_SEM *)0) {                             /* Validate 'p_sem'                                       */
00000e  b92d              CBNZ     r5,|L4.28|
;;;554           *p_err =  OS_ERR_OBJ_PTR_NULL;
000010  f64550c3          MOV      r0,#0x5dc3
000014  8020              STRH     r0,[r4,#0]
;;;555            return ((OS_OBJ_QTY)0u);
000016  2000              MOVS     r0,#0
                  |L4.24|
;;;556        }
;;;557        switch (opt) {                                          /* Validate 'opt'                                         */
;;;558            case OS_OPT_PEND_ABORT_1:
;;;559            case OS_OPT_PEND_ABORT_ALL:
;;;560            case OS_OPT_PEND_ABORT_1   | OS_OPT_POST_NO_SCHED:
;;;561            case OS_OPT_PEND_ABORT_ALL | OS_OPT_POST_NO_SCHED:
;;;562                 break;
;;;563    
;;;564            default:
;;;565                *p_err =  OS_ERR_OPT_INVALID;
;;;566                 return ((OS_OBJ_QTY)0u);
;;;567        }
;;;568    #endif
;;;569    
;;;570    #if OS_CFG_OBJ_TYPE_CHK_EN > 0u
;;;571        if (p_sem->Type != OS_OBJ_TYPE_SEM) {                   /* Make sure semaphore was created                        */
;;;572           *p_err =  OS_ERR_OBJ_TYPE;
;;;573            return ((OS_OBJ_QTY)0u);
;;;574        }
;;;575    #endif
;;;576    
;;;577        CPU_CRITICAL_ENTER();
;;;578        p_pend_list = &p_sem->PendList;
;;;579        if (p_pend_list->NbrEntries == (OS_OBJ_QTY)0u) {        /* Any task waiting on semaphore?                         */
;;;580            CPU_CRITICAL_EXIT();                                /* No                                                     */
;;;581           *p_err =  OS_ERR_PEND_ABORT_NONE;
;;;582            return ((OS_OBJ_QTY)0u);
;;;583        }
;;;584    
;;;585        OS_CRITICAL_ENTER_CPU_EXIT();
;;;586        nbr_tasks = 0u;
;;;587        ts        = OS_TS_GET();                                /* Get local time stamp so all tasks get the same time    */
;;;588        while (p_pend_list->NbrEntries > (OS_OBJ_QTY)0u) {
;;;589            p_tcb = p_pend_list->HeadPtr->TCBPtr;
;;;590            OS_PendAbort((OS_PEND_OBJ *)((void *)p_sem),
;;;591                         p_tcb,
;;;592                         ts);
;;;593            nbr_tasks++;
;;;594            if (opt != OS_OPT_PEND_ABORT_ALL) {                 /* Pend abort all tasks waiting?                          */
;;;595                break;                                          /* No                                                     */
;;;596            }
;;;597        }
;;;598        OS_CRITICAL_EXIT_NO_SCHED();
;;;599    
;;;600        if ((opt & OS_OPT_POST_NO_SCHED) == (OS_OPT)0u) {
;;;601            OSSched();                                          /* Run the scheduler                                      */
;;;602        }
;;;603    
;;;604       *p_err = OS_ERR_NONE;
;;;605        return (nbr_tasks);
;;;606    }
000018  e8bd9ff0          POP      {r4-r12,pc}
                  |L4.28|
00001c  b14e              CBZ      r6,|L4.50|
00001e  f5b67f80          CMP      r6,#0x100             ;557
000022  d007              BEQ      |L4.52|
000024  f5b64f00          CMP      r6,#0x8000            ;557
000028  d005              BEQ      |L4.54|
00002a  f5b64f01          CMP      r6,#0x8100            ;557
00002e  d104              BNE      |L4.58|
000030  e002              B        |L4.56|
                  |L4.50|
000032  bf00              NOP                            ;559
                  |L4.52|
000034  bf00              NOP                            ;560
                  |L4.54|
000036  bf00              NOP                            ;561
                  |L4.56|
000038  e004              B        |L4.68|
                  |L4.58|
00003a  f6456025          MOV      r0,#0x5e25            ;565
00003e  8020              STRH     r0,[r4,#0]            ;565
000040  2000              MOVS     r0,#0                 ;566
000042  e7e9              B        |L4.24|
                  |L4.68|
000044  bf00              NOP                            ;562
000046  4925              LDR      r1,|L4.220|
000048  6828              LDR      r0,[r5,#0]            ;571
00004a  4288              CMP      r0,r1                 ;571
00004c  d004              BEQ      |L4.88|
00004e  f64550c4          MOV      r0,#0x5dc4            ;572
000052  8020              STRH     r0,[r4,#0]            ;572
000054  2000              MOVS     r0,#0                 ;573
000056  e7df              B        |L4.24|
                  |L4.88|
000058  bf00              NOP                            ;577
00005a  bf00              NOP                            ;577
00005c  f7fffffe          BL       CPU_SR_Save
000060  4682              MOV      r10,r0                ;577
000062  bf00              NOP                            ;577
000064  bf00              NOP                            ;577
000066  f1050708          ADD      r7,r5,#8              ;578
00006a  8938              LDRH     r0,[r7,#8]            ;579
00006c  b958              CBNZ     r0,|L4.134|
00006e  bf00              NOP                            ;580
000070  bf00              NOP                            ;580
000072  4650              MOV      r0,r10                ;580
000074  f7fffffe          BL       CPU_SR_Restore
000078  bf00              NOP                            ;580
00007a  bf00              NOP                            ;580
00007c  f24610ab          MOV      r0,#0x61ab            ;581
000080  8020              STRH     r0,[r4,#0]            ;581
000082  2000              MOVS     r0,#0                 ;582
000084  e7c8              B        |L4.24|
                  |L4.134|
000086  f04f0800          MOV      r8,#0                 ;586
00008a  f7fffffe          BL       CPU_TS_TmrRd
00008e  4683              MOV      r11,r0                ;587
000090  e00f              B        |L4.178|
                  |L4.146|
000092  6838              LDR      r0,[r7,#0]            ;589
000094  f8d09008          LDR      r9,[r0,#8]            ;589
000098  465a              MOV      r2,r11                ;590
00009a  4649              MOV      r1,r9                 ;590
00009c  4628              MOV      r0,r5                 ;590
00009e  f7fffffe          BL       OS_PendAbort
0000a2  f1080001          ADD      r0,r8,#1              ;593
0000a6  fa1ff880          UXTH     r8,r0                 ;593
0000aa  f5b67f80          CMP      r6,#0x100             ;594
0000ae  d000              BEQ      |L4.178|
0000b0  e002              B        |L4.184|
                  |L4.178|
0000b2  8938              LDRH     r0,[r7,#8]            ;588
0000b4  2800              CMP      r0,#0                 ;588
0000b6  dcec              BGT      |L4.146|
                  |L4.184|
0000b8  bf00              NOP                            ;595
0000ba  bf00              NOP                            ;598
0000bc  bf00              NOP                            ;598
0000be  4650              MOV      r0,r10                ;598
0000c0  f7fffffe          BL       CPU_SR_Restore
0000c4  bf00              NOP                            ;598
0000c6  bf00              NOP                            ;598
0000c8  f4064000          AND      r0,r6,#0x8000         ;600
0000cc  b908              CBNZ     r0,|L4.210|
0000ce  f7fffffe          BL       OSSched
                  |L4.210|
0000d2  2000              MOVS     r0,#0                 ;604
0000d4  8020              STRH     r0,[r4,#0]            ;604
0000d6  4640              MOV      r0,r8                 ;605
0000d8  e79e              B        |L4.24|
;;;607    #endif
                          ENDP

0000da  0000              DCW      0x0000
                  |L4.220|
                          DCD      0x414d4553

                          AREA ||i.OSSemPost||, CODE, READONLY, ALIGN=2

                  OSSemPost PROC
;;;638    
;;;639    OS_SEM_CTR  OSSemPost (OS_SEM  *p_sem,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;640                           OS_OPT   opt,
;;;641                           OS_ERR  *p_err)
;;;642    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;643        OS_SEM_CTR  ctr;
;;;644        CPU_TS      ts;
;;;645    
;;;646    
;;;647    
;;;648    #ifdef OS_SAFETY_CRITICAL
;;;649        if (p_err == (OS_ERR *)0) {
;;;650    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
;;;651            TRACE_OS_SEM_POST_FAILED(p_sem);                    /* Record the event.                                      */
;;;652    #endif
;;;653            OS_SAFETY_CRITICAL_EXCEPTION();
;;;654            return ((OS_SEM_CTR)0);
;;;655        }
;;;656    #endif
;;;657    
;;;658    #if OS_CFG_ARG_CHK_EN > 0u
;;;659        if (p_sem == (OS_SEM *)0) {                             /* Validate 'p_sem'                                       */
00000a  b92d              CBNZ     r5,|L5.24|
;;;660    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
;;;661            TRACE_OS_SEM_POST_FAILED(p_sem);                    /* Record the event.                                      */
;;;662    #endif
;;;663           *p_err  = OS_ERR_OBJ_PTR_NULL;
00000c  f64550c3          MOV      r0,#0x5dc3
000010  8020              STRH     r0,[r4,#0]
;;;664            return ((OS_SEM_CTR)0);
000012  2000              MOVS     r0,#0
                  |L5.20|
;;;665        }
;;;666        switch (opt) {                                          /* Validate 'opt'                                         */
;;;667            case OS_OPT_POST_1:
;;;668            case OS_OPT_POST_ALL:
;;;669            case OS_OPT_POST_1   | OS_OPT_POST_NO_SCHED:
;;;670            case OS_OPT_POST_ALL | OS_OPT_POST_NO_SCHED:
;;;671                 break;
;;;672    
;;;673            default:
;;;674    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
;;;675                 TRACE_OS_SEM_POST_FAILED(p_sem);               /* Record the event.                                      */
;;;676    #endif
;;;677                *p_err =  OS_ERR_OPT_INVALID;
;;;678                 return ((OS_SEM_CTR)0u);
;;;679        }
;;;680    #endif
;;;681    
;;;682    #if OS_CFG_OBJ_TYPE_CHK_EN > 0u
;;;683        if (p_sem->Type != OS_OBJ_TYPE_SEM) {                   /* Make sure semaphore was created                        */
;;;684    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
;;;685            TRACE_OS_SEM_POST_FAILED(p_sem);                    /* Record the event.                                      */
;;;686    #endif
;;;687           *p_err = OS_ERR_OBJ_TYPE;
;;;688            return ((OS_SEM_CTR)0);
;;;689        }
;;;690    #endif
;;;691    
;;;692        ts = OS_TS_GET();                                       /* Get timestamp                                          */
;;;693    
;;;694    #if OS_CFG_ISR_POST_DEFERRED_EN > 0u
;;;695        if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* See if called from an ISR                              */
;;;696            OS_IntQPost((OS_OBJ_TYPE)OS_OBJ_TYPE_SEM,           /* Post to ISR queue                                      */
;;;697                        (void      *)p_sem,
;;;698                        (void      *)0,
;;;699                        (OS_MSG_SIZE)0,
;;;700                        (OS_FLAGS   )0,
;;;701                        (OS_OPT     )opt,
;;;702                        (CPU_TS     )ts,
;;;703                        (OS_ERR    *)p_err);
;;;704            return ((OS_SEM_CTR)0);
;;;705        }
;;;706    #endif
;;;707    
;;;708    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
;;;709        TRACE_OS_SEM_POST(p_sem);                               /* Record the event.                                      */
;;;710    #endif
;;;711    
;;;712        ctr = OS_SemPost(p_sem,                                 /* Post to semaphore                                      */
;;;713                         opt,
;;;714                         ts,
;;;715                         p_err);
;;;716    
;;;717        return (ctr);
;;;718    }
000014  e8bd81f0          POP      {r4-r8,pc}
                  |L5.24|
000018  b14e              CBZ      r6,|L5.46|
00001a  f5b67f00          CMP      r6,#0x200             ;666
00001e  d007              BEQ      |L5.48|
000020  f5b64f00          CMP      r6,#0x8000            ;666
000024  d005              BEQ      |L5.50|
000026  f5b64f02          CMP      r6,#0x8200            ;666
00002a  d104              BNE      |L5.54|
00002c  e002              B        |L5.52|
                  |L5.46|
00002e  bf00              NOP                            ;668
                  |L5.48|
000030  bf00              NOP                            ;669
                  |L5.50|
000032  bf00              NOP                            ;670
                  |L5.52|
000034  e004              B        |L5.64|
                  |L5.54|
000036  f6456025          MOV      r0,#0x5e25            ;677
00003a  8020              STRH     r0,[r4,#0]            ;677
00003c  2000              MOVS     r0,#0                 ;678
00003e  e7e9              B        |L5.20|
                  |L5.64|
000040  bf00              NOP                            ;671
000042  490a              LDR      r1,|L5.108|
000044  6828              LDR      r0,[r5,#0]            ;683
000046  4288              CMP      r0,r1                 ;683
000048  d004              BEQ      |L5.84|
00004a  f64550c4          MOV      r0,#0x5dc4            ;687
00004e  8020              STRH     r0,[r4,#0]            ;687
000050  2000              MOVS     r0,#0                 ;688
000052  e7df              B        |L5.20|
                  |L5.84|
000054  f7fffffe          BL       CPU_TS_TmrRd
000058  4680              MOV      r8,r0                 ;692
00005a  4623              MOV      r3,r4                 ;712
00005c  4642              MOV      r2,r8                 ;712
00005e  4631              MOV      r1,r6                 ;712
000060  4628              MOV      r0,r5                 ;712
000062  f7fffffe          BL       OS_SemPost
000066  4607              MOV      r7,r0                 ;712
000068  4638              MOV      r0,r7                 ;717
00006a  e7d3              B        |L5.20|
;;;719    
                          ENDP

                  |L5.108|
                          DCD      0x414d4553

                          AREA ||i.OSSemSet||, CODE, READONLY, ALIGN=2

                  OSSemSet PROC
;;;746    #if OS_CFG_SEM_SET_EN > 0u
;;;747    void  OSSemSet (OS_SEM      *p_sem,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;748                    OS_SEM_CTR   cnt,
;;;749                    OS_ERR      *p_err)
;;;750    {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4615              MOV      r5,r2
;;;751        OS_PEND_LIST  *p_pend_list;
;;;752        CPU_SR_ALLOC();
00000a  f04f0800          MOV      r8,#0
;;;753    
;;;754    
;;;755    
;;;756    #ifdef OS_SAFETY_CRITICAL
;;;757        if (p_err == (OS_ERR *)0) {
;;;758            OS_SAFETY_CRITICAL_EXCEPTION();
;;;759            return;
;;;760        }
;;;761    #endif
;;;762    
;;;763    #if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
;;;764        if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Can't call this function from an ISR                   */
;;;765           *p_err = OS_ERR_SET_ISR;
;;;766            return;
;;;767        }
;;;768    #endif
;;;769    
;;;770    #if OS_CFG_ARG_CHK_EN > 0u
;;;771        if (p_sem == (OS_SEM *)0) {                             /* Validate 'p_sem'                                       */
00000e  b924              CBNZ     r4,|L6.26|
;;;772           *p_err = OS_ERR_OBJ_PTR_NULL;
000010  f64550c3          MOV      r0,#0x5dc3
000014  8028              STRH     r0,[r5,#0]
                  |L6.22|
;;;773            return;
;;;774        }
;;;775    #endif
;;;776    
;;;777    #if OS_CFG_OBJ_TYPE_CHK_EN > 0u
;;;778        if (p_sem->Type != OS_OBJ_TYPE_SEM) {                   /* Make sure semaphore was created                        */
;;;779           *p_err = OS_ERR_OBJ_TYPE;
;;;780            return;
;;;781        }
;;;782    #endif
;;;783    
;;;784       *p_err = OS_ERR_NONE;
;;;785        CPU_CRITICAL_ENTER();
;;;786        if (p_sem->Ctr > (OS_SEM_CTR)0) {                       /* See if semaphore already has a count                   */
;;;787            p_sem->Ctr = cnt;                                   /* Yes, set it to the new value specified.                */
;;;788        } else {
;;;789            p_pend_list = &p_sem->PendList;                     /* No                                                     */
;;;790            if (p_pend_list->NbrEntries == (OS_OBJ_QTY)0) {     /*      See if task(s) waiting?                           */
;;;791                p_sem->Ctr = cnt;                               /*      No, OK to set the value                           */
;;;792            } else {
;;;793               *p_err      = OS_ERR_TASK_WAITING;
;;;794            }
;;;795        }
;;;796        CPU_CRITICAL_EXIT();
;;;797    }
000016  e8bd81f0          POP      {r4-r8,pc}
                  |L6.26|
00001a  4913              LDR      r1,|L6.104|
00001c  6820              LDR      r0,[r4,#0]            ;778
00001e  4288              CMP      r0,r1                 ;778
000020  d003              BEQ      |L6.42|
000022  f64550c4          MOV      r0,#0x5dc4            ;779
000026  8028              STRH     r0,[r5,#0]            ;779
000028  e7f5              B        |L6.22|
                  |L6.42|
00002a  2000              MOVS     r0,#0                 ;784
00002c  8028              STRH     r0,[r5,#0]            ;784
00002e  bf00              NOP                            ;785
000030  bf00              NOP                            ;785
000032  f7fffffe          BL       CPU_SR_Save
000036  4680              MOV      r8,r0                 ;785
000038  bf00              NOP                            ;785
00003a  bf00              NOP                            ;785
00003c  6a20              LDR      r0,[r4,#0x20]         ;786
00003e  b108              CBZ      r0,|L6.68|
000040  6226              STR      r6,[r4,#0x20]         ;787
000042  e008              B        |L6.86|
                  |L6.68|
000044  f1040708          ADD      r7,r4,#8              ;789
000048  8938              LDRH     r0,[r7,#8]            ;790
00004a  b908              CBNZ     r0,|L6.80|
00004c  6226              STR      r6,[r4,#0x20]         ;791
00004e  e002              B        |L6.86|
                  |L6.80|
000050  f247105f          MOV      r0,#0x715f            ;793
000054  8028              STRH     r0,[r5,#0]            ;793
                  |L6.86|
000056  bf00              NOP                            ;796
000058  bf00              NOP                            ;796
00005a  4640              MOV      r0,r8                 ;796
00005c  f7fffffe          BL       CPU_SR_Restore
000060  bf00              NOP                            ;796
000062  bf00              NOP                            ;796
000064  bf00              NOP      
000066  e7d6              B        |L6.22|
;;;798    #endif
                          ENDP

                  |L6.104|
                          DCD      0x414d4553

                          AREA ||i.OS_SemClr||, CODE, READONLY, ALIGN=2

                  OS_SemClr PROC
;;;816    
;;;817    void  OS_SemClr (OS_SEM  *p_sem)
000000  b510              PUSH     {r4,lr}
;;;818    {
000002  4604              MOV      r4,r0
;;;819    #if OS_OBJ_TYPE_REQ > 0u
;;;820        p_sem->Type    = OS_OBJ_TYPE_NONE;                      /* Mark the data structure as a NONE                      */
000004  4805              LDR      r0,|L7.28|
000006  6020              STR      r0,[r4,#0]
;;;821    #endif
;;;822        p_sem->Ctr     = (OS_SEM_CTR)0;                         /* Set semaphore value                                    */
000008  2000              MOVS     r0,#0
00000a  6220              STR      r0,[r4,#0x20]
;;;823        p_sem->TS      = (CPU_TS    )0;                         /* Clear the time stamp                                   */
00000c  6260              STR      r0,[r4,#0x24]
;;;824    #if OS_CFG_DBG_EN > 0u
;;;825        p_sem->NamePtr = (CPU_CHAR *)((void *)"?SEM");
00000e  a004              ADR      r0,|L7.32|
000010  6060              STR      r0,[r4,#4]
;;;826    #endif
;;;827        OS_PendListInit(&p_sem->PendList);                      /* Initialize the waiting list                            */
000012  f1040008          ADD      r0,r4,#8
000016  f7fffffe          BL       OS_PendListInit
;;;828    }
00001a  bd10              POP      {r4,pc}
;;;829    
                          ENDP

                  |L7.28|
                          DCD      0x454e4f4e
                  |L7.32|
000020  3f53454d          DCB      "?SEM",0
000024  00      
000025  00                DCB      0
000026  00                DCB      0
000027  00                DCB      0

                          AREA ||i.OS_SemDbgListAdd||, CODE, READONLY, ALIGN=2

                  OS_SemDbgListAdd PROC
;;;846    #if OS_CFG_DBG_EN > 0u
;;;847    void  OS_SemDbgListAdd (OS_SEM  *p_sem)
000000  a109              ADR      r1,|L8.40|
;;;848    {
;;;849        p_sem->DbgNamePtr               = (CPU_CHAR *)((void *)" ");
000002  61c1              STR      r1,[r0,#0x1c]
;;;850        p_sem->DbgPrevPtr               = (OS_SEM   *)0;
000004  2100              MOVS     r1,#0
000006  6141              STR      r1,[r0,#0x14]
;;;851        if (OSSemDbgListPtr == (OS_SEM *)0) {
000008  4908              LDR      r1,|L8.44|
00000a  6809              LDR      r1,[r1,#0]  ; OSSemDbgListPtr
00000c  b911              CBNZ     r1,|L8.20|
;;;852            p_sem->DbgNextPtr           = (OS_SEM   *)0;
00000e  2100              MOVS     r1,#0
000010  6181              STR      r1,[r0,#0x18]
000012  e005              B        |L8.32|
                  |L8.20|
;;;853        } else {
;;;854            p_sem->DbgNextPtr           =  OSSemDbgListPtr;
000014  4905              LDR      r1,|L8.44|
000016  6809              LDR      r1,[r1,#0]  ; OSSemDbgListPtr
000018  6181              STR      r1,[r0,#0x18]
;;;855            OSSemDbgListPtr->DbgPrevPtr =  p_sem;
00001a  4904              LDR      r1,|L8.44|
00001c  6809              LDR      r1,[r1,#0]  ; OSSemDbgListPtr
00001e  6148              STR      r0,[r1,#0x14]
                  |L8.32|
;;;856        }
;;;857        OSSemDbgListPtr                 =  p_sem;
000020  4902              LDR      r1,|L8.44|
000022  6008              STR      r0,[r1,#0]  ; OSSemDbgListPtr
;;;858    }
000024  4770              BX       lr
;;;859    
                          ENDP

000026  0000              DCW      0x0000
                  |L8.40|
000028  2000              DCB      " ",0
00002a  00                DCB      0
00002b  00                DCB      0
                  |L8.44|
                          DCD      OSSemDbgListPtr

                          AREA ||i.OS_SemDbgListRemove||, CODE, READONLY, ALIGN=2

                  OS_SemDbgListRemove PROC
;;;861    
;;;862    void  OS_SemDbgListRemove (OS_SEM  *p_sem)
000000  6942              LDR      r2,[r0,#0x14]
;;;863    {
;;;864        OS_SEM  *p_sem_next;
;;;865        OS_SEM  *p_sem_prev;
;;;866    
;;;867    
;;;868        p_sem_prev = p_sem->DbgPrevPtr;
;;;869        p_sem_next = p_sem->DbgNextPtr;
000002  6981              LDR      r1,[r0,#0x18]
;;;870    
;;;871        if (p_sem_prev == (OS_SEM *)0) {
000004  b93a              CBNZ     r2,|L9.22|
;;;872            OSSemDbgListPtr = p_sem_next;
000006  4b09              LDR      r3,|L9.44|
000008  6019              STR      r1,[r3,#0]  ; OSSemDbgListPtr
;;;873            if (p_sem_next != (OS_SEM *)0) {
00000a  b109              CBZ      r1,|L9.16|
;;;874                p_sem_next->DbgPrevPtr = (OS_SEM *)0;
00000c  2300              MOVS     r3,#0
00000e  614b              STR      r3,[r1,#0x14]
                  |L9.16|
;;;875            }
;;;876            p_sem->DbgNextPtr = (OS_SEM *)0;
000010  2300              MOVS     r3,#0
000012  6183              STR      r3,[r0,#0x18]
000014  e009              B        |L9.42|
                  |L9.22|
;;;877    
;;;878        } else if (p_sem_next == (OS_SEM *)0) {
000016  b919              CBNZ     r1,|L9.32|
;;;879            p_sem_prev->DbgNextPtr = (OS_SEM *)0;
000018  2300              MOVS     r3,#0
00001a  6193              STR      r3,[r2,#0x18]
;;;880            p_sem->DbgPrevPtr      = (OS_SEM *)0;
00001c  6143              STR      r3,[r0,#0x14]
00001e  e004              B        |L9.42|
                  |L9.32|
;;;881    
;;;882        } else {
;;;883            p_sem_prev->DbgNextPtr =  p_sem_next;
000020  6191              STR      r1,[r2,#0x18]
;;;884            p_sem_next->DbgPrevPtr =  p_sem_prev;
000022  614a              STR      r2,[r1,#0x14]
;;;885            p_sem->DbgNextPtr      = (OS_SEM *)0;
000024  2300              MOVS     r3,#0
000026  6183              STR      r3,[r0,#0x18]
;;;886            p_sem->DbgPrevPtr      = (OS_SEM *)0;
000028  6143              STR      r3,[r0,#0x14]
                  |L9.42|
;;;887        }
;;;888    }
00002a  4770              BX       lr
;;;889    #endif
                          ENDP

                  |L9.44|
                          DCD      OSSemDbgListPtr

                          AREA ||i.OS_SemInit||, CODE, READONLY, ALIGN=2

                  OS_SemInit PROC
;;;908    
;;;909    void  OS_SemInit (OS_ERR  *p_err)
000000  2100              MOVS     r1,#0
;;;910    {
;;;911    #ifdef OS_SAFETY_CRITICAL
;;;912        if (p_err == (OS_ERR *)0) {
;;;913            OS_SAFETY_CRITICAL_EXCEPTION();
;;;914            return;
;;;915        }
;;;916    #endif
;;;917    
;;;918    #if OS_CFG_DBG_EN > 0u
;;;919        OSSemDbgListPtr = (OS_SEM *)0;
000002  4a03              LDR      r2,|L10.16|
000004  6011              STR      r1,[r2,#0]  ; OSSemDbgListPtr
;;;920    #endif
;;;921    
;;;922        OSSemQty        = (OS_OBJ_QTY)0;
000006  4a03              LDR      r2,|L10.20|
000008  8011              STRH     r1,[r2,#0]
;;;923       *p_err           = OS_ERR_NONE;
00000a  8001              STRH     r1,[r0,#0]
;;;924    }
00000c  4770              BX       lr
;;;925    
                          ENDP

00000e  0000              DCW      0x0000
                  |L10.16|
                          DCD      OSSemDbgListPtr
                  |L10.20|
                          DCD      OSSemQty

                          AREA ||i.OS_SemPost||, CODE, READONLY, ALIGN=1

                  OS_SemPost PROC
;;;958    
;;;959    OS_SEM_CTR  OS_SemPost (OS_SEM  *p_sem,
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;960                            OS_OPT   opt,
;;;961                            CPU_TS   ts,
;;;962                            OS_ERR  *p_err)
;;;963    {
000004  4604              MOV      r4,r0
000006  4688              MOV      r8,r1
000008  4691              MOV      r9,r2
00000a  461d              MOV      r5,r3
;;;964        OS_OBJ_QTY     cnt;
;;;965        OS_SEM_CTR     ctr;
;;;966        OS_PEND_LIST  *p_pend_list;
;;;967        OS_PEND_DATA  *p_pend_data;
;;;968        OS_PEND_DATA  *p_pend_data_next;
;;;969        OS_TCB        *p_tcb;
;;;970        CPU_SR_ALLOC();
00000c  2000              MOVS     r0,#0
00000e  9001              STR      r0,[sp,#4]
;;;971    
;;;972    
;;;973    
;;;974        CPU_CRITICAL_ENTER();
000010  bf00              NOP      
000012  bf00              NOP      
000014  f7fffffe          BL       CPU_SR_Save
000018  9001              STR      r0,[sp,#4]
00001a  bf00              NOP      
00001c  bf00              NOP      
;;;975        p_pend_list = &p_sem->PendList;
00001e  f1040708          ADD      r7,r4,#8
;;;976        if (p_pend_list->NbrEntries == (OS_OBJ_QTY)0) {         /* Any task waiting on semaphore?                         */
000022  8938              LDRH     r0,[r7,#8]
000024  2800              CMP      r0,#0
000026  d14f              BNE      |L11.200|
;;;977            switch (sizeof(OS_SEM_CTR)) {
000028  2004              MOVS     r0,#4
00002a  2801              CMP      r0,#1
00002c  d004              BEQ      |L11.56|
00002e  2802              CMP      r0,#2
000030  d014              BEQ      |L11.92|
000032  2804              CMP      r0,#4
000034  d134              BNE      |L11.160|
000036  e023              B        |L11.128|
                  |L11.56|
;;;978                case 1u:
;;;979                     if (p_sem->Ctr == DEF_INT_08U_MAX_VAL) {
000038  6a20              LDR      r0,[r4,#0x20]
00003a  28ff              CMP      r0,#0xff
00003c  d10d              BNE      |L11.90|
;;;980                         CPU_CRITICAL_EXIT();
00003e  bf00              NOP      
000040  bf00              NOP      
000042  9801              LDR      r0,[sp,#4]
000044  f7fffffe          BL       CPU_SR_Restore
000048  bf00              NOP      
00004a  bf00              NOP      
;;;981                        *p_err = OS_ERR_SEM_OVF;
00004c  f64650c5          MOV      r0,#0x6dc5
000050  8028              STRH     r0,[r5,#0]
;;;982                         return ((OS_SEM_CTR)0);
000052  2000              MOVS     r0,#0
                  |L11.84|
;;;983                     }
;;;984                     break;
;;;985    
;;;986                case 2u:
;;;987                     if (p_sem->Ctr == DEF_INT_16U_MAX_VAL) {
;;;988                         CPU_CRITICAL_EXIT();
;;;989                        *p_err = OS_ERR_SEM_OVF;
;;;990                         return ((OS_SEM_CTR)0);
;;;991                     }
;;;992                     break;
;;;993    
;;;994                case 4u:
;;;995                     if (p_sem->Ctr == DEF_INT_32U_MAX_VAL) {
;;;996                         CPU_CRITICAL_EXIT();
;;;997                        *p_err = OS_ERR_SEM_OVF;
;;;998                         return ((OS_SEM_CTR)0);
;;;999                     }
;;;1000                    break;
;;;1001   
;;;1002               default:
;;;1003                    break;
;;;1004           }
;;;1005           p_sem->Ctr++;                                       /* No                                                     */
;;;1006           ctr       = p_sem->Ctr;
;;;1007           p_sem->TS = ts;                                     /* Save timestamp in semaphore control block              */
;;;1008           CPU_CRITICAL_EXIT();
;;;1009          *p_err     = OS_ERR_NONE;
;;;1010           return (ctr);
;;;1011       }
;;;1012   
;;;1013       OS_CRITICAL_ENTER_CPU_EXIT();
;;;1014       if ((opt & OS_OPT_POST_ALL) != (OS_OPT)0) {             /* Post message to all tasks waiting?                     */
;;;1015           cnt = p_pend_list->NbrEntries;                      /* Yes                                                    */
;;;1016       } else {
;;;1017           cnt = (OS_OBJ_QTY)1;                                /* No                                                     */
;;;1018       }
;;;1019       p_pend_data = p_pend_list->HeadPtr;
;;;1020       while (cnt > 0u) {
;;;1021           p_tcb            = p_pend_data->TCBPtr;
;;;1022           p_pend_data_next = p_pend_data->NextPtr;
;;;1023           OS_Post((OS_PEND_OBJ *)((void *)p_sem),
;;;1024                   p_tcb,
;;;1025                   (void      *)0,
;;;1026                   (OS_MSG_SIZE)0,
;;;1027                   ts);
;;;1028           p_pend_data = p_pend_data_next;
;;;1029           cnt--;
;;;1030       }
;;;1031       ctr = p_sem->Ctr;
;;;1032       OS_CRITICAL_EXIT_NO_SCHED();
;;;1033       if ((opt & OS_OPT_POST_NO_SCHED) == (OS_OPT)0) {
;;;1034           OSSched();                                          /* Run the scheduler                                      */
;;;1035       }
;;;1036      *p_err = OS_ERR_NONE;
;;;1037       return (ctr);
;;;1038   }
000054  b004              ADD      sp,sp,#0x10
000056  e8bd9ff0          POP      {r4-r12,pc}
                  |L11.90|
00005a  e022              B        |L11.162|
                  |L11.92|
00005c  f64f71ff          MOV      r1,#0xffff            ;987
000060  6a20              LDR      r0,[r4,#0x20]         ;987
000062  4288              CMP      r0,r1                 ;987
000064  d10b              BNE      |L11.126|
000066  bf00              NOP                            ;988
000068  bf00              NOP                            ;988
00006a  9801              LDR      r0,[sp,#4]            ;988
00006c  f7fffffe          BL       CPU_SR_Restore
000070  bf00              NOP                            ;988
000072  bf00              NOP                            ;988
000074  f64650c5          MOV      r0,#0x6dc5            ;989
000078  8028              STRH     r0,[r5,#0]            ;989
00007a  2000              MOVS     r0,#0                 ;990
00007c  e7ea              B        |L11.84|
                  |L11.126|
00007e  e010              B        |L11.162|
                  |L11.128|
000080  6a20              LDR      r0,[r4,#0x20]         ;995
000082  1c40              ADDS     r0,r0,#1              ;995
000084  b958              CBNZ     r0,|L11.158|
000086  bf00              NOP                            ;996
000088  bf00              NOP                            ;996
00008a  9801              LDR      r0,[sp,#4]            ;996
00008c  f7fffffe          BL       CPU_SR_Restore
000090  bf00              NOP                            ;996
000092  bf00              NOP                            ;996
000094  f64650c5          MOV      r0,#0x6dc5            ;997
000098  8028              STRH     r0,[r5,#0]            ;997
00009a  2000              MOVS     r0,#0                 ;998
00009c  e7da              B        |L11.84|
                  |L11.158|
00009e  e000              B        |L11.162|
                  |L11.160|
0000a0  bf00              NOP                            ;1003
                  |L11.162|
0000a2  bf00              NOP                            ;984
0000a4  6a20              LDR      r0,[r4,#0x20]         ;1005
0000a6  1c40              ADDS     r0,r0,#1              ;1005
0000a8  6220              STR      r0,[r4,#0x20]         ;1005
0000aa  f8d4a020          LDR      r10,[r4,#0x20]        ;1006
0000ae  f8c49024          STR      r9,[r4,#0x24]         ;1007
0000b2  bf00              NOP                            ;1008
0000b4  bf00              NOP                            ;1008
0000b6  9801              LDR      r0,[sp,#4]            ;1008
0000b8  f7fffffe          BL       CPU_SR_Restore
0000bc  bf00              NOP                            ;1008
0000be  bf00              NOP                            ;1008
0000c0  2000              MOVS     r0,#0                 ;1009
0000c2  8028              STRH     r0,[r5,#0]            ;1009
0000c4  4650              MOV      r0,r10                ;1010
0000c6  e7c5              B        |L11.84|
                  |L11.200|
0000c8  f4087000          AND      r0,r8,#0x200          ;1014
0000cc  b108              CBZ      r0,|L11.210|
0000ce  893e              LDRH     r6,[r7,#8]            ;1015
0000d0  e000              B        |L11.212|
                  |L11.210|
0000d2  2601              MOVS     r6,#1                 ;1017
                  |L11.212|
0000d4  f8d7b000          LDR      r11,[r7,#0]           ;1019
0000d8  e011              B        |L11.254|
                  |L11.218|
0000da  f8db0008          LDR      r0,[r11,#8]           ;1021
0000de  9002              STR      r0,[sp,#8]            ;1021
0000e0  f8db0004          LDR      r0,[r11,#4]           ;1022
0000e4  9003              STR      r0,[sp,#0xc]          ;1022
0000e6  2300              MOVS     r3,#0                 ;1023
0000e8  461a              MOV      r2,r3                 ;1023
0000ea  f8cd9000          STR      r9,[sp,#0]            ;1023
0000ee  4620              MOV      r0,r4                 ;1023
0000f0  9902              LDR      r1,[sp,#8]            ;1023
0000f2  f7fffffe          BL       OS_Post
0000f6  f8ddb00c          LDR      r11,[sp,#0xc]         ;1028
0000fa  1e70              SUBS     r0,r6,#1              ;1029
0000fc  b286              UXTH     r6,r0                 ;1029
                  |L11.254|
0000fe  2e00              CMP      r6,#0                 ;1020
000100  d1eb              BNE      |L11.218|
000102  f8d4a020          LDR      r10,[r4,#0x20]        ;1031
000106  bf00              NOP                            ;1032
000108  bf00              NOP                            ;1032
00010a  9801              LDR      r0,[sp,#4]            ;1032
00010c  f7fffffe          BL       CPU_SR_Restore
000110  bf00              NOP                            ;1032
000112  bf00              NOP                            ;1032
000114  f4084000          AND      r0,r8,#0x8000         ;1033
000118  b908              CBNZ     r0,|L11.286|
00011a  f7fffffe          BL       OSSched
                  |L11.286|
00011e  2000              MOVS     r0,#0                 ;1036
000120  8028              STRH     r0,[r5,#0]            ;1036
000122  4650              MOV      r0,r10                ;1037
000124  e796              B        |L11.84|
;;;1039   
                          ENDP

