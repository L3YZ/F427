; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\stm32f4xx_fmc.o --asm_dir=.\Lst\ --list_dir=.\Lst\ --depend=.\obj\stm32f4xx_fmc.d --cpu=Cortex-M4.fp --apcs=interwork -O0 -I..\..\..\CMSIS\4.5.0\CMSIS\Include -I..\APP -I..\APP\ST -I..\APP\uCOS -I..\..\BSP\KeilMDK -I..\..\BSP\Board\inc -I..\..\BSP\STM32F4xx\inc -I..\..\BSP\Xlong\inc -I..\..\..\uCOS\uC-CPU -I..\..\..\uCOS\uC-CPU\Ports\ARM-Cortex-M4 -I..\..\..\uCOS\uC-LIB -I..\..\..\uCOS\uC-LIB\Ports\ARM-Cortex-M4 -I..\..\..\uCOS\uCOS-III\Source -I..\..\..\uCOS\uCOS-III\Ports\ARM-Cortex-M4 -IC:\Users\V200\Desktop\XLong\XLong\OS\KeilMDKPrj\RTE -Id:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\1.0.8\Device\Include -Id:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -DSTM32F427_437xx -DSTM32F427_437xx -DUSE_STDPERIPH_DRIVER --omf_browse=.\obj\stm32f4xx_fmc.crf ..\..\BSP\STM32F4xx\src\stm32f4xx_fmc.c]
                          THUMB

                          AREA ||i.FMC_ClearFlag||, CODE, READONLY, ALIGN=2

                  FMC_ClearFlag PROC
;;;1210     */
;;;1211   void FMC_ClearFlag(uint32_t FMC_Bank, uint32_t FMC_FLAG)
000000  2810              CMP      r0,#0x10
;;;1212   {
;;;1213    /* Check the parameters */
;;;1214     assert_param(IS_FMC_GETFLAG_BANK(FMC_Bank));
;;;1215     assert_param(IS_FMC_CLEAR_FLAG(FMC_FLAG)) ;
;;;1216       
;;;1217     if(FMC_Bank == FMC_Bank2_NAND)
000002  d107              BNE      |L1.20|
;;;1218     {
;;;1219       FMC_Bank2->SR2 &= (~FMC_FLAG); 
000004  f04f4220          MOV      r2,#0xa0000000
000008  6e52              LDR      r2,[r2,#0x64]
00000a  438a              BICS     r2,r2,r1
00000c  f04f4320          MOV      r3,#0xa0000000
000010  665a              STR      r2,[r3,#0x64]
000012  e01e              B        |L1.82|
                  |L1.20|
;;;1220     }  
;;;1221     else if(FMC_Bank == FMC_Bank3_NAND)
000014  f5b07f80          CMP      r0,#0x100
000018  d107              BNE      |L1.42|
;;;1222     {
;;;1223       FMC_Bank3->SR3 &= (~FMC_FLAG);
00001a  4a0e              LDR      r2,|L1.84|
00001c  6812              LDR      r2,[r2,#0]
00001e  438a              BICS     r2,r2,r1
000020  f04f4320          MOV      r3,#0xa0000000
000024  f8c32084          STR      r2,[r3,#0x84]
000028  e013              B        |L1.82|
                  |L1.42|
;;;1224     }
;;;1225     else if(FMC_Bank == FMC_Bank4_PCCARD)
00002a  f5b05f80          CMP      r0,#0x1000
00002e  d108              BNE      |L1.66|
;;;1226     {
;;;1227       FMC_Bank4->SR4 &= (~FMC_FLAG);
000030  4a08              LDR      r2,|L1.84|
000032  3220              ADDS     r2,r2,#0x20
000034  6812              LDR      r2,[r2,#0]
000036  438a              BICS     r2,r2,r1
000038  f04f4320          MOV      r3,#0xa0000000
00003c  f8c320a4          STR      r2,[r3,#0xa4]
000040  e007              B        |L1.82|
                  |L1.66|
;;;1228     }
;;;1229     /* FMC_Bank5_6 SDRAM*/
;;;1230     else
;;;1231     {
;;;1232       FMC_Bank5_6->SDRTR &= (~FMC_FLAG);
000042  4a04              LDR      r2,|L1.84|
000044  32d0              ADDS     r2,r2,#0xd0
000046  6812              LDR      r2,[r2,#0]
000048  438a              BICS     r2,r2,r1
00004a  f04f4320          MOV      r3,#0xa0000000
00004e  f8c32154          STR      r2,[r3,#0x154]
                  |L1.82|
;;;1233     }
;;;1234     
;;;1235   }
000052  4770              BX       lr
;;;1236   
                          ENDP

                  |L1.84|
                          DCD      0xa0000084

                          AREA ||i.FMC_ClearITPendingBit||, CODE, READONLY, ALIGN=2

                  FMC_ClearITPendingBit PROC
;;;1325     */
;;;1326   void FMC_ClearITPendingBit(uint32_t FMC_Bank, uint32_t FMC_IT)
000000  2810              CMP      r0,#0x10
;;;1327   {
;;;1328     /* Check the parameters */
;;;1329     assert_param(IS_FMC_IT_BANK(FMC_Bank));
;;;1330     assert_param(IS_FMC_IT(FMC_IT));
;;;1331       
;;;1332     if(FMC_Bank == FMC_Bank2_NAND)
000002  d108              BNE      |L2.22|
;;;1333     {
;;;1334       FMC_Bank2->SR2 &= ~(FMC_IT >> 3); 
000004  f04f4220          MOV      r2,#0xa0000000
000008  6e52              LDR      r2,[r2,#0x64]
00000a  ea2202d1          BIC      r2,r2,r1,LSR #3
00000e  f04f4320          MOV      r3,#0xa0000000
000012  665a              STR      r2,[r3,#0x64]
000014  e021              B        |L2.90|
                  |L2.22|
;;;1335     }  
;;;1336     else if(FMC_Bank == FMC_Bank3_NAND)
000016  f5b07f80          CMP      r0,#0x100
00001a  d108              BNE      |L2.46|
;;;1337     {
;;;1338       FMC_Bank3->SR3 &= ~(FMC_IT >> 3);
00001c  4a0f              LDR      r2,|L2.92|
00001e  6812              LDR      r2,[r2,#0]
000020  ea2202d1          BIC      r2,r2,r1,LSR #3
000024  f04f4320          MOV      r3,#0xa0000000
000028  f8c32084          STR      r2,[r3,#0x84]
00002c  e015              B        |L2.90|
                  |L2.46|
;;;1339     }
;;;1340     else if(FMC_Bank == FMC_Bank4_PCCARD)
00002e  f5b05f80          CMP      r0,#0x1000
000032  d109              BNE      |L2.72|
;;;1341     {
;;;1342       FMC_Bank4->SR4 &= ~(FMC_IT >> 3);
000034  4a09              LDR      r2,|L2.92|
000036  3220              ADDS     r2,r2,#0x20
000038  6812              LDR      r2,[r2,#0]
00003a  ea2202d1          BIC      r2,r2,r1,LSR #3
00003e  f04f4320          MOV      r3,#0xa0000000
000042  f8c320a4          STR      r2,[r3,#0xa4]
000046  e008              B        |L2.90|
                  |L2.72|
;;;1343     }
;;;1344     /* FMC_Bank5_6 SDRAM*/
;;;1345     else
;;;1346     {
;;;1347       FMC_Bank5_6->SDRTR |= FMC_SDRTR_CRE;
000048  4a04              LDR      r2,|L2.92|
00004a  32d0              ADDS     r2,r2,#0xd0
00004c  6812              LDR      r2,[r2,#0]
00004e  f0420201          ORR      r2,r2,#1
000052  f04f4320          MOV      r3,#0xa0000000
000056  f8c32154          STR      r2,[r3,#0x154]
                  |L2.90|
;;;1348     }
;;;1349   }
00005a  4770              BX       lr
;;;1350   
                          ENDP

                  |L2.92|
                          DCD      0xa0000084

                          AREA ||i.FMC_GetECC||, CODE, READONLY, ALIGN=2

                  FMC_GetECC PROC
;;;572      */
;;;573    uint32_t FMC_GetECC(uint32_t FMC_Bank)
000000  4601              MOV      r1,r0
;;;574    {
;;;575      uint32_t eccval = 0x00000000;
000002  2000              MOVS     r0,#0
;;;576      
;;;577      if(FMC_Bank == FMC_Bank2_NAND)
000004  2910              CMP      r1,#0x10
000006  d103              BNE      |L3.16|
;;;578      {
;;;579        /* Get the ECCR2 register value */
;;;580        eccval = FMC_Bank2->ECCR2;
000008  f04f4220          MOV      r2,#0xa0000000
00000c  6f50              LDR      r0,[r2,#0x74]
00000e  e001              B        |L3.20|
                  |L3.16|
;;;581      }
;;;582      else
;;;583      {
;;;584        /* Get the ECCR3 register value */
;;;585        eccval = FMC_Bank3->ECCR3;
000010  4a01              LDR      r2,|L3.24|
000012  6810              LDR      r0,[r2,#0]
                  |L3.20|
;;;586      }
;;;587      /* Return the error correction code value */
;;;588      return(eccval);
;;;589    }
000014  4770              BX       lr
;;;590    /**
                          ENDP

000016  0000              DCW      0x0000
                  |L3.24|
                          DCD      0xa0000094

                          AREA ||i.FMC_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  FMC_GetFlagStatus PROC
;;;1154     */
;;;1155   FlagStatus FMC_GetFlagStatus(uint32_t FMC_Bank, uint32_t FMC_FLAG)
000000  b510              PUSH     {r4,lr}
;;;1156   {
000002  4602              MOV      r2,r0
;;;1157     FlagStatus bitstatus = RESET;
000004  2000              MOVS     r0,#0
;;;1158     uint32_t tmpsr = 0x00000000;
000006  2300              MOVS     r3,#0
;;;1159     
;;;1160     /* Check the parameters */
;;;1161     assert_param(IS_FMC_GETFLAG_BANK(FMC_Bank));
;;;1162     assert_param(IS_FMC_GET_FLAG(FMC_FLAG));
;;;1163     
;;;1164     if(FMC_Bank == FMC_Bank2_NAND)
000008  2a10              CMP      r2,#0x10
00000a  d103              BNE      |L4.20|
;;;1165     {
;;;1166       tmpsr = FMC_Bank2->SR2;
00000c  f04f4420          MOV      r4,#0xa0000000
000010  6e63              LDR      r3,[r4,#0x64]
000012  e00f              B        |L4.52|
                  |L4.20|
;;;1167     }  
;;;1168     else if(FMC_Bank == FMC_Bank3_NAND)
000014  f5b27f80          CMP      r2,#0x100
000018  d102              BNE      |L4.32|
;;;1169     {
;;;1170       tmpsr = FMC_Bank3->SR3;
00001a  4c0a              LDR      r4,|L4.68|
00001c  6823              LDR      r3,[r4,#0]
00001e  e009              B        |L4.52|
                  |L4.32|
;;;1171     }
;;;1172     else if(FMC_Bank == FMC_Bank4_PCCARD)
000020  f5b25f80          CMP      r2,#0x1000
000024  d103              BNE      |L4.46|
;;;1173     {
;;;1174       tmpsr = FMC_Bank4->SR4;
000026  4c07              LDR      r4,|L4.68|
000028  3420              ADDS     r4,r4,#0x20
00002a  6823              LDR      r3,[r4,#0]
00002c  e002              B        |L4.52|
                  |L4.46|
;;;1175     }
;;;1176     else 
;;;1177     {
;;;1178       tmpsr = FMC_Bank5_6->SDSR;
00002e  4c05              LDR      r4,|L4.68|
000030  34d4              ADDS     r4,r4,#0xd4
000032  6823              LDR      r3,[r4,#0]
                  |L4.52|
;;;1179     }
;;;1180     
;;;1181     /* Get the flag status */
;;;1182     if ((tmpsr & FMC_FLAG) != FMC_FLAG )
000034  ea030401          AND      r4,r3,r1
000038  428c              CMP      r4,r1
00003a  d001              BEQ      |L4.64|
;;;1183     {
;;;1184       bitstatus = RESET;
00003c  2000              MOVS     r0,#0
00003e  e000              B        |L4.66|
                  |L4.64|
;;;1185     }
;;;1186     else
;;;1187     {
;;;1188       bitstatus = SET;
000040  2001              MOVS     r0,#1
                  |L4.66|
;;;1189     }
;;;1190     /* Return the flag status */
;;;1191     return bitstatus;
;;;1192   }
000042  bd10              POP      {r4,pc}
;;;1193   
                          ENDP

                  |L4.68|
                          DCD      0xa0000084

                          AREA ||i.FMC_GetITStatus||, CODE, READONLY, ALIGN=2

                  FMC_GetITStatus PROC
;;;1253     */
;;;1254   ITStatus FMC_GetITStatus(uint32_t FMC_Bank, uint32_t FMC_IT)
000000  b5f0              PUSH     {r4-r7,lr}
;;;1255   {
000002  4602              MOV      r2,r0
;;;1256     ITStatus bitstatus = RESET;
000004  2000              MOVS     r0,#0
;;;1257     uint32_t tmpsr = 0x0;
000006  2300              MOVS     r3,#0
;;;1258     uint32_t tmpsr2 = 0x0;
000008  2400              MOVS     r4,#0
;;;1259     uint32_t itstatus = 0x0;
00000a  2500              MOVS     r5,#0
;;;1260     uint32_t itenable = 0x0; 
00000c  2600              MOVS     r6,#0
;;;1261     
;;;1262     /* Check the parameters */
;;;1263     assert_param(IS_FMC_IT_BANK(FMC_Bank));
;;;1264     assert_param(IS_FMC_GET_IT(FMC_IT));
;;;1265     
;;;1266     if(FMC_Bank == FMC_Bank2_NAND)
00000e  2a10              CMP      r2,#0x10
000010  d103              BNE      |L5.26|
;;;1267     {
;;;1268       tmpsr = FMC_Bank2->SR2;
000012  f04f4720          MOV      r7,#0xa0000000
000016  6e7b              LDR      r3,[r7,#0x64]
000018  e012              B        |L5.64|
                  |L5.26|
;;;1269     }  
;;;1270     else if(FMC_Bank == FMC_Bank3_NAND)
00001a  f5b27f80          CMP      r2,#0x100
00001e  d102              BNE      |L5.38|
;;;1271     {
;;;1272       tmpsr = FMC_Bank3->SR3;
000020  4f0f              LDR      r7,|L5.96|
000022  683b              LDR      r3,[r7,#0]
000024  e00c              B        |L5.64|
                  |L5.38|
;;;1273     }
;;;1274     else if(FMC_Bank == FMC_Bank4_PCCARD)
000026  f5b25f80          CMP      r2,#0x1000
00002a  d103              BNE      |L5.52|
;;;1275     {
;;;1276       tmpsr = FMC_Bank4->SR4;
00002c  4f0c              LDR      r7,|L5.96|
00002e  3720              ADDS     r7,r7,#0x20
000030  683b              LDR      r3,[r7,#0]
000032  e005              B        |L5.64|
                  |L5.52|
;;;1277     }
;;;1278     /* FMC_Bank5_6 SDRAM*/
;;;1279     else
;;;1280     {
;;;1281       tmpsr = FMC_Bank5_6->SDRTR;
000034  4f0a              LDR      r7,|L5.96|
000036  37d0              ADDS     r7,r7,#0xd0
000038  683b              LDR      r3,[r7,#0]
;;;1282       tmpsr2 = FMC_Bank5_6->SDSR;
00003a  06ff              LSLS     r7,r7,#27
00003c  f8d74158          LDR      r4,[r7,#0x158]
                  |L5.64|
;;;1283     } 
;;;1284     
;;;1285     /* get the IT enable bit status*/
;;;1286     itenable = tmpsr & FMC_IT;
000040  ea030601          AND      r6,r3,r1
;;;1287     
;;;1288     /* get the corresponding IT Flag status*/
;;;1289     if((FMC_Bank == FMC_Bank1_SDRAM) || (FMC_Bank == FMC_Bank2_SDRAM))
000044  b10a              CBZ      r2,|L5.74|
000046  2a01              CMP      r2,#1
000048  d102              BNE      |L5.80|
                  |L5.74|
;;;1290     {
;;;1291       itstatus = tmpsr2 & FMC_SDSR_RE;  
00004a  f0040501          AND      r5,r4,#1
00004e  e001              B        |L5.84|
                  |L5.80|
;;;1292     }           
;;;1293     else
;;;1294     {
;;;1295       itstatus = tmpsr & (FMC_IT >> 3);  
000050  ea0305d1          AND      r5,r3,r1,LSR #3
                  |L5.84|
;;;1296     }  
;;;1297     
;;;1298     if ((itstatus != (uint32_t)RESET)  && (itenable != (uint32_t)RESET))
000054  b115              CBZ      r5,|L5.92|
000056  b10e              CBZ      r6,|L5.92|
;;;1299     {
;;;1300       bitstatus = SET;
000058  2001              MOVS     r0,#1
00005a  e000              B        |L5.94|
                  |L5.92|
;;;1301     }
;;;1302     else
;;;1303     {
;;;1304       bitstatus = RESET;
00005c  2000              MOVS     r0,#0
                  |L5.94|
;;;1305     }
;;;1306     return bitstatus; 
;;;1307   }
00005e  bdf0              POP      {r4-r7,pc}
;;;1308   
                          ENDP

                  |L5.96|
                          DCD      0xa0000084

                          AREA ||i.FMC_GetModeStatus||, CODE, READONLY, ALIGN=2

                  FMC_GetModeStatus PROC
;;;969      */
;;;970    uint32_t FMC_GetModeStatus(uint32_t SDRAM_Bank)
000000  4601              MOV      r1,r0
;;;971    {
;;;972      uint32_t tmpreg = 0;
000002  2000              MOVS     r0,#0
;;;973      
;;;974      /* Check the parameter */
;;;975      assert_param(IS_FMC_SDRAM_BANK(SDRAM_Bank));
;;;976    
;;;977      /* Get the busy flag status */
;;;978      if(SDRAM_Bank == FMC_Bank1_SDRAM)
000004  b921              CBNZ     r1,|L6.16|
;;;979      {
;;;980        tmpreg = (uint32_t)(FMC_Bank5_6->SDSR & FMC_SDSR_MODES1); 
000006  4a05              LDR      r2,|L6.28|
000008  6812              LDR      r2,[r2,#0]
00000a  f0020006          AND      r0,r2,#6
00000e  e004              B        |L6.26|
                  |L6.16|
;;;981      }
;;;982      else
;;;983      {
;;;984        tmpreg = ((uint32_t)(FMC_Bank5_6->SDSR & FMC_SDSR_MODES2) >> 2);
000010  4a02              LDR      r2,|L6.28|
000012  6812              LDR      r2,[r2,#0]
000014  f0020218          AND      r2,r2,#0x18
000018  0890              LSRS     r0,r2,#2
                  |L6.26|
;;;985      }
;;;986      
;;;987      /* Return the mode status */
;;;988      return tmpreg;
;;;989    }
00001a  4770              BX       lr
;;;990    
                          ENDP

                  |L6.28|
                          DCD      0xa0000158

                          AREA ||i.FMC_ITConfig||, CODE, READONLY, ALIGN=2

                  FMC_ITConfig PROC
;;;1077     */
;;;1078   void FMC_ITConfig(uint32_t FMC_Bank, uint32_t FMC_IT, FunctionalState NewState)
000000  b510              PUSH     {r4,lr}
;;;1079   {
;;;1080     assert_param(IS_FMC_IT_BANK(FMC_Bank));
;;;1081     assert_param(IS_FMC_IT(FMC_IT));	
;;;1082     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1083     
;;;1084     if (NewState != DISABLE)
000002  b34a              CBZ      r2,|L7.88|
;;;1085     {
;;;1086       /* Enable the selected FMC_Bank2 interrupts */
;;;1087       if(FMC_Bank == FMC_Bank2_NAND)
000004  2810              CMP      r0,#0x10
000006  d107              BNE      |L7.24|
;;;1088       {
;;;1089         FMC_Bank2->SR2 |= FMC_IT;
000008  f04f4320          MOV      r3,#0xa0000000
00000c  6e5b              LDR      r3,[r3,#0x64]
00000e  430b              ORRS     r3,r3,r1
000010  f04f4420          MOV      r4,#0xa0000000
000014  6663              STR      r3,[r4,#0x64]
000016  e048              B        |L7.170|
                  |L7.24|
;;;1090       }
;;;1091       /* Enable the selected FMC_Bank3 interrupts */
;;;1092       else if (FMC_Bank == FMC_Bank3_NAND)
000018  f5b07f80          CMP      r0,#0x100
00001c  d107              BNE      |L7.46|
;;;1093       {
;;;1094         FMC_Bank3->SR3 |= FMC_IT;
00001e  4b23              LDR      r3,|L7.172|
000020  681b              LDR      r3,[r3,#0]
000022  430b              ORRS     r3,r3,r1
000024  f04f4420          MOV      r4,#0xa0000000
000028  f8c43084          STR      r3,[r4,#0x84]
00002c  e03d              B        |L7.170|
                  |L7.46|
;;;1095       }
;;;1096       /* Enable the selected FMC_Bank4 interrupts */
;;;1097       else if (FMC_Bank == FMC_Bank4_PCCARD)
00002e  f5b05f80          CMP      r0,#0x1000
000032  d108              BNE      |L7.70|
;;;1098       {
;;;1099         FMC_Bank4->SR4 |= FMC_IT;    
000034  4b1d              LDR      r3,|L7.172|
000036  3320              ADDS     r3,r3,#0x20
000038  681b              LDR      r3,[r3,#0]
00003a  430b              ORRS     r3,r3,r1
00003c  f04f4420          MOV      r4,#0xa0000000
000040  f8c430a4          STR      r3,[r4,#0xa4]
000044  e031              B        |L7.170|
                  |L7.70|
;;;1100       }
;;;1101       /* Enable the selected FMC_Bank5_6 interrupt */
;;;1102       else
;;;1103       {
;;;1104         /* Enables the interrupt if the refresh error flag is set */
;;;1105         FMC_Bank5_6->SDRTR |= FMC_IT; 
000046  4b19              LDR      r3,|L7.172|
000048  33d0              ADDS     r3,r3,#0xd0
00004a  681b              LDR      r3,[r3,#0]
00004c  430b              ORRS     r3,r3,r1
00004e  f04f4420          MOV      r4,#0xa0000000
000052  f8c43154          STR      r3,[r4,#0x154]
000056  e028              B        |L7.170|
                  |L7.88|
;;;1106       }
;;;1107     }
;;;1108     else
;;;1109     {
;;;1110       /* Disable the selected FMC_Bank2 interrupts */
;;;1111       if(FMC_Bank == FMC_Bank2_NAND)
000058  2810              CMP      r0,#0x10
00005a  d107              BNE      |L7.108|
;;;1112       {
;;;1113         
;;;1114         FMC_Bank2->SR2 &= (uint32_t)~FMC_IT;
00005c  f04f4320          MOV      r3,#0xa0000000
000060  6e5b              LDR      r3,[r3,#0x64]
000062  438b              BICS     r3,r3,r1
000064  f04f4420          MOV      r4,#0xa0000000
000068  6663              STR      r3,[r4,#0x64]
00006a  e01e              B        |L7.170|
                  |L7.108|
;;;1115       }
;;;1116       /* Disable the selected FMC_Bank3 interrupts */
;;;1117       else if (FMC_Bank == FMC_Bank3_NAND)
00006c  f5b07f80          CMP      r0,#0x100
000070  d107              BNE      |L7.130|
;;;1118       {
;;;1119         FMC_Bank3->SR3 &= (uint32_t)~FMC_IT;
000072  4b0e              LDR      r3,|L7.172|
000074  681b              LDR      r3,[r3,#0]
000076  438b              BICS     r3,r3,r1
000078  f04f4420          MOV      r4,#0xa0000000
00007c  f8c43084          STR      r3,[r4,#0x84]
000080  e013              B        |L7.170|
                  |L7.130|
;;;1120       }
;;;1121       /* Disable the selected FMC_Bank4 interrupts */
;;;1122       else if(FMC_Bank == FMC_Bank4_PCCARD)
000082  f5b05f80          CMP      r0,#0x1000
000086  d108              BNE      |L7.154|
;;;1123       {
;;;1124         FMC_Bank4->SR4 &= (uint32_t)~FMC_IT;    
000088  4b08              LDR      r3,|L7.172|
00008a  3320              ADDS     r3,r3,#0x20
00008c  681b              LDR      r3,[r3,#0]
00008e  438b              BICS     r3,r3,r1
000090  f04f4420          MOV      r4,#0xa0000000
000094  f8c430a4          STR      r3,[r4,#0xa4]
000098  e007              B        |L7.170|
                  |L7.154|
;;;1125       }
;;;1126       /* Disable the selected FMC_Bank5_6 interrupt */
;;;1127       else
;;;1128       {
;;;1129         /* Disables the interrupt if the refresh error flag is not set */
;;;1130         FMC_Bank5_6->SDRTR &= (uint32_t)~FMC_IT; 
00009a  4b04              LDR      r3,|L7.172|
00009c  33d0              ADDS     r3,r3,#0xd0
00009e  681b              LDR      r3,[r3,#0]
0000a0  438b              BICS     r3,r3,r1
0000a2  f04f4420          MOV      r4,#0xa0000000
0000a6  f8c43154          STR      r3,[r4,#0x154]
                  |L7.170|
;;;1131       }
;;;1132     }
;;;1133   }
0000aa  bd10              POP      {r4,pc}
;;;1134   
                          ENDP

                  |L7.172|
                          DCD      0xa0000084

                          AREA ||i.FMC_NANDCmd||, CODE, READONLY, ALIGN=2

                  FMC_NANDCmd PROC
;;;493      */
;;;494    void FMC_NANDCmd(uint32_t FMC_Bank, FunctionalState NewState)
000000  b199              CBZ      r1,|L8.42|
;;;495    {
;;;496      assert_param(IS_FMC_NAND_BANK(FMC_Bank));
;;;497      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;498      
;;;499      if (NewState != DISABLE)
;;;500      {
;;;501        /* Enable the selected NAND Bank by setting the PBKEN bit in the PCRx register */
;;;502        if(FMC_Bank == FMC_Bank2_NAND)
000002  2810              CMP      r0,#0x10
000004  d108              BNE      |L8.24|
;;;503        {
;;;504          FMC_Bank2->PCR2 |= PCR_PBKEN_SET;
000006  f04f4220          MOV      r2,#0xa0000000
00000a  6e12              LDR      r2,[r2,#0x60]
00000c  f0420204          ORR      r2,r2,#4
000010  f04f4320          MOV      r3,#0xa0000000
000014  661a              STR      r2,[r3,#0x60]
000016  e01b              B        |L8.80|
                  |L8.24|
;;;505        }
;;;506        else
;;;507        {
;;;508          FMC_Bank3->PCR3 |= PCR_PBKEN_SET;
000018  4a0e              LDR      r2,|L8.84|
00001a  6812              LDR      r2,[r2,#0]
00001c  f0420204          ORR      r2,r2,#4
000020  f04f4320          MOV      r3,#0xa0000000
000024  f8c32080          STR      r2,[r3,#0x80]
000028  e012              B        |L8.80|
                  |L8.42|
;;;509        }
;;;510      }
;;;511      else
;;;512      {
;;;513        /* Disable the selected NAND Bank by clearing the PBKEN bit in the PCRx register */
;;;514        if(FMC_Bank == FMC_Bank2_NAND)
00002a  2810              CMP      r0,#0x10
00002c  d108              BNE      |L8.64|
;;;515        {
;;;516          FMC_Bank2->PCR2 &= PCR_PBKEN_RESET;
00002e  f04f4220          MOV      r2,#0xa0000000
000032  6e12              LDR      r2,[r2,#0x60]
000034  4b08              LDR      r3,|L8.88|
000036  401a              ANDS     r2,r2,r3
000038  f04f4320          MOV      r3,#0xa0000000
00003c  661a              STR      r2,[r3,#0x60]
00003e  e007              B        |L8.80|
                  |L8.64|
;;;517        }
;;;518        else
;;;519        {
;;;520          FMC_Bank3->PCR3 &= PCR_PBKEN_RESET;
000040  4a04              LDR      r2,|L8.84|
000042  6812              LDR      r2,[r2,#0]
000044  4b04              LDR      r3,|L8.88|
000046  401a              ANDS     r2,r2,r3
000048  f04f4320          MOV      r3,#0xa0000000
00004c  f8c32080          STR      r2,[r3,#0x80]
                  |L8.80|
;;;521        }
;;;522      }
;;;523    }
000050  4770              BX       lr
;;;524    /**
                          ENDP

000052  0000              DCW      0x0000
                  |L8.84|
                          DCD      0xa0000080
                  |L8.88|
                          DCD      0x000ffffb

                          AREA ||i.FMC_NANDDeInit||, CODE, READONLY, ALIGN=2

                  FMC_NANDDeInit PROC
;;;368      */
;;;369    void FMC_NANDDeInit(uint32_t FMC_Bank)
000000  2810              CMP      r0,#0x10
;;;370    {
;;;371      /* Check the parameter */
;;;372      assert_param(IS_FMC_NAND_BANK(FMC_Bank));
;;;373      
;;;374      if(FMC_Bank == FMC_Bank2_NAND)
000002  d10a              BNE      |L9.26|
;;;375      {
;;;376        /* Set the FMC_Bank2 registers to their reset values */
;;;377        FMC_Bank2->PCR2 = 0x00000018;
000004  2118              MOVS     r1,#0x18
000006  f04f4220          MOV      r2,#0xa0000000
00000a  6611              STR      r1,[r2,#0x60]
;;;378        FMC_Bank2->SR2 = 0x00000040;
00000c  2140              MOVS     r1,#0x40
00000e  6651              STR      r1,[r2,#0x64]
;;;379        FMC_Bank2->PMEM2 = 0xFCFCFCFC;
000010  f04f31fc          MOV      r1,#0xfcfcfcfc
000014  6691              STR      r1,[r2,#0x68]
;;;380        FMC_Bank2->PATT2 = 0xFCFCFCFC;  
000016  66d1              STR      r1,[r2,#0x6c]
000018  e010              B        |L9.60|
                  |L9.26|
;;;381      }
;;;382      /* FMC_Bank3_NAND */  
;;;383      else
;;;384      {
;;;385        /* Set the FMC_Bank3 registers to their reset values */
;;;386        FMC_Bank3->PCR3 = 0x00000018;
00001a  2118              MOVS     r1,#0x18
00001c  4a08              LDR      r2,|L9.64|
00001e  6011              STR      r1,[r2,#0]
;;;387        FMC_Bank3->SR3 = 0x00000040;
000020  2140              MOVS     r1,#0x40
000022  f04f4220          MOV      r2,#0xa0000000
000026  f8c21084          STR      r1,[r2,#0x84]
;;;388        FMC_Bank3->PMEM3 = 0xFCFCFCFC;
00002a  f04f31fc          MOV      r1,#0xfcfcfcfc
00002e  4a04              LDR      r2,|L9.64|
000030  3208              ADDS     r2,r2,#8
000032  6011              STR      r1,[r2,#0]
;;;389        FMC_Bank3->PATT3 = 0xFCFCFCFC; 
000034  f04f4220          MOV      r2,#0xa0000000
000038  f8c2108c          STR      r1,[r2,#0x8c]
                  |L9.60|
;;;390      }  
;;;391    }
00003c  4770              BX       lr
;;;392    
                          ENDP

00003e  0000              DCW      0x0000
                  |L9.64|
                          DCD      0xa0000080

                          AREA ||i.FMC_NANDECCCmd||, CODE, READONLY, ALIGN=2

                  FMC_NANDECCCmd PROC
;;;533      */
;;;534    void FMC_NANDECCCmd(uint32_t FMC_Bank, FunctionalState NewState)
000000  b199              CBZ      r1,|L10.42|
;;;535    {
;;;536      assert_param(IS_FMC_NAND_BANK(FMC_Bank));
;;;537      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;538      
;;;539      if (NewState != DISABLE)
;;;540      {
;;;541        /* Enable the selected NAND Bank ECC function by setting the ECCEN bit in the PCRx register */
;;;542        if(FMC_Bank == FMC_Bank2_NAND)
000002  2810              CMP      r0,#0x10
000004  d108              BNE      |L10.24|
;;;543        {
;;;544          FMC_Bank2->PCR2 |= PCR_ECCEN_SET;
000006  f04f4220          MOV      r2,#0xa0000000
00000a  6e12              LDR      r2,[r2,#0x60]
00000c  f0420240          ORR      r2,r2,#0x40
000010  f04f4320          MOV      r3,#0xa0000000
000014  661a              STR      r2,[r3,#0x60]
000016  e01b              B        |L10.80|
                  |L10.24|
;;;545        }
;;;546        else
;;;547        {
;;;548          FMC_Bank3->PCR3 |= PCR_ECCEN_SET;
000018  4a0e              LDR      r2,|L10.84|
00001a  6812              LDR      r2,[r2,#0]
00001c  f0420240          ORR      r2,r2,#0x40
000020  f04f4320          MOV      r3,#0xa0000000
000024  f8c32080          STR      r2,[r3,#0x80]
000028  e012              B        |L10.80|
                  |L10.42|
;;;549        }
;;;550      }
;;;551      else
;;;552      {
;;;553        /* Disable the selected NAND Bank ECC function by clearing the ECCEN bit in the PCRx register */
;;;554        if(FMC_Bank == FMC_Bank2_NAND)
00002a  2810              CMP      r0,#0x10
00002c  d108              BNE      |L10.64|
;;;555        {
;;;556          FMC_Bank2->PCR2 &= PCR_ECCEN_RESET;
00002e  f04f4220          MOV      r2,#0xa0000000
000032  6e12              LDR      r2,[r2,#0x60]
000034  4b08              LDR      r3,|L10.88|
000036  401a              ANDS     r2,r2,r3
000038  f04f4320          MOV      r3,#0xa0000000
00003c  661a              STR      r2,[r3,#0x60]
00003e  e007              B        |L10.80|
                  |L10.64|
;;;557        }
;;;558        else
;;;559        {
;;;560          FMC_Bank3->PCR3 &= PCR_ECCEN_RESET;
000040  4a04              LDR      r2,|L10.84|
000042  6812              LDR      r2,[r2,#0]
000044  4b04              LDR      r3,|L10.88|
000046  401a              ANDS     r2,r2,r3
000048  f04f4320          MOV      r3,#0xa0000000
00004c  f8c32080          STR      r2,[r3,#0x80]
                  |L10.80|
;;;561        }
;;;562      }
;;;563    }
000050  4770              BX       lr
;;;564    
                          ENDP

000052  0000              DCW      0x0000
                  |L10.84|
                          DCD      0xa0000080
                  |L10.88|
                          DCD      0x000fffbf

                          AREA ||i.FMC_NANDInit||, CODE, READONLY, ALIGN=2

                  FMC_NANDInit PROC
;;;399      */
;;;400    void FMC_NANDInit(FMC_NANDInitTypeDef* FMC_NANDInitStruct)
000000  b530              PUSH     {r4,r5,lr}
;;;401    {
;;;402      uint32_t tmppcr = 0x00000000, tmppmem = 0x00000000, tmppatt = 0x00000000; 
000002  2100              MOVS     r1,#0
000004  2200              MOVS     r2,#0
000006  2300              MOVS     r3,#0
;;;403        
;;;404      /* Check the parameters */
;;;405      assert_param(IS_FMC_NAND_BANK(FMC_NANDInitStruct->FMC_Bank));
;;;406      assert_param(IS_FMC_WAIT_FEATURE(FMC_NANDInitStruct->FMC_Waitfeature));
;;;407      assert_param(IS_FMC_NAND_MEMORY_WIDTH(FMC_NANDInitStruct->FMC_MemoryDataWidth));
;;;408      assert_param(IS_FMC_ECC_STATE(FMC_NANDInitStruct->FMC_ECC));
;;;409      assert_param(IS_FMC_ECCPAGE_SIZE(FMC_NANDInitStruct->FMC_ECCPageSize));
;;;410      assert_param(IS_FMC_TCLR_TIME(FMC_NANDInitStruct->FMC_TCLRSetupTime));
;;;411      assert_param(IS_FMC_TAR_TIME(FMC_NANDInitStruct->FMC_TARSetupTime));
;;;412      assert_param(IS_FMC_SETUP_TIME(FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime));
;;;413      assert_param(IS_FMC_WAIT_TIME(FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime));
;;;414      assert_param(IS_FMC_HOLD_TIME(FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime));
;;;415      assert_param(IS_FMC_HIZ_TIME(FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime));
;;;416      assert_param(IS_FMC_SETUP_TIME(FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime));
;;;417      assert_param(IS_FMC_WAIT_TIME(FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime));
;;;418      assert_param(IS_FMC_HOLD_TIME(FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime));
;;;419      assert_param(IS_FMC_HIZ_TIME(FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime));
;;;420      
;;;421      /* Set the tmppcr value according to FMC_NANDInitStruct parameters */
;;;422      tmppcr = (uint32_t)FMC_NANDInitStruct->FMC_Waitfeature |
000008  6844              LDR      r4,[r0,#4]
00000a  f0440408          ORR      r4,r4,#8
00000e  6885              LDR      r5,[r0,#8]
000010  432c              ORRS     r4,r4,r5
000012  68c5              LDR      r5,[r0,#0xc]
000014  432c              ORRS     r4,r4,r5
000016  6905              LDR      r5,[r0,#0x10]
000018  432c              ORRS     r4,r4,r5
00001a  6945              LDR      r5,[r0,#0x14]
00001c  ea442445          ORR      r4,r4,r5,LSL #9
000020  6985              LDR      r5,[r0,#0x18]
000022  ea443145          ORR      r1,r4,r5,LSL #13
;;;423                PCR_MEMORYTYPE_NAND |
;;;424                FMC_NANDInitStruct->FMC_MemoryDataWidth |
;;;425                FMC_NANDInitStruct->FMC_ECC |
;;;426                FMC_NANDInitStruct->FMC_ECCPageSize |
;;;427                (FMC_NANDInitStruct->FMC_TCLRSetupTime << 9 )|
;;;428                (FMC_NANDInitStruct->FMC_TARSetupTime << 13);
;;;429                
;;;430      /* Set tmppmem value according to FMC_CommonSpaceTimingStructure parameters */
;;;431      tmppmem = (uint32_t)FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
000026  69c4              LDR      r4,[r0,#0x1c]
000028  6824              LDR      r4,[r4,#0]
00002a  69c5              LDR      r5,[r0,#0x1c]
00002c  686d              LDR      r5,[r5,#4]
00002e  ea442405          ORR      r4,r4,r5,LSL #8
000032  69c5              LDR      r5,[r0,#0x1c]
000034  892d              LDRH     r5,[r5,#8]
000036  ea444405          ORR      r4,r4,r5,LSL #16
00003a  69c5              LDR      r5,[r0,#0x1c]
00003c  7b2d              LDRB     r5,[r5,#0xc]
00003e  ea446205          ORR      r2,r4,r5,LSL #24
;;;432                (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
;;;433                (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
;;;434                (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
;;;435                
;;;436      /* Set tmppatt value according to FMC_AttributeSpaceTimingStructure parameters */
;;;437      tmppatt = (uint32_t)FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
000042  6a04              LDR      r4,[r0,#0x20]
000044  6824              LDR      r4,[r4,#0]
000046  6a05              LDR      r5,[r0,#0x20]
000048  686d              LDR      r5,[r5,#4]
00004a  ea442405          ORR      r4,r4,r5,LSL #8
00004e  6a05              LDR      r5,[r0,#0x20]
000050  892d              LDRH     r5,[r5,#8]
000052  ea444405          ORR      r4,r4,r5,LSL #16
000056  6a05              LDR      r5,[r0,#0x20]
000058  7b2d              LDRB     r5,[r5,#0xc]
00005a  ea446305          ORR      r3,r4,r5,LSL #24
;;;438                (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
;;;439                (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
;;;440                (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime << 24);
;;;441      
;;;442      if(FMC_NANDInitStruct->FMC_Bank == FMC_Bank2_NAND)
00005e  6804              LDR      r4,[r0,#0]
000060  2c10              CMP      r4,#0x10
000062  d105              BNE      |L11.112|
;;;443      {
;;;444        /* FMC_Bank2_NAND registers configuration */
;;;445        FMC_Bank2->PCR2 = tmppcr;
000064  f04f4420          MOV      r4,#0xa0000000
000068  6621              STR      r1,[r4,#0x60]
;;;446        FMC_Bank2->PMEM2 = tmppmem;
00006a  66a2              STR      r2,[r4,#0x68]
;;;447        FMC_Bank2->PATT2 = tmppatt;
00006c  66e3              STR      r3,[r4,#0x6c]
00006e  e008              B        |L11.130|
                  |L11.112|
;;;448      }
;;;449      else
;;;450      {
;;;451        /* FMC_Bank3_NAND registers configuration */
;;;452        FMC_Bank3->PCR3 = tmppcr;
000070  4c04              LDR      r4,|L11.132|
000072  6021              STR      r1,[r4,#0]
;;;453        FMC_Bank3->PMEM3 = tmppmem;
000074  f04f4420          MOV      r4,#0xa0000000
000078  f8c42088          STR      r2,[r4,#0x88]
;;;454        FMC_Bank3->PATT3 = tmppatt;
00007c  4c01              LDR      r4,|L11.132|
00007e  340c              ADDS     r4,r4,#0xc
000080  6023              STR      r3,[r4,#0]
                  |L11.130|
;;;455      }
;;;456    }
000082  bd30              POP      {r4,r5,pc}
;;;457    
                          ENDP

                  |L11.132|
                          DCD      0xa0000080

                          AREA ||i.FMC_NANDStructInit||, CODE, READONLY, ALIGN=1

                  FMC_NANDStructInit PROC
;;;464      */
;;;465    void FMC_NANDStructInit(FMC_NANDInitTypeDef* FMC_NANDInitStruct)
000000  2110              MOVS     r1,#0x10
;;;466    { 
;;;467      /* Reset NAND Init structure parameters values */
;;;468      FMC_NANDInitStruct->FMC_Bank = FMC_Bank2_NAND;
000002  6001              STR      r1,[r0,#0]
;;;469      FMC_NANDInitStruct->FMC_Waitfeature = FMC_Waitfeature_Disable;
000004  2100              MOVS     r1,#0
000006  6041              STR      r1,[r0,#4]
;;;470      FMC_NANDInitStruct->FMC_MemoryDataWidth = FMC_NAND_MemoryDataWidth_16b;
000008  2110              MOVS     r1,#0x10
00000a  6081              STR      r1,[r0,#8]
;;;471      FMC_NANDInitStruct->FMC_ECC = FMC_ECC_Disable;
00000c  2100              MOVS     r1,#0
00000e  60c1              STR      r1,[r0,#0xc]
;;;472      FMC_NANDInitStruct->FMC_ECCPageSize = FMC_ECCPageSize_256Bytes;
000010  6101              STR      r1,[r0,#0x10]
;;;473      FMC_NANDInitStruct->FMC_TCLRSetupTime = 0x0;
000012  6141              STR      r1,[r0,#0x14]
;;;474      FMC_NANDInitStruct->FMC_TARSetupTime = 0x0;
000014  6181              STR      r1,[r0,#0x18]
;;;475      FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime = 252;
000016  21fc              MOVS     r1,#0xfc
000018  69c2              LDR      r2,[r0,#0x1c]
00001a  6011              STR      r1,[r2,#0]
;;;476      FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime = 252;
00001c  69c2              LDR      r2,[r0,#0x1c]
00001e  6051              STR      r1,[r2,#4]
;;;477      FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime = 252;
000020  69c2              LDR      r2,[r0,#0x1c]
000022  6091              STR      r1,[r2,#8]
;;;478      FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime = 252;
000024  69c2              LDR      r2,[r0,#0x1c]
000026  60d1              STR      r1,[r2,#0xc]
;;;479      FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime = 252;
000028  6a02              LDR      r2,[r0,#0x20]
00002a  6011              STR      r1,[r2,#0]
;;;480      FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime = 252;
00002c  6a02              LDR      r2,[r0,#0x20]
00002e  6051              STR      r1,[r2,#4]
;;;481      FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime = 252;
000030  6a02              LDR      r2,[r0,#0x20]
000032  6091              STR      r1,[r2,#8]
;;;482      FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime = 252;	  
000034  6a02              LDR      r2,[r0,#0x20]
000036  60d1              STR      r1,[r2,#0xc]
;;;483    }
000038  4770              BX       lr
;;;484    
                          ENDP


                          AREA ||i.FMC_NORSRAMCmd||, CODE, READONLY, ALIGN=2

                  FMC_NORSRAMCmd PROC
;;;295      */
;;;296    void FMC_NORSRAMCmd(uint32_t FMC_Bank, FunctionalState NewState)
000000  b151              CBZ      r1,|L13.24|
;;;297    {
;;;298      assert_param(IS_FMC_NORSRAM_BANK(FMC_Bank));
;;;299      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;300      
;;;301      if (NewState != DISABLE)
;;;302      {
;;;303        /* Enable the selected NOR/SRAM Bank by setting the PBKEN bit in the BCRx register */
;;;304        FMC_Bank1->BTCR[FMC_Bank] |= BCR_MBKEN_SET;
000002  0082              LSLS     r2,r0,#2
000004  f1a242c0          SUB      r2,r2,#0x60000000
000008  6812              LDR      r2,[r2,#0]
00000a  f0420301          ORR      r3,r2,#1
00000e  0082              LSLS     r2,r0,#2
000010  f1a242c0          SUB      r2,r2,#0x60000000
000014  6013              STR      r3,[r2,#0]
000016  e009              B        |L13.44|
                  |L13.24|
;;;305      }
;;;306      else
;;;307      {
;;;308        /* Disable the selected NOR/SRAM Bank by clearing the PBKEN bit in the BCRx register */
;;;309        FMC_Bank1->BTCR[FMC_Bank] &= BCR_MBKEN_RESET;
000018  0082              LSLS     r2,r0,#2
00001a  f1a242c0          SUB      r2,r2,#0x60000000
00001e  6812              LDR      r2,[r2,#0]
000020  4b03              LDR      r3,|L13.48|
000022  401a              ANDS     r2,r2,r3
000024  0083              LSLS     r3,r0,#2
000026  f1a343c0          SUB      r3,r3,#0x60000000
00002a  601a              STR      r2,[r3,#0]
                  |L13.44|
;;;310      }
;;;311    }
00002c  4770              BX       lr
;;;312    /**
                          ENDP

00002e  0000              DCW      0x0000
                  |L13.48|
                          DCD      0x000ffffe

                          AREA ||i.FMC_NORSRAMDeInit||, CODE, READONLY, ALIGN=1

                  FMC_NORSRAMDeInit PROC
;;;135      */
;;;136    void FMC_NORSRAMDeInit(uint32_t FMC_Bank)
000000  b930              CBNZ     r0,|L14.16|
;;;137    {
;;;138      /* Check the parameter */
;;;139      assert_param(IS_FMC_NORSRAM_BANK(FMC_Bank));
;;;140      
;;;141      /* FMC_Bank1_NORSRAM1 */
;;;142      if(FMC_Bank == FMC_Bank1_NORSRAM1)
;;;143      {
;;;144        FMC_Bank1->BTCR[FMC_Bank] = 0x000030DB;    
000002  f24302db          MOV      r2,#0x30db
000006  0081              LSLS     r1,r0,#2
000008  f1a141c0          SUB      r1,r1,#0x60000000
00000c  600a              STR      r2,[r1,#0]
00000e  e005              B        |L14.28|
                  |L14.16|
;;;145      }
;;;146      /* FMC_Bank1_NORSRAM2,  FMC_Bank1_NORSRAM3 or FMC_Bank1_NORSRAM4 */
;;;147      else
;;;148      {   
;;;149        FMC_Bank1->BTCR[FMC_Bank] = 0x000030D2; 
000010  f24302d2          MOV      r2,#0x30d2
000014  0081              LSLS     r1,r0,#2
000016  f1a141c0          SUB      r1,r1,#0x60000000
00001a  600a              STR      r2,[r1,#0]
                  |L14.28|
;;;150      }
;;;151      FMC_Bank1->BTCR[FMC_Bank + 1] = 0x0FFFFFFF;
00001c  f06f4270          MVN      r2,#0xf0000000
000020  1c41              ADDS     r1,r0,#1
000022  0089              LSLS     r1,r1,#2
000024  f1a141c0          SUB      r1,r1,#0x60000000
000028  600a              STR      r2,[r1,#0]
;;;152      FMC_Bank1E->BWTR[FMC_Bank] = 0x0FFFFFFF;  
00002a  0081              LSLS     r1,r0,#2
00002c  f1a141c0          SUB      r1,r1,#0x60000000
000030  f8c12104          STR      r2,[r1,#0x104]
;;;153    }
000034  4770              BX       lr
;;;154    
                          ENDP


                          AREA ||i.FMC_NORSRAMInit||, CODE, READONLY, ALIGN=1

                  FMC_NORSRAMInit PROC
;;;162      */
;;;163    void FMC_NORSRAMInit(FMC_NORSRAMInitTypeDef* FMC_NORSRAMInitStruct)
000000  2100              MOVS     r1,#0
;;;164    {
;;;165      uint32_t tmpr = 0;
;;;166      
;;;167      /* Check the parameters */
;;;168      assert_param(IS_FMC_NORSRAM_BANK(FMC_NORSRAMInitStruct->FMC_Bank));
;;;169      assert_param(IS_FMC_MUX(FMC_NORSRAMInitStruct->FMC_DataAddressMux));
;;;170      assert_param(IS_FMC_MEMORY(FMC_NORSRAMInitStruct->FMC_MemoryType));
;;;171      assert_param(IS_FMC_NORSRAM_MEMORY_WIDTH(FMC_NORSRAMInitStruct->FMC_MemoryDataWidth));
;;;172      assert_param(IS_FMC_BURSTMODE(FMC_NORSRAMInitStruct->FMC_BurstAccessMode));
;;;173      assert_param(IS_FMC_WAIT_POLARITY(FMC_NORSRAMInitStruct->FMC_WaitSignalPolarity));
;;;174      assert_param(IS_FMC_WRAP_MODE(FMC_NORSRAMInitStruct->FMC_WrapMode));
;;;175      assert_param(IS_FMC_WAIT_SIGNAL_ACTIVE(FMC_NORSRAMInitStruct->FMC_WaitSignalActive));
;;;176      assert_param(IS_FMC_WRITE_OPERATION(FMC_NORSRAMInitStruct->FMC_WriteOperation));
;;;177      assert_param(IS_FMC_WAITE_SIGNAL(FMC_NORSRAMInitStruct->FMC_WaitSignal));
;;;178      assert_param(IS_FMC_EXTENDED_MODE(FMC_NORSRAMInitStruct->FMC_ExtendedMode));
;;;179      assert_param(IS_FMC_ASYNWAIT(FMC_NORSRAMInitStruct->FMC_AsynchronousWait));
;;;180      assert_param(IS_FMC_WRITE_BURST(FMC_NORSRAMInitStruct->FMC_WriteBurst));
;;;181      assert_param(IS_FMC_CONTINOUS_CLOCK(FMC_NORSRAMInitStruct->FMC_ContinousClock));  
;;;182      assert_param(IS_FMC_ADDRESS_SETUP_TIME(FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressSetupTime));
;;;183      assert_param(IS_FMC_ADDRESS_HOLD_TIME(FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressHoldTime));
;;;184      assert_param(IS_FMC_DATASETUP_TIME(FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataSetupTime));
;;;185      assert_param(IS_FMC_TURNAROUND_TIME(FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_BusTurnAroundDuration));
;;;186      assert_param(IS_FMC_CLK_DIV(FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision));
;;;187      assert_param(IS_FMC_DATA_LATENCY(FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataLatency));
;;;188      assert_param(IS_FMC_ACCESS_MODE(FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AccessMode)); 
;;;189      
;;;190      /* NOR/SRAM Bank control register configuration */ 
;;;191      FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank] =   
000002  e9d02301          LDRD     r2,r3,[r0,#4]
000006  431a              ORRS     r2,r2,r3
000008  68c3              LDR      r3,[r0,#0xc]
00000a  431a              ORRS     r2,r2,r3
00000c  6903              LDR      r3,[r0,#0x10]
00000e  431a              ORRS     r2,r2,r3
000010  6943              LDR      r3,[r0,#0x14]
000012  431a              ORRS     r2,r2,r3
000014  6983              LDR      r3,[r0,#0x18]
000016  431a              ORRS     r2,r2,r3
000018  69c3              LDR      r3,[r0,#0x1c]
00001a  431a              ORRS     r2,r2,r3
00001c  6a03              LDR      r3,[r0,#0x20]
00001e  431a              ORRS     r2,r2,r3
000020  6a43              LDR      r3,[r0,#0x24]
000022  431a              ORRS     r2,r2,r3
000024  6a83              LDR      r3,[r0,#0x28]
000026  431a              ORRS     r2,r2,r3
000028  6ac3              LDR      r3,[r0,#0x2c]
00002a  431a              ORRS     r2,r2,r3
00002c  6b03              LDR      r3,[r0,#0x30]
00002e  431a              ORRS     r2,r2,r3
000030  6b43              LDR      r3,[r0,#0x34]
000032  431a              ORRS     r2,r2,r3
000034  6803              LDR      r3,[r0,#0]
000036  009b              LSLS     r3,r3,#2
000038  f1a343c0          SUB      r3,r3,#0x60000000
00003c  601a              STR      r2,[r3,#0]
;;;192                (uint32_t)FMC_NORSRAMInitStruct->FMC_DataAddressMux |
;;;193                FMC_NORSRAMInitStruct->FMC_MemoryType |
;;;194                FMC_NORSRAMInitStruct->FMC_MemoryDataWidth |
;;;195                FMC_NORSRAMInitStruct->FMC_BurstAccessMode |
;;;196                FMC_NORSRAMInitStruct->FMC_WaitSignalPolarity |
;;;197                FMC_NORSRAMInitStruct->FMC_WrapMode |
;;;198                FMC_NORSRAMInitStruct->FMC_WaitSignalActive |
;;;199                FMC_NORSRAMInitStruct->FMC_WriteOperation |
;;;200                FMC_NORSRAMInitStruct->FMC_WaitSignal |
;;;201                FMC_NORSRAMInitStruct->FMC_ExtendedMode |
;;;202                FMC_NORSRAMInitStruct->FMC_AsynchronousWait |
;;;203                FMC_NORSRAMInitStruct->FMC_WriteBurst |
;;;204                FMC_NORSRAMInitStruct->FMC_ContinousClock;
;;;205    
;;;206                
;;;207      if(FMC_NORSRAMInitStruct->FMC_MemoryType == FMC_MemoryType_NOR)
00003e  6882              LDR      r2,[r0,#8]
000040  2a08              CMP      r2,#8
000042  d10b              BNE      |L15.92|
;;;208      {
;;;209        FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank] |= (uint32_t)BCR_FACCEN_SET;
000044  6802              LDR      r2,[r0,#0]
000046  0092              LSLS     r2,r2,#2
000048  f1a242c0          SUB      r2,r2,#0x60000000
00004c  6812              LDR      r2,[r2,#0]
00004e  f0420340          ORR      r3,r2,#0x40
000052  6802              LDR      r2,[r0,#0]
000054  0092              LSLS     r2,r2,#2
000056  f1a242c0          SUB      r2,r2,#0x60000000
00005a  6013              STR      r3,[r2,#0]
                  |L15.92|
;;;210      }
;;;211    
;;;212      /* Configure Continuous clock feature when bank2..4 is used */
;;;213      if((FMC_NORSRAMInitStruct->FMC_ContinousClock == FMC_CClock_SyncAsync) && (FMC_NORSRAMInitStruct->FMC_Bank != FMC_Bank1_NORSRAM1))
00005c  6b42              LDR      r2,[r0,#0x34]
00005e  f5b21f80          CMP      r2,#0x100000
000062  d119              BNE      |L15.152|
000064  6802              LDR      r2,[r0,#0]
000066  b1ba              CBZ      r2,|L15.152|
;;;214      {
;;;215        tmpr = (uint32_t)((FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1+1]) & ~(((uint32_t)0x0F) << 20));    
000068  f04f4220          MOV      r2,#0xa0000000
00006c  6852              LDR      r2,[r2,#4]
00006e  f4220170          BIC      r1,r2,#0xf00000
;;;216        
;;;217        FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1]  |= FMC_NORSRAMInitStruct->FMC_ContinousClock;
000072  f04f4220          MOV      r2,#0xa0000000
000076  6812              LDR      r2,[r2,#0]
000078  6b43              LDR      r3,[r0,#0x34]
00007a  431a              ORRS     r2,r2,r3
00007c  f04f4320          MOV      r3,#0xa0000000
000080  601a              STR      r2,[r3,#0]
;;;218        FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1]  |= FMC_BurstAccessMode_Enable;
000082  461a              MOV      r2,r3
000084  6812              LDR      r2,[r2,#0]
000086  f4427280          ORR      r2,r2,#0x100
00008a  601a              STR      r2,[r3,#0]
;;;219        FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1+1] = (uint32_t)(tmpr | (((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision)-1) << 20));
00008c  6b82              LDR      r2,[r0,#0x38]
00008e  8a12              LDRH     r2,[r2,#0x10]
000090  1e52              SUBS     r2,r2,#1
000092  ea415202          ORR      r2,r1,r2,LSL #20
000096  605a              STR      r2,[r3,#4]
                  |L15.152|
;;;220      }
;;;221      
;;;222      /* NOR/SRAM Bank timing register configuration */
;;;223      FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank+1] =   
000098  6b82              LDR      r2,[r0,#0x38]
00009a  6812              LDR      r2,[r2,#0]
00009c  6b83              LDR      r3,[r0,#0x38]
00009e  685b              LDR      r3,[r3,#4]
0000a0  ea421203          ORR      r2,r2,r3,LSL #4
0000a4  6b83              LDR      r3,[r0,#0x38]
0000a6  689b              LDR      r3,[r3,#8]
0000a8  ea422203          ORR      r2,r2,r3,LSL #8
0000ac  6b83              LDR      r3,[r0,#0x38]
0000ae  899b              LDRH     r3,[r3,#0xc]
0000b0  ea424203          ORR      r2,r2,r3,LSL #16
0000b4  6b83              LDR      r3,[r0,#0x38]
0000b6  8a1b              LDRH     r3,[r3,#0x10]
0000b8  ea425203          ORR      r2,r2,r3,LSL #20
0000bc  6b83              LDR      r3,[r0,#0x38]
0000be  7d1b              LDRB     r3,[r3,#0x14]
0000c0  ea426203          ORR      r2,r2,r3,LSL #24
0000c4  6b83              LDR      r3,[r0,#0x38]
0000c6  699b              LDR      r3,[r3,#0x18]
0000c8  431a              ORRS     r2,r2,r3
0000ca  6803              LDR      r3,[r0,#0]
0000cc  1c5b              ADDS     r3,r3,#1
0000ce  009b              LSLS     r3,r3,#2
0000d0  f1a343c0          SUB      r3,r3,#0x60000000
0000d4  601a              STR      r2,[r3,#0]
;;;224                (uint32_t)FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressSetupTime |
;;;225                (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressHoldTime << 4) |
;;;226                (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataSetupTime << 8) |
;;;227                (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_BusTurnAroundDuration << 16) |
;;;228                ((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision) << 20) |
;;;229                ((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataLatency) << 24) |
;;;230                 FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AccessMode;
;;;231         
;;;232      /* NOR/SRAM Bank timing register for write configuration, if extended mode is used */
;;;233      if(FMC_NORSRAMInitStruct->FMC_ExtendedMode == FMC_ExtendedMode_Enable)
0000d6  6a82              LDR      r2,[r0,#0x28]
0000d8  f5b24f80          CMP      r2,#0x4000
0000dc  d11b              BNE      |L15.278|
;;;234      {
;;;235        assert_param(IS_FMC_ADDRESS_SETUP_TIME(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressSetupTime));
;;;236        assert_param(IS_FMC_ADDRESS_HOLD_TIME(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressHoldTime));
;;;237        assert_param(IS_FMC_DATASETUP_TIME(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataSetupTime));
;;;238        assert_param(IS_FMC_CLK_DIV(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_CLKDivision));
;;;239        assert_param(IS_FMC_DATA_LATENCY(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataLatency));
;;;240        assert_param(IS_FMC_ACCESS_MODE(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AccessMode));
;;;241        
;;;242        FMC_Bank1E->BWTR[FMC_NORSRAMInitStruct->FMC_Bank] =   
0000de  6bc2              LDR      r2,[r0,#0x3c]
0000e0  6812              LDR      r2,[r2,#0]
0000e2  6bc3              LDR      r3,[r0,#0x3c]
0000e4  685b              LDR      r3,[r3,#4]
0000e6  ea421203          ORR      r2,r2,r3,LSL #4
0000ea  6bc3              LDR      r3,[r0,#0x3c]
0000ec  689b              LDR      r3,[r3,#8]
0000ee  ea422203          ORR      r2,r2,r3,LSL #8
0000f2  6bc3              LDR      r3,[r0,#0x3c]
0000f4  8a1b              LDRH     r3,[r3,#0x10]
0000f6  ea425203          ORR      r2,r2,r3,LSL #20
0000fa  6bc3              LDR      r3,[r0,#0x3c]
0000fc  7d1b              LDRB     r3,[r3,#0x14]
0000fe  ea426203          ORR      r2,r2,r3,LSL #24
000102  6bc3              LDR      r3,[r0,#0x3c]
000104  699b              LDR      r3,[r3,#0x18]
000106  431a              ORRS     r2,r2,r3
000108  6803              LDR      r3,[r0,#0]
00010a  009b              LSLS     r3,r3,#2
00010c  f1a343c0          SUB      r3,r3,#0x60000000
000110  f8c32104          STR      r2,[r3,#0x104]
000114  e007              B        |L15.294|
                  |L15.278|
;;;243                   (uint32_t)FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressSetupTime |
;;;244                   (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressHoldTime << 4 )|
;;;245                   (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataSetupTime << 8) |
;;;246                   ((FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_CLKDivision) << 20) |
;;;247                   ((FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataLatency) << 24) |
;;;248                   FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AccessMode;
;;;249      }
;;;250      else
;;;251      {
;;;252        FMC_Bank1E->BWTR[FMC_NORSRAMInitStruct->FMC_Bank] = 0x0FFFFFFF;
000116  f06f4370          MVN      r3,#0xf0000000
00011a  6802              LDR      r2,[r0,#0]
00011c  0092              LSLS     r2,r2,#2
00011e  f1a242c0          SUB      r2,r2,#0x60000000
000122  f8c23104          STR      r3,[r2,#0x104]
                  |L15.294|
;;;253      }
;;;254      
;;;255    }
000126  4770              BX       lr
;;;256    
                          ENDP


                          AREA ||i.FMC_NORSRAMStructInit||, CODE, READONLY, ALIGN=2

                  FMC_NORSRAMStructInit PROC
;;;262      */
;;;263    void FMC_NORSRAMStructInit(FMC_NORSRAMInitTypeDef* FMC_NORSRAMInitStruct)
000000  2100              MOVS     r1,#0
;;;264    {  
;;;265      /* Reset NOR/SRAM Init structure parameters values */
;;;266      FMC_NORSRAMInitStruct->FMC_Bank = FMC_Bank1_NORSRAM1;
000002  6001              STR      r1,[r0,#0]
;;;267      FMC_NORSRAMInitStruct->FMC_DataAddressMux = FMC_DataAddressMux_Enable;
000004  2102              MOVS     r1,#2
000006  6041              STR      r1,[r0,#4]
;;;268      FMC_NORSRAMInitStruct->FMC_MemoryType = FMC_MemoryType_SRAM;
000008  2100              MOVS     r1,#0
00000a  6081              STR      r1,[r0,#8]
;;;269      FMC_NORSRAMInitStruct->FMC_MemoryDataWidth = FMC_NORSRAM_MemoryDataWidth_16b;
00000c  2110              MOVS     r1,#0x10
00000e  60c1              STR      r1,[r0,#0xc]
;;;270      FMC_NORSRAMInitStruct->FMC_BurstAccessMode = FMC_BurstAccessMode_Disable;
000010  2100              MOVS     r1,#0
000012  6101              STR      r1,[r0,#0x10]
;;;271      FMC_NORSRAMInitStruct->FMC_AsynchronousWait = FMC_AsynchronousWait_Disable;
000014  62c1              STR      r1,[r0,#0x2c]
;;;272      FMC_NORSRAMInitStruct->FMC_WaitSignalPolarity = FMC_WaitSignalPolarity_Low;
000016  6141              STR      r1,[r0,#0x14]
;;;273      FMC_NORSRAMInitStruct->FMC_WrapMode = FMC_WrapMode_Disable;
000018  6181              STR      r1,[r0,#0x18]
;;;274      FMC_NORSRAMInitStruct->FMC_WaitSignalActive = FMC_WaitSignalActive_BeforeWaitState;
00001a  61c1              STR      r1,[r0,#0x1c]
;;;275      FMC_NORSRAMInitStruct->FMC_WriteOperation = FMC_WriteOperation_Enable;
00001c  f44f5180          MOV      r1,#0x1000
000020  6201              STR      r1,[r0,#0x20]
;;;276      FMC_NORSRAMInitStruct->FMC_WaitSignal = FMC_WaitSignal_Enable;
000022  0049              LSLS     r1,r1,#1
000024  6241              STR      r1,[r0,#0x24]
;;;277      FMC_NORSRAMInitStruct->FMC_ExtendedMode = FMC_ExtendedMode_Disable;
000026  2100              MOVS     r1,#0
000028  6281              STR      r1,[r0,#0x28]
;;;278      FMC_NORSRAMInitStruct->FMC_WriteBurst = FMC_WriteBurst_Disable;
00002a  6301              STR      r1,[r0,#0x30]
;;;279      FMC_NORSRAMInitStruct->FMC_ContinousClock = FMC_CClock_SyncOnly;
00002c  6341              STR      r1,[r0,#0x34]
;;;280      
;;;281      FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct = (FMC_NORSRAMTimingInitTypeDef*)&FMC_DefaultTimingStruct;
00002e  4902              LDR      r1,|L16.56|
000030  6381              STR      r1,[r0,#0x38]
;;;282      FMC_NORSRAMInitStruct->FMC_WriteTimingStruct = (FMC_NORSRAMTimingInitTypeDef*)&FMC_DefaultTimingStruct;
000032  63c1              STR      r1,[r0,#0x3c]
;;;283    }
000034  4770              BX       lr
;;;284    
                          ENDP

000036  0000              DCW      0x0000
                  |L16.56|
                          DCD      FMC_DefaultTimingStruct

                          AREA ||i.FMC_PCCARDCmd||, CODE, READONLY, ALIGN=2

                  FMC_PCCARDCmd PROC
;;;731      */
;;;732    void FMC_PCCARDCmd(FunctionalState NewState)
000000  b140              CBZ      r0,|L17.20|
;;;733    {
;;;734      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;735      
;;;736      if (NewState != DISABLE)
;;;737      {
;;;738        /* Enable the PCCARD Bank by setting the PBKEN bit in the PCR4 register */
;;;739        FMC_Bank4->PCR4 |= PCR_PBKEN_SET;
000002  4909              LDR      r1,|L17.40|
000004  6809              LDR      r1,[r1,#0]
000006  f0410104          ORR      r1,r1,#4
00000a  f04f4220          MOV      r2,#0xa0000000
00000e  f8c210a0          STR      r1,[r2,#0xa0]
000012  e007              B        |L17.36|
                  |L17.20|
;;;740      }
;;;741      else
;;;742      {
;;;743        /* Disable the PCCARD Bank by clearing the PBKEN bit in the PCR4 register */
;;;744        FMC_Bank4->PCR4 &= PCR_PBKEN_RESET;
000014  4904              LDR      r1,|L17.40|
000016  6809              LDR      r1,[r1,#0]
000018  4a04              LDR      r2,|L17.44|
00001a  4011              ANDS     r1,r1,r2
00001c  f04f4220          MOV      r2,#0xa0000000
000020  f8c210a0          STR      r1,[r2,#0xa0]
                  |L17.36|
;;;745      }
;;;746    }
000024  4770              BX       lr
;;;747    
                          ENDP

000026  0000              DCW      0x0000
                  |L17.40|
                          DCD      0xa00000a0
                  |L17.44|
                          DCD      0x000ffffb

                          AREA ||i.FMC_PCCARDDeInit||, CODE, READONLY, ALIGN=2

                  FMC_PCCARDDeInit PROC
;;;636      */
;;;637    void FMC_PCCARDDeInit(void)
000000  2018              MOVS     r0,#0x18
;;;638    {
;;;639      /* Set the FMC_Bank4 registers to their reset values */
;;;640      FMC_Bank4->PCR4 = 0x00000018; 
000002  4908              LDR      r1,|L18.36|
000004  6008              STR      r0,[r1,#0]
;;;641      FMC_Bank4->SR4 = 0x00000000;	
000006  2000              MOVS     r0,#0
000008  0609              LSLS     r1,r1,#24
00000a  f8c100a4          STR      r0,[r1,#0xa4]
;;;642      FMC_Bank4->PMEM4 = 0xFCFCFCFC;
00000e  f04f30fc          MOV      r0,#0xfcfcfcfc
000012  4904              LDR      r1,|L18.36|
000014  3108              ADDS     r1,r1,#8
000016  6008              STR      r0,[r1,#0]
;;;643      FMC_Bank4->PATT4 = 0xFCFCFCFC;
000018  1d09              ADDS     r1,r1,#4
00001a  6008              STR      r0,[r1,#0]
;;;644      FMC_Bank4->PIO4 = 0xFCFCFCFC;
00001c  1d09              ADDS     r1,r1,#4
00001e  6008              STR      r0,[r1,#0]
;;;645    }
000020  4770              BX       lr
;;;646    
                          ENDP

000022  0000              DCW      0x0000
                  |L18.36|
                          DCD      0xa00000a0

                          AREA ||i.FMC_PCCARDInit||, CODE, READONLY, ALIGN=2

                  FMC_PCCARDInit PROC
;;;653      */
;;;654    void FMC_PCCARDInit(FMC_PCCARDInitTypeDef* FMC_PCCARDInitStruct)
000000  6801              LDR      r1,[r0,#0]
;;;655    {
;;;656      /* Check the parameters */
;;;657      assert_param(IS_FMC_WAIT_FEATURE(FMC_PCCARDInitStruct->FMC_Waitfeature));
;;;658      assert_param(IS_FMC_TCLR_TIME(FMC_PCCARDInitStruct->FMC_TCLRSetupTime));
;;;659      assert_param(IS_FMC_TAR_TIME(FMC_PCCARDInitStruct->FMC_TARSetupTime));
;;;660     
;;;661      assert_param(IS_FMC_SETUP_TIME(FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime));
;;;662      assert_param(IS_FMC_WAIT_TIME(FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime));
;;;663      assert_param(IS_FMC_HOLD_TIME(FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime));
;;;664      assert_param(IS_FMC_HIZ_TIME(FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime));
;;;665      
;;;666      assert_param(IS_FMC_SETUP_TIME(FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime));
;;;667      assert_param(IS_FMC_WAIT_TIME(FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime));
;;;668      assert_param(IS_FMC_HOLD_TIME(FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime));
;;;669      assert_param(IS_FMC_HIZ_TIME(FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime));
;;;670      assert_param(IS_FMC_SETUP_TIME(FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_SetupTime));
;;;671      assert_param(IS_FMC_WAIT_TIME(FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_WaitSetupTime));
;;;672      assert_param(IS_FMC_HOLD_TIME(FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HoldSetupTime));
;;;673      assert_param(IS_FMC_HIZ_TIME(FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HiZSetupTime));
;;;674      
;;;675      /* Set the PCR4 register value according to FMC_PCCARDInitStruct parameters */
;;;676      FMC_Bank4->PCR4 = (uint32_t)FMC_PCCARDInitStruct->FMC_Waitfeature |
000002  f0410110          ORR      r1,r1,#0x10
000006  6842              LDR      r2,[r0,#4]
000008  ea412142          ORR      r1,r1,r2,LSL #9
00000c  6882              LDR      r2,[r0,#8]
00000e  ea413142          ORR      r1,r1,r2,LSL #13
000012  4a1b              LDR      r2,|L19.128|
000014  6011              STR      r1,[r2,#0]
;;;677                         FMC_NAND_MemoryDataWidth_16b |  
;;;678                         (FMC_PCCARDInitStruct->FMC_TCLRSetupTime << 9) |
;;;679                         (FMC_PCCARDInitStruct->FMC_TARSetupTime << 13);
;;;680                
;;;681      /* Set PMEM4 register value according to FMC_CommonSpaceTimingStructure parameters */
;;;682      FMC_Bank4->PMEM4 = (uint32_t)FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
000016  68c1              LDR      r1,[r0,#0xc]
000018  6809              LDR      r1,[r1,#0]
00001a  68c2              LDR      r2,[r0,#0xc]
00001c  6852              LDR      r2,[r2,#4]
00001e  ea412102          ORR      r1,r1,r2,LSL #8
000022  68c2              LDR      r2,[r0,#0xc]
000024  8912              LDRH     r2,[r2,#8]
000026  ea414102          ORR      r1,r1,r2,LSL #16
00002a  68c2              LDR      r2,[r0,#0xc]
00002c  7b12              LDRB     r2,[r2,#0xc]
00002e  ea416102          ORR      r1,r1,r2,LSL #24
000032  4a13              LDR      r2,|L19.128|
000034  3208              ADDS     r2,r2,#8
000036  6011              STR      r1,[r2,#0]
;;;683                          (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
;;;684                          (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
;;;685                          (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
;;;686                
;;;687      /* Set PATT4 register value according to FMC_AttributeSpaceTimingStructure parameters */
;;;688      FMC_Bank4->PATT4 = (uint32_t)FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
000038  6901              LDR      r1,[r0,#0x10]
00003a  6809              LDR      r1,[r1,#0]
00003c  6902              LDR      r2,[r0,#0x10]
00003e  6852              LDR      r2,[r2,#4]
000040  ea412102          ORR      r1,r1,r2,LSL #8
000044  6902              LDR      r2,[r0,#0x10]
000046  8912              LDRH     r2,[r2,#8]
000048  ea414102          ORR      r1,r1,r2,LSL #16
00004c  6902              LDR      r2,[r0,#0x10]
00004e  7b12              LDRB     r2,[r2,#0xc]
000050  ea416102          ORR      r1,r1,r2,LSL #24
000054  4a0a              LDR      r2,|L19.128|
000056  320c              ADDS     r2,r2,#0xc
000058  6011              STR      r1,[r2,#0]
;;;689                          (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
;;;690                          (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
;;;691                          (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime << 24);	
;;;692                
;;;693      /* Set PIO4 register value according to FMC_IOSpaceTimingStructure parameters */
;;;694      FMC_Bank4->PIO4 = (uint32_t)FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_SetupTime |
00005a  6941              LDR      r1,[r0,#0x14]
00005c  6809              LDR      r1,[r1,#0]
00005e  6942              LDR      r2,[r0,#0x14]
000060  6852              LDR      r2,[r2,#4]
000062  ea412102          ORR      r1,r1,r2,LSL #8
000066  6942              LDR      r2,[r0,#0x14]
000068  8912              LDRH     r2,[r2,#8]
00006a  ea414102          ORR      r1,r1,r2,LSL #16
00006e  6942              LDR      r2,[r0,#0x14]
000070  7b12              LDRB     r2,[r2,#0xc]
000072  ea416102          ORR      r1,r1,r2,LSL #24
000076  f04f4220          MOV      r2,#0xa0000000
00007a  f8c210b0          STR      r1,[r2,#0xb0]
;;;695                         (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_WaitSetupTime << 8) |
;;;696                         (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HoldSetupTime << 16)|
;;;697                         (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HiZSetupTime << 24);             
;;;698    }
00007e  4770              BX       lr
;;;699    
                          ENDP

                  |L19.128|
                          DCD      0xa00000a0

                          AREA ||i.FMC_PCCARDStructInit||, CODE, READONLY, ALIGN=1

                  FMC_PCCARDStructInit PROC
;;;705      */
;;;706    void FMC_PCCARDStructInit(FMC_PCCARDInitTypeDef* FMC_PCCARDInitStruct)
000000  2100              MOVS     r1,#0
;;;707    {
;;;708      /* Reset PCCARD Init structure parameters values */
;;;709      FMC_PCCARDInitStruct->FMC_Waitfeature = FMC_Waitfeature_Disable;
000002  6001              STR      r1,[r0,#0]
;;;710      FMC_PCCARDInitStruct->FMC_TCLRSetupTime = 0;
000004  6041              STR      r1,[r0,#4]
;;;711      FMC_PCCARDInitStruct->FMC_TARSetupTime = 0;
000006  6081              STR      r1,[r0,#8]
;;;712      FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime = 252;
000008  21fc              MOVS     r1,#0xfc
00000a  68c2              LDR      r2,[r0,#0xc]
00000c  6011              STR      r1,[r2,#0]
;;;713      FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime = 252;
00000e  68c2              LDR      r2,[r0,#0xc]
000010  6051              STR      r1,[r2,#4]
;;;714      FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime = 252;
000012  68c2              LDR      r2,[r0,#0xc]
000014  6091              STR      r1,[r2,#8]
;;;715      FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime = 252;
000016  68c2              LDR      r2,[r0,#0xc]
000018  60d1              STR      r1,[r2,#0xc]
;;;716      FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime = 252;
00001a  6902              LDR      r2,[r0,#0x10]
00001c  6011              STR      r1,[r2,#0]
;;;717      FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime = 252;
00001e  6902              LDR      r2,[r0,#0x10]
000020  6051              STR      r1,[r2,#4]
;;;718      FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime = 252;
000022  6902              LDR      r2,[r0,#0x10]
000024  6091              STR      r1,[r2,#8]
;;;719      FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime = 252;	
000026  6902              LDR      r2,[r0,#0x10]
000028  60d1              STR      r1,[r2,#0xc]
;;;720      FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_SetupTime = 252;
00002a  6942              LDR      r2,[r0,#0x14]
00002c  6011              STR      r1,[r2,#0]
;;;721      FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_WaitSetupTime = 252;
00002e  6942              LDR      r2,[r0,#0x14]
000030  6051              STR      r1,[r2,#4]
;;;722      FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HoldSetupTime = 252;
000032  6942              LDR      r2,[r0,#0x14]
000034  6091              STR      r1,[r2,#8]
;;;723      FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HiZSetupTime = 252;
000036  6942              LDR      r2,[r0,#0x14]
000038  60d1              STR      r1,[r2,#0xc]
;;;724    }
00003a  4770              BX       lr
;;;725    
                          ENDP


                          AREA ||i.FMC_SDRAMCmdConfig||, CODE, READONLY, ALIGN=2

                  FMC_SDRAMCmdConfig PROC
;;;943      */
;;;944    void FMC_SDRAMCmdConfig(FMC_SDRAMCommandTypeDef* FMC_SDRAMCommandStruct)
000000  2100              MOVS     r1,#0
;;;945    {
;;;946      uint32_t tmpr = 0x0;
;;;947        
;;;948      /* check parameters */
;;;949      assert_param(IS_FMC_COMMAND_MODE(FMC_SDRAMCommandStruct->FMC_CommandMode));
;;;950      assert_param(IS_FMC_COMMAND_TARGET(FMC_SDRAMCommandStruct->FMC_CommandTarget));
;;;951      assert_param(IS_FMC_AUTOREFRESH_NUMBER(FMC_SDRAMCommandStruct->FMC_AutoRefreshNumber));
;;;952      assert_param(IS_FMC_MODE_REGISTER(FMC_SDRAMCommandStruct->FMC_ModeRegisterDefinition));
;;;953      
;;;954      tmpr =   (uint32_t)(FMC_SDRAMCommandStruct->FMC_CommandMode |
000002  e9d02300          LDRD     r2,r3,[r0,#0]
000006  431a              ORRS     r2,r2,r3
000008  6883              LDR      r3,[r0,#8]
00000a  1e5b              SUBS     r3,r3,#1
00000c  ea421243          ORR      r2,r2,r3,LSL #5
000010  68c3              LDR      r3,[r0,#0xc]
000012  ea422143          ORR      r1,r2,r3,LSL #9
;;;955                          FMC_SDRAMCommandStruct->FMC_CommandTarget |
;;;956                         (((FMC_SDRAMCommandStruct->FMC_AutoRefreshNumber)-1)<<5) |
;;;957                         ((FMC_SDRAMCommandStruct->FMC_ModeRegisterDefinition)<<9));
;;;958      
;;;959      FMC_Bank5_6->SDCMR = tmpr;
000016  4a01              LDR      r2,|L21.28|
000018  6011              STR      r1,[r2,#0]
;;;960    
;;;961    }
00001a  4770              BX       lr
;;;962    
                          ENDP

                  |L21.28|
                          DCD      0xa0000150

                          AREA ||i.FMC_SDRAMDeInit||, CODE, READONLY, ALIGN=2

                  FMC_SDRAMDeInit PROC
;;;803      */
;;;804    void FMC_SDRAMDeInit(uint32_t FMC_Bank)
000000  f44f7234          MOV      r2,#0x2d0
;;;805    {
;;;806      /* Check the parameter */
;;;807      assert_param(IS_FMC_SDRAM_BANK(FMC_Bank));
;;;808      
;;;809      FMC_Bank5_6->SDCR[FMC_Bank] = 0x000002D0;
000004  0081              LSLS     r1,r0,#2
000006  f1a141c0          SUB      r1,r1,#0x60000000
00000a  f8c12140          STR      r2,[r1,#0x140]
;;;810      FMC_Bank5_6->SDTR[FMC_Bank] = 0x0FFFFFFF;    
00000e  f06f4270          MVN      r2,#0xf0000000
000012  4907              LDR      r1,|L22.48|
000014  f8412020          STR      r2,[r1,r0,LSL #2]
;;;811      FMC_Bank5_6->SDCMR = 0x00000000;
000018  2100              MOVS     r1,#0
00001a  4a05              LDR      r2,|L22.48|
00001c  3208              ADDS     r2,r2,#8
00001e  6011              STR      r1,[r2,#0]
;;;812      FMC_Bank5_6->SDRTR = 0x00000000;
000020  0652              LSLS     r2,r2,#25
000022  f8c21154          STR      r1,[r2,#0x154]
;;;813      FMC_Bank5_6->SDSR = 0x00000000; 
000026  4a02              LDR      r2,|L22.48|
000028  3210              ADDS     r2,r2,#0x10
00002a  6011              STR      r1,[r2,#0]
;;;814    }  
00002c  4770              BX       lr
;;;815    
                          ENDP

00002e  0000              DCW      0x0000
                  |L22.48|
                          DCD      0xa0000148

                          AREA ||i.FMC_SDRAMInit||, CODE, READONLY, ALIGN=2

                  FMC_SDRAMInit PROC
;;;823      */
;;;824    void FMC_SDRAMInit(FMC_SDRAMInitTypeDef* FMC_SDRAMInitStruct)
000000  b570              PUSH     {r4-r6,lr}
;;;825    { 
;;;826      /* temporary registers */
;;;827      uint32_t tmpr1 = 0;
000002  2100              MOVS     r1,#0
;;;828      uint32_t tmpr2 = 0;
000004  2200              MOVS     r2,#0
;;;829      uint32_t tmpr3 = 0;
000006  2300              MOVS     r3,#0
;;;830      uint32_t tmpr4 = 0;
000008  2400              MOVS     r4,#0
;;;831      
;;;832      /* Check the parameters */
;;;833      
;;;834      /* Control parameters */
;;;835      assert_param(IS_FMC_SDRAM_BANK(FMC_SDRAMInitStruct->FMC_Bank));
;;;836      assert_param(IS_FMC_COLUMNBITS_NUMBER(FMC_SDRAMInitStruct->FMC_ColumnBitsNumber)); 
;;;837      assert_param(IS_FMC_ROWBITS_NUMBER(FMC_SDRAMInitStruct->FMC_RowBitsNumber));
;;;838      assert_param(IS_FMC_SDMEMORY_WIDTH(FMC_SDRAMInitStruct->FMC_SDMemoryDataWidth));
;;;839      assert_param(IS_FMC_INTERNALBANK_NUMBER(FMC_SDRAMInitStruct->FMC_InternalBankNumber)); 
;;;840      assert_param(IS_FMC_CAS_LATENCY(FMC_SDRAMInitStruct->FMC_CASLatency));
;;;841      assert_param(IS_FMC_WRITE_PROTECTION(FMC_SDRAMInitStruct->FMC_WriteProtection));
;;;842      assert_param(IS_FMC_SDCLOCK_PERIOD(FMC_SDRAMInitStruct->FMC_SDClockPeriod));
;;;843      assert_param(IS_FMC_READ_BURST(FMC_SDRAMInitStruct->FMC_ReadBurst));
;;;844      assert_param(IS_FMC_READPIPE_DELAY(FMC_SDRAMInitStruct->FMC_ReadPipeDelay));   
;;;845      
;;;846      /* Timing parameters */
;;;847      assert_param(IS_FMC_LOADTOACTIVE_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)); 
;;;848      assert_param(IS_FMC_EXITSELFREFRESH_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay));
;;;849      assert_param(IS_FMC_SELFREFRESH_TIME(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime));
;;;850      assert_param(IS_FMC_ROWCYCLE_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay));
;;;851      assert_param(IS_FMC_WRITE_RECOVERY_TIME(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)); 
;;;852      assert_param(IS_FMC_RP_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)); 
;;;853      assert_param(IS_FMC_RCD_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay));    
;;;854      
;;;855      /* SDRAM bank control register configuration */ 
;;;856      tmpr1 =   (uint32_t)FMC_SDRAMInitStruct->FMC_ColumnBitsNumber |
00000a  e9d05601          LDRD     r5,r6,[r0,#4]
00000e  4335              ORRS     r5,r5,r6
000010  68c6              LDR      r6,[r0,#0xc]
000012  4335              ORRS     r5,r5,r6
000014  6906              LDR      r6,[r0,#0x10]
000016  4335              ORRS     r5,r5,r6
000018  6946              LDR      r6,[r0,#0x14]
00001a  4335              ORRS     r5,r5,r6
00001c  6986              LDR      r6,[r0,#0x18]
00001e  4335              ORRS     r5,r5,r6
000020  69c6              LDR      r6,[r0,#0x1c]
000022  4335              ORRS     r5,r5,r6
000024  6a06              LDR      r6,[r0,#0x20]
000026  4335              ORRS     r5,r5,r6
000028  6a46              LDR      r6,[r0,#0x24]
00002a  ea450106          ORR      r1,r5,r6
;;;857                 FMC_SDRAMInitStruct->FMC_RowBitsNumber |
;;;858                 FMC_SDRAMInitStruct->FMC_SDMemoryDataWidth |
;;;859                 FMC_SDRAMInitStruct->FMC_InternalBankNumber |           
;;;860                 FMC_SDRAMInitStruct->FMC_CASLatency |
;;;861                 FMC_SDRAMInitStruct->FMC_WriteProtection |
;;;862                 FMC_SDRAMInitStruct->FMC_SDClockPeriod |
;;;863                 FMC_SDRAMInitStruct->FMC_ReadBurst | 
;;;864                 FMC_SDRAMInitStruct->FMC_ReadPipeDelay;
;;;865                
;;;866      if(FMC_SDRAMInitStruct->FMC_Bank == FMC_Bank1_SDRAM )
00002e  6805              LDR      r5,[r0,#0]
000030  b935              CBNZ     r5,|L23.64|
;;;867      {
;;;868        FMC_Bank5_6->SDCR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr1;
000032  6805              LDR      r5,[r0,#0]
000034  00ad              LSLS     r5,r5,#2
000036  f1a545c0          SUB      r5,r5,#0x60000000
00003a  f8c51140          STR      r1,[r5,#0x140]
00003e  e00d              B        |L23.92|
                  |L23.64|
;;;869      }
;;;870      else   /* SDCR2 "don't care" bits configuration */
;;;871      {
;;;872        tmpr3 = (uint32_t)FMC_SDRAMInitStruct->FMC_SDClockPeriod |
000040  e9d05607          LDRD     r5,r6,[r0,#0x1c]
000044  4335              ORRS     r5,r5,r6
000046  6a46              LDR      r6,[r0,#0x24]
000048  ea450306          ORR      r3,r5,r6
;;;873                 FMC_SDRAMInitStruct->FMC_ReadBurst | 
;;;874                 FMC_SDRAMInitStruct->FMC_ReadPipeDelay;
;;;875        
;;;876        FMC_Bank5_6->SDCR[FMC_Bank1_SDRAM] = tmpr3;
00004c  4d29              LDR      r5,|L23.244|
00004e  602b              STR      r3,[r5,#0]
;;;877        FMC_Bank5_6->SDCR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr1;
000050  6805              LDR      r5,[r0,#0]
000052  00ad              LSLS     r5,r5,#2
000054  f1a545c0          SUB      r5,r5,#0x60000000
000058  f8c51140          STR      r1,[r5,#0x140]
                  |L23.92|
;;;878      }
;;;879      /* SDRAM bank timing register configuration */
;;;880      if(FMC_SDRAMInitStruct->FMC_Bank == FMC_Bank1_SDRAM )
00005c  6805              LDR      r5,[r0,#0]
00005e  bb35              CBNZ     r5,|L23.174|
;;;881      {
;;;882        tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
000060  6a85              LDR      r5,[r0,#0x28]
000062  682d              LDR      r5,[r5,#0]
000064  1e6d              SUBS     r5,r5,#1
000066  6a86              LDR      r6,[r0,#0x28]
000068  6876              LDR      r6,[r6,#4]
00006a  1e76              SUBS     r6,r6,#1
00006c  ea451606          ORR      r6,r5,r6,LSL #4
000070  6a85              LDR      r5,[r0,#0x28]
000072  68ad              LDR      r5,[r5,#8]
000074  1e6d              SUBS     r5,r5,#1
000076  ea462605          ORR      r6,r6,r5,LSL #8
00007a  6a85              LDR      r5,[r0,#0x28]
00007c  68ed              LDR      r5,[r5,#0xc]
00007e  1e6d              SUBS     r5,r5,#1
000080  ea463605          ORR      r6,r6,r5,LSL #12
000084  6a85              LDR      r5,[r0,#0x28]
000086  8a2d              LDRH     r5,[r5,#0x10]
000088  1e6d              SUBS     r5,r5,#1
00008a  ea464605          ORR      r6,r6,r5,LSL #16
00008e  6a85              LDR      r5,[r0,#0x28]
000090  8aad              LDRH     r5,[r5,#0x14]
000092  1e6d              SUBS     r5,r5,#1
000094  ea465605          ORR      r6,r6,r5,LSL #20
000098  6a85              LDR      r5,[r0,#0x28]
00009a  7e2d              LDRB     r5,[r5,#0x18]
00009c  1e6d              SUBS     r5,r5,#1
00009e  ea466205          ORR      r2,r6,r5,LSL #24
;;;883                (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
;;;884                (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
;;;885                (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
;;;886                (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16) |
;;;887                (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)-1) << 20) |
;;;888                (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay)-1) << 24);
;;;889                
;;;890                FMC_Bank5_6->SDTR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr2;
0000a2  4d14              LDR      r5,|L23.244|
0000a4  3508              ADDS     r5,r5,#8
0000a6  6806              LDR      r6,[r0,#0]
0000a8  f8452026          STR      r2,[r5,r6,LSL #2]
0000ac  e020              B        |L23.240|
                  |L23.174|
;;;891      }
;;;892      else   /* SDTR "don't care bits configuration */
;;;893      {
;;;894        tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
0000ae  6a85              LDR      r5,[r0,#0x28]
0000b0  682d              LDR      r5,[r5,#0]
0000b2  1e6d              SUBS     r5,r5,#1
0000b4  6a86              LDR      r6,[r0,#0x28]
0000b6  6876              LDR      r6,[r6,#4]
0000b8  1e76              SUBS     r6,r6,#1
0000ba  ea451606          ORR      r6,r5,r6,LSL #4
0000be  6a85              LDR      r5,[r0,#0x28]
0000c0  68ad              LDR      r5,[r5,#8]
0000c2  1e6d              SUBS     r5,r5,#1
0000c4  ea462605          ORR      r6,r6,r5,LSL #8
0000c8  6a85              LDR      r5,[r0,#0x28]
0000ca  8a2d              LDRH     r5,[r5,#0x10]
0000cc  1e6d              SUBS     r5,r5,#1
0000ce  ea464205          ORR      r2,r6,r5,LSL #16
;;;895                (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
;;;896                (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
;;;897                (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16);
;;;898                
;;;899        tmpr4 =   (uint32_t)(((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
0000d2  6a85              LDR      r5,[r0,#0x28]
0000d4  68ed              LDR      r5,[r5,#0xc]
0000d6  1e6d              SUBS     r5,r5,#1
0000d8  032e              LSLS     r6,r5,#12
0000da  6a85              LDR      r5,[r0,#0x28]
0000dc  8aad              LDRH     r5,[r5,#0x14]
0000de  1e6d              SUBS     r5,r5,#1
0000e0  ea465405          ORR      r4,r6,r5,LSL #20
;;;900                (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)-1) << 20);
;;;901                
;;;902                FMC_Bank5_6->SDTR[FMC_Bank1_SDRAM] = tmpr4;
0000e4  4d03              LDR      r5,|L23.244|
0000e6  3508              ADDS     r5,r5,#8
0000e8  602c              STR      r4,[r5,#0]
;;;903                FMC_Bank5_6->SDTR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr2;
0000ea  6806              LDR      r6,[r0,#0]
0000ec  f8452026          STR      r2,[r5,r6,LSL #2]
                  |L23.240|
;;;904      }
;;;905      
;;;906    }
0000f0  bd70              POP      {r4-r6,pc}
;;;907    
                          ENDP

0000f2  0000              DCW      0x0000
                  |L23.244|
                          DCD      0xa0000140

                          AREA ||i.FMC_SDRAMStructInit||, CODE, READONLY, ALIGN=1

                  FMC_SDRAMStructInit PROC
;;;913      */
;;;914    void FMC_SDRAMStructInit(FMC_SDRAMInitTypeDef* FMC_SDRAMInitStruct)  
000000  2100              MOVS     r1,#0
;;;915    {  
;;;916      /* Reset SDRAM Init structure parameters values */
;;;917      FMC_SDRAMInitStruct->FMC_Bank = FMC_Bank1_SDRAM;
000002  6001              STR      r1,[r0,#0]
;;;918      FMC_SDRAMInitStruct->FMC_ColumnBitsNumber = FMC_ColumnBits_Number_8b;
000004  6041              STR      r1,[r0,#4]
;;;919      FMC_SDRAMInitStruct->FMC_RowBitsNumber = FMC_RowBits_Number_11b; 
000006  6081              STR      r1,[r0,#8]
;;;920      FMC_SDRAMInitStruct->FMC_SDMemoryDataWidth = FMC_SDMemory_Width_16b;
000008  2110              MOVS     r1,#0x10
00000a  60c1              STR      r1,[r0,#0xc]
;;;921      FMC_SDRAMInitStruct->FMC_InternalBankNumber = FMC_InternalBank_Number_4; 
00000c  2140              MOVS     r1,#0x40
00000e  6101              STR      r1,[r0,#0x10]
;;;922      FMC_SDRAMInitStruct->FMC_CASLatency = FMC_CAS_Latency_1;  
000010  2180              MOVS     r1,#0x80
000012  6141              STR      r1,[r0,#0x14]
;;;923      FMC_SDRAMInitStruct->FMC_WriteProtection = FMC_Write_Protection_Enable;
000014  0089              LSLS     r1,r1,#2
000016  6181              STR      r1,[r0,#0x18]
;;;924      FMC_SDRAMInitStruct->FMC_SDClockPeriod = FMC_SDClock_Disable;
000018  2100              MOVS     r1,#0
00001a  61c1              STR      r1,[r0,#0x1c]
;;;925      FMC_SDRAMInitStruct->FMC_ReadBurst = FMC_Read_Burst_Disable;
00001c  6201              STR      r1,[r0,#0x20]
;;;926      FMC_SDRAMInitStruct->FMC_ReadPipeDelay = FMC_ReadPipe_Delay_0; 
00001e  6241              STR      r1,[r0,#0x24]
;;;927       
;;;928      FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay = 16;
000020  2110              MOVS     r1,#0x10
000022  6a82              LDR      r2,[r0,#0x28]
000024  6011              STR      r1,[r2,#0]
;;;929      FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay = 16;
000026  6a82              LDR      r2,[r0,#0x28]
000028  6051              STR      r1,[r2,#4]
;;;930      FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime = 16;
00002a  6a82              LDR      r2,[r0,#0x28]
00002c  6091              STR      r1,[r2,#8]
;;;931      FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay = 16;
00002e  6a82              LDR      r2,[r0,#0x28]
000030  60d1              STR      r1,[r2,#0xc]
;;;932      FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime = 16;
000032  6a82              LDR      r2,[r0,#0x28]
000034  6111              STR      r1,[r2,#0x10]
;;;933      FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay = 16;
000036  6a82              LDR      r2,[r0,#0x28]
000038  6151              STR      r1,[r2,#0x14]
;;;934      FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay = 16;
00003a  6a82              LDR      r2,[r0,#0x28]
00003c  6191              STR      r1,[r2,#0x18]
;;;935      
;;;936    }
00003e  4770              BX       lr
;;;937    
                          ENDP


                          AREA ||i.FMC_SDRAMWriteProtectionConfig||, CODE, READONLY, ALIGN=1

                  FMC_SDRAMWriteProtectionConfig PROC
;;;1025     */
;;;1026   void FMC_SDRAMWriteProtectionConfig(uint32_t SDRAM_Bank, FunctionalState NewState)
000000  b161              CBZ      r1,|L25.28|
;;;1027   {
;;;1028     /* Check the parameter */
;;;1029     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1030     assert_param(IS_FMC_SDRAM_BANK(SDRAM_Bank));
;;;1031     
;;;1032     if (NewState != DISABLE)
;;;1033     {
;;;1034       FMC_Bank5_6->SDCR[SDRAM_Bank] |= FMC_Write_Protection_Enable;    
000002  0082              LSLS     r2,r0,#2
000004  f1a242c0          SUB      r2,r2,#0x60000000
000008  f8d22140          LDR      r2,[r2,#0x140]
00000c  f4427300          ORR      r3,r2,#0x200
000010  0082              LSLS     r2,r0,#2
000012  f1a242c0          SUB      r2,r2,#0x60000000
000016  f8c23140          STR      r3,[r2,#0x140]
00001a  e00c              B        |L25.54|
                  |L25.28|
;;;1035     }
;;;1036     else
;;;1037     {
;;;1038       FMC_Bank5_6->SDCR[SDRAM_Bank] &= SDCR_WriteProtection_RESET;
00001c  0082              LSLS     r2,r0,#2
00001e  f1a242c0          SUB      r2,r2,#0x60000000
000022  f8d22140          LDR      r2,[r2,#0x140]
000026  f64753ff          MOV      r3,#0x7dff
00002a  401a              ANDS     r2,r2,r3
00002c  0083              LSLS     r3,r0,#2
00002e  f1a343c0          SUB      r3,r3,#0x60000000
000032  f8c32140          STR      r2,[r3,#0x140]
                  |L25.54|
;;;1039     } 
;;;1040     
;;;1041   }
000036  4770              BX       lr
;;;1042   
                          ENDP


                          AREA ||i.FMC_SetAutoRefresh_Number||, CODE, READONLY, ALIGN=2

                  FMC_SetAutoRefresh_Number PROC
;;;1009     */
;;;1010   void FMC_SetAutoRefresh_Number(uint32_t FMC_Number)
000000  4904              LDR      r1,|L26.20|
;;;1011   {
;;;1012     /* check the parameters */
;;;1013     assert_param(IS_FMC_AUTOREFRESH_NUMBER(FMC_Number));
;;;1014     
;;;1015     FMC_Bank5_6->SDCMR |= (FMC_Number << 5);   
000002  6809              LDR      r1,[r1,#0]
000004  ea411140          ORR      r1,r1,r0,LSL #5
000008  f04f4220          MOV      r2,#0xa0000000
00000c  f8c21150          STR      r1,[r2,#0x150]
;;;1016   }
000010  4770              BX       lr
;;;1017   
                          ENDP

000012  0000              DCW      0x0000
                  |L26.20|
                          DCD      0xa0000150

                          AREA ||i.FMC_SetRefreshCount||, CODE, READONLY, ALIGN=2

                  FMC_SetRefreshCount PROC
;;;995      */
;;;996    void FMC_SetRefreshCount(uint32_t FMC_Count)
000000  4904              LDR      r1,|L27.20|
;;;997    {
;;;998      /* check the parameters */
;;;999      assert_param(IS_FMC_REFRESH_COUNT(FMC_Count));
;;;1000     
;;;1001     FMC_Bank5_6->SDRTR |= (FMC_Count<<1);
000002  6809              LDR      r1,[r1,#0]
000004  ea410140          ORR      r1,r1,r0,LSL #1
000008  f04f4220          MOV      r2,#0xa0000000
00000c  f8c21154          STR      r1,[r2,#0x154]
;;;1002      
;;;1003   }
000010  4770              BX       lr
;;;1004   
                          ENDP

000012  0000              DCW      0x0000
                  |L27.20|
                          DCD      0xa0000154

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  FMC_DefaultTimingStruct
                          DCD      0x0000000f
                          DCD      0x0000000f
                          DCD      0x000000ff
                          DCD      0x0000000f
                          DCD      0x0000000f
                          DCD      0x0000000f
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\BSP\\STM32F4xx\\src\\stm32f4xx_fmc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32f4xx_fmc_c_cedc13fd____REV16|
#line 388 "..\\..\\..\\CMSIS\\4.5.0\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___15_stm32f4xx_fmc_c_cedc13fd____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32f4xx_fmc_c_cedc13fd____REVSH|
#line 402
|__asm___15_stm32f4xx_fmc_c_cedc13fd____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32f4xx_fmc_c_cedc13fd____RRX|
#line 587
|__asm___15_stm32f4xx_fmc_c_cedc13fd____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
